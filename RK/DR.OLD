***
*** FILE: DR.ASM
*** DERBY RACE
***
*** JFL 12 JUL 92; STARTED
*** JFL 13 JUL 92
*** JFL 14 JUL 92
*** JFL 16 JUL 92
*** JFL 17 JUL 92; JIM'S NEW SEMI IMAGES
*** JFL 21 JUL 92
*** JFL 22 JUL 92; WHEEL-POINT HIT TESTING STARTED
*** JFL 23 JUL 92; SOUNDS
*** JFL 24 JUL 92
*** JFL 28 JUL 92
*** JFL 29 JUL 92
*** JFL 31 JUL 92; MULTIPARTS STARTED
*** JFL 01 AUG 92
*** JFL 03 AUG 92; MULTIPART CAR
*** JFL 04 AUG 92
*** JFL 05 AUG 92; DAMAGE TO PARTS
*** JFL 07 AUG 92; DAMAGE AFFECTS CONTROL
*** JFL 09 AUG 92; HIT TEST RECTANGLE OVERLAPPING
*** JFL 10 AUG 92; SPIN DIR BASED ON HIT
*** JFL 11 AUG 92
*** JFL 12 AUG 92; ALL PLAYERS ON SCREEN
*** JFL 16 AUG 92; SPLIT DR.ASM -> DRH.ASM DRI.ASM
*** JFL 18 AUG 92; MOTION VECTOR METHOD
*** JFL 20 AUG 92
*** JFL 21 AUG 92; REV CRASH/PEELOUT SND FIXES
*** JFL 23 AUG 92
*** JFL 13 SEP 92; SCALE FIX
*** JFL 23 SEP 92
*** JFL 28 SEP 92; NEW SCRATCH
*** JFL 30 SEP 92; NEW SCORE
*** JFL 02 OCT 92; SHADOW
*** JFL 07 OCT 92; TURBOCARINP
*** JFL 09 OCT 92
*** JFL 12 OCT 92; OPARTSXY
*** JFL 13 OCT 92; VEC
*** JFL 14 OCT 92; ONE CAR
*** JFL 15 OCT 92; NEW MAP OBJ
*** JFL 16 OCT 92; DRB
*** JFL 22 OCT 92
*** JFL 26 OCT 92
*** JFL 27 OCT 92
*** JFL 29 OCT 92
*** JFL 23 DEC 92; NEW VEC
*** JFL 10 JAN 93; GCOLLIST
*** JFL 24 JAN 93
***
	.MLIB	"APMACS.LIB"
	.FILE	"DR.ASM"
	.TITLE	" <<< DERBY RACE -- MAIN LOOP >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**
** COMPILE FLAGS
**
FORCECARSONSCREEN	EQU	0
AUTOSCROLL		EQU	0 ;1 ;020000H -- SWITCH DOESNT WORK PROPERLY!!!
JUMPLOCKSTEER		EQU	0

ARROWSHOWSTOPO		EQU	1

***********************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
*************************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"
	.INCLUDE	"IMGTBL1.GLO"
	.INCLUDE	"DRINP.I"
	.INCLUDE	"DR.I"
	.INCLUDE	"DRO.I"
	.INCLUDE	"DRM.I"		;MOVE INCLUDES
	.INCLUDE	"DRT.I"
	.INCLUDE	"DRS.I"
	.INCLUDE	"DRVEC.I"
	.INCLUDE	"DRV.I"
	.INCLUDE	"DRMO.I"
	.INCLUDE	"DRB.I"
	.INCLUDE	"DRC.I"
	.INCLUDE	"DRP.I"
	.INCLUDE	"DRSND.I"
	.INCLUDE	"DRPAL.I"
	.INCLUDE	"DRHITMSK.I"
	.INCLUDE	"DRMIS.I"
	.INCLUDE	"DRFHIT.I"
	.INCLUDE	"DRFSHOW.I"
	.INCLUDE	"DRFGHOST.I"
	.INCLUDE	"DRFARROW.I"
	.INCLUDE	"DRFMASK.I"
	.INCLUDE	"DRFFRI.I"

**
** CHECK SOME STUFF
**
	.IF OCARSIZE>ODATAX
	- OCARSIZE TOO BIG -
	.ENDIF

	.IF OMODSIZE>ODATAX
	- OMODSIZE TOO BIG -
	.ENDIF

	.IF NUMBUTTONS<>3
	- CHECK MOVE STUFF IN DR.I -
	.ENDIF

	.IF MPYSCALE<>8
	- CHECK VEL SCALE IN APD.ASM -
	.ENDIF

** OTHERS USE
	.DEF	DRMAIN		;DR.ASM
	.DEF	ALTINPHANDLER	;DR.ASM
	.DEF	NORMINPHANDLER	;DR.ASM
	.DEF	CHECKINPUT	;DR.ASM
	.DEF	PLAYERCARINP	;DR.ASM
	.DEF	CRAZYCARINP	;DR.ASM
	.DEF	DEMONCARINP	;DR.ASM
	.DEF	NOCONTROLCARINP	;DR.ASM
	.DEF	STEERONLYCARINP	;DR.ASM
	.DEF	JUMPCARINP	;DR.ASM
	.DEF	ADDNSPART	;DR.ASM
	.DEF	SETNSPONE	;DR.ASM
	.DEF	KILLCAR		;DR.ASM
	.DEF	CARILIST	;DR.ASM
	.DEF	ADDSHADOW	;DR.ASM
	.DEF	ADDTIREVEC	;DR.ASM
	.DEF	CLEARINPVEC	;DR.ASM
	.DEF	CLEARVEC	;DR.ASM
	.DEF	VECTORTOVELS	;DR.ASM
	.DEF	SETCARDIR	;DR.ASM
	.DEF	SHAKESCREEN	;DR.ASM
	.DEF	CHANGECARSPEED	;DR.ASM
	.DEF	SPINCARINPSUB  	;DR.ASM
	.DEF	CARINPPEDSUB   	;DR.ASM
	.DEF	ROUNDDIR	;DR.ASM
	.DEF	PEDALONLYCARINP	;DR.ASM
	.DEF	ISCAROBJ	;DR.ASM
	.DEF	CKSUPLCAR	;DR.ASM
	.DEF	COMPTODIRVEC	;DR.ASM
	.DEF	COMPTODIRMAGVEC	;DR.ASM
	.DEF	SETGCOL		;DR.ASM
	.DEF	FINDPOWERUP	;DR.ASM
	
** WE USE
	.REF	GAMEOVER      	;DRATT.ASM
	.REF	INITWAVE	;DRI.ASM
	.REF	STARTPLANES	;DRB.ASM
	.REF	WIPEOUT		;AP.ASM
	.REF	INITINPUT	;DRINP.ASM
	.REF	GETINPUT	;DRINP.ASM
   	.REF	SINCOS		;DRSINCOS.ASM
	.REF	ATANTBL		;DRSINCOS.ASM
	.REF	ATANTBLX	;DRSINCOS.ASM
	.REF	ANIMP		;APC.ASM
	.REF	INITOBJECTS	;DRI.ASM
	.REF	INITDRDATA	;DRI.ASM
	.REF	SCOREINIT	;DRS.ASM
	.REF	SHADOWLIST	;APD.ASM
	.REF	ASHIT1		;DRI.ASM
	.REF	FREEOBJ		;APD.ASM
	.REF	SPECMOVE	;DRM.ASM
	.REF	SETOBJSCALE	;DRH.ASM
	.REF	INITCARSFORNEWRACE ;DRI.ASM
	.REF	VELADDCAR	;APD.ASM
	.REF	VELSUBCAR	;APD.ASM
	.REF	AFTERHITTEST	;DRH.ASM
	.REF	BEFOREHITTEST	;DRH.ASM
	.REF	HITTESTOBJS	;DRH.ASM
	.REF	SREGXXX		;DR.ASM
	.REF	CREGXXX		;DR.ASM
	.REF	ADDTOARENA	;DRI.ASM
	.REF	INITTOPO	;DRT.ASM
	.REF	CKINSANI	;APD.ASM
	.REF	SCORESETTIME	;DRS.ASM
	.REF	SCORESETTURBO	;DRS.ASM
	.REF	SCORETIMEDOWN	;DRS.ASM
	.REF	DOPEELOUT	;DRI.ASM
	.REF	ENDMOVE		;DRM.ASM
	.REF	HITCARTOPO	;DRT.ASM
	.REF	TOPOXZ		;DRT.ASM
	.REF	TOPOREACT	;DRT.ASM
	.REF	HITTESTCARS	;DRH.ASM
	.REF	SQROOT		;DRU.ASM	
	.REF	SETARENA	;DRT.ASM
	.REF	SHAKEXY		;APD.ASM
	.REF	CCABORT		;DRC.ASM
	.REF	CARDISABLE	;DRC.ASM
	.REF	SCORESETDAMAGE	;DRS.ASM
	.REF	CHANGEOBJTOANIM	;DRA.ASM
	.REF	MAKESND		;DRSND.ASM
	.REF	ARENASND	;DRSND.ASM
	.REF	RANDOMA0	;APUTIL.ASM
	.REF	ARSCALETBLRACE 	;DRH.ASM
	.REF	ARSCALETBLFIGHT	;DRH.ASM
	.REF	INITARENASCALE	;DRH.ASM
	.REF	MAKEOBJANIM	;DRA.ASM
	.REF	RESTORESNDMAP	;DRSND.ASM
	.REF	MISIMAGES	;DRMIS.ASM
	.REF	DIRANIMDIRT	;DRA.ASM
	.REF	GETPLAYERINPDATA	;DRINP.ASM
	.REF	CREATEDRONE	;DRI.ASM
	.REF	HANDLEDRONE	;DRD.ASM
	.REF	POINT2POINTDIR16 ;DRH.ASM

** WE USE -- RAM
	.REF	WINNER		;DRRAM.ASM
	.REF	TTRIG		;DRRAM.ASM
	.REF	DRG		;DRRAM.ASM
	.REF	ARENAINIT	;DRRAM.ASM
	.REF	J64Q		;DRRAM.ASM
	.REF	SUPLCARCOUNT 	;DRRAM.ASM
	.REF	DEBUGMOVE	;DRRAM.ASM
	.REF	ARENATRACKINFO	;DRRAM.ASM
	.REF	GCOLLIST	;DRRAM.ASM
 	.REF	CARINITTBL	;DRRAM.ASM
	.DEF	HOLDGAME	;DRRAM.ASM

	.TEXT
	.EVEN

**
** DEFINES
**
STEERDIRRESPONSE	EQU	17

	.BSS	HOLDGAME,16,0

***
*** -----------------------------------------------------------------------
***


	.IF FRI
**
** FRIMODE
**
** JFL 05 FEB 93
**
FRIMODE
	
	;
	;INIT
	;

	;ROUTINE INIT
	CLR	B0		;PLAYERS ENTERED IN GAME SO FAR

	;CLEAR IT TO START WITH
	MOVI	CARINITTBL,A0
	CLR	A1
	CLR	A2
FMILOOP
	MOVW	A1,*A0(CITACTIVE)
	MOVW	A2,*A0(CITCAR)
	MOVW	A2,*A0(CITINP)

	CALLA	GETPLAYERINPDATA ;IN:A2 PLNUM OUT:A2,A3 PLNUM,INPDATA
	MOVW	A1,*A3(INPB1)

	ADDI	CITSIZE,A0
	INC	A2
	CMPI	3+1,A2
	JRLT	FMILOOP

	;
	;WAIT TILL PEOPLE JOIN IN
	;

	MOVI	CARINITTBL,A0

FMWLOOP

	;CHECK IF ANYONE JOINS IN
	CLR	A2
FMWPLOOP
	;IS BTN PRESSED
	CALLA	GETPLAYERINPDATA ;IN:A2 PLNUM OUT:A2,A3 PLNUM,INPDATA
	MOVW	*A3(INPB1),A14
	JRZ	FMWPNEXT

	;IS PLAYER ALREADY IN
	MOVE	A0,A3
FMWPJLOOP
	MOVW	*A3(CITACTIVE),A14
	JRZ	FMWPJOIN		;NOT IN
	MOVW	*A3(CITINP),A14
	CMP	A14,A2
	JRNE	FMWPJLOOP		;SOMEONE ELSE
	JRUC	FMWPNEXT		;ALREADY IN

FMWPJOIN
	;PLAYER JOINS IN
	MOVW	A2,*A3(CITCAR)
	MOVW	A2,*A3(CITINP)
	MOVK	1,A14
	MOVW	A14,*A3(CITACTIVE)
	INC	B0

FMWPNEXT
	INC	A2
	CMPI	3,A4
	JRLT	FMWPLOOP

	;HAS ANYONE JOINED IN
	MOVE	B0,B0
	JRZ	FMWLOOP
	

	RETS
	.ENDIF ;FRI
	

SGSND	EQU	20H
SGDELAY	EQU	30H

SGCOUNT
	.LONG	FIVE
	.WORD	0
	.WORD	40
	.LONG	FOUR
	.WORD	0
	.WORD	40
	.LONG	THREE
	.WORD	0
	.WORD	40
	.LONG	TWO
	.WORD	0
	.WORD	40
	.LONG	ONE
	.WORD	0
	.WORD	40
SGRSG
	.LONG	R_1
	.WORD	SNDKILLMISL1
	.WORD	40
	.LONG	S_2
	.WORD	SNDKILLMISL1
	.WORD	40
	.LONG	G_3
	.WORD	SNDKILLMISL1
	.WORD	10
       	.LONG	0
	.WORD	0
	.WORD	0

OBJINITSG
	.LONG	FIVE		;IMAGE
	.LONG	0		;COLLISION VECTOR
 	.WORD	OID_JUNK  	;OID
	.WORD	DMAWNZ		;OCTRL
	.WORD	0		;OFLAGS
	.WORD	STYPNONE	;OSCALTYP
 	.LONG	0		;CFUNC
	;
	.LONG	[100,200]	;Y:X

	.BSS	SGA,32
	.BSS	SGTIME,32

SGZOFF	EQU	200

**
** IN
**   A1 NEW IHDR
**   A8 OBJ
**
SGSWAPOBJ
	move	A1,*A8(OIMG),L
	move	*A1(ISIZE),A14,L	;ISIZE (offset 0)
	move	A14,*A8(OSIZE),L
	MOVE	A14,*A8(OUSIZE),L
	move	*A1(ISAG),*A8(OSAG),L
	MOVW	*A8(OCTRL),A2
	MOVE	*A1(ICTRL),A14
	ANDI	0807FH,A2
	OR	A2,A14	
	MOVW	A14,*A8(OCTRL)

	MOVE	*A1(IANIOFF),A14,L
	MOVE	A14,*A8(OANIOFF),L
	move	A14,*A8(OUANIOFF),L

	CLR	A14
	MOVW	A14,*A8(OSCALEMUL)
	RETS
	
	.BSS	SGPLBTN,16*3


**
** STARTGUN
**
STARTGUN
	
	CLR	A10
	MOVL	A10,@SGTIME
	
	MOVI	OBJINITSG,A5
	CALLA	CREATE_OBJ
	TLOCKON	Z
	MOVL	A0,@SGA
	MOVE	A0,A8

	MOVL	*A5+,A14
	MOVW 	A14,*A0(OXPOS)
	SRL	16,A14
	MOVI	SGZOFF,A2
	ADD	A2,A14
	MOVW	A14,*A0(OZPOS)
	NEG	A2
	MOVW	A2,*A0(OZOFF)

	;MOVI	SCALE1TO1,A14
	;MOVL	A14,*A0(OSCALEDMA)
	;MOVW	A14,*A0(OSCALEMUL)
	
	CALLR	INSOBJ

	;SET OBJ
	MOVE	A10,A14
	SLL	6,A14
	ADDI	SGCOUNT,A14
	MOVL	*A14,A1
	CALLR	SGSWAPOBJ ;IN:A1,A8 IHDR,OBJ

	;CLEAR IT TO START WITH
	CLR	A1
	CLR	A2
SGILOOP
	CALLA	GETPLAYERINPDATA ;IN:A2 PLNUM OUT:A2,A3 PLNUM,INPDATA
	MOVW	A1,*A3(INPB2)
	
	MOVE	A2,A14
	SLL	4,A14
	ADDI	SGPLBTN,A14
	MOVW	A1,*A14

	INC	A2
	CMPI	3,A2
	JRLT	SGILOOP

	MOVE	A10,A14
	SLL	6,A14
	ADDI	SGCOUNT,A14
	MOVW	*A14(SGDELAY),A9
	MOVW	*A14(SGSND),A14
	CALLA	MAKESND ;IN:A14 SND

	RETS


**
** SGSUB
**
** IN
**    A8 OBJ
**    A9 TIME FOR CHANGE
**   A10 DECADE COUNT
**   A11
**
** JFL 05 FEB 93
**
SGSUB

	MOVL	@SGTIME,A14	
	INC	A14
	MOVL	A14,@SGTIME

	;CLEAR IT TO START WITH
	CLR	A2
SGLOOP
	CALLA	GETPLAYERINPDATA ;IN:A2 PLNUM OUT:A2,A3 PLNUM,INPDATA
	MOVW	*A3(INPB2),A1

	;GET CUR PUSH COUNT
	MOVE	A2,A3
	SLL	4,A3
	ADDI	SGPLBTN,A3
	MOVW	*A3,A14
	CMP	A14,A1
	JRGT	SGNEXTPL

	INC	A2
	CMPI	3,A2
	JRLT	SGLOOP
	JRUC	SGNEXT

SGNEXTPL
	INC	A1
	MOVW	A1,*A3
	MOVL	@SGTIME,A14	
	JRUC	SGNFAST

SGNEXT
	;TIME TO CHANGE?
	MOVL	@SGTIME,A14	
	CMP	A9,A14
	JRLO	SGX

SGNFAST
	;SET UP FOR NEXT CHANGE
	MOVE	A14,A9

	MOVE	A10,A14
	SLL	6,A14
	ADDI	SGCOUNT,A14
	MOVW	*A14(SGDELAY),A2
	ADD	A2,A9


	;SET OBJ
	INC	A10
	MOVE	A10,A14
	SLL	6,A14
	ADDI	SGCOUNT,A14
	MOVL	*A14,A1
	JRZ	SGZAP
	CALLR	SGSWAPOBJ ;IN:A1,A8 IHDR,OBJ
	
	MOVE	A10,A14
	SLL	6,A14
	ADDI	SGCOUNT,A14
	MOVW	*A14(SGSND),A14
	CALLA	MAKESND ;IN:A14 SND

SGX
	;NOT DONE
	CLRC
	RETS
SGZAP
	;DONE


	MOVL	@SGA,A8
	CALLA	ZAP_OBJ
	SETC
	RETS

***
*** -----------------------------------------------------------------------
***


**
** ARENAS STRUCT
**
** JFL 03 DEC 92
**
ARADID		EQU	000H	;UHW
ARPLID		EQU	010H	;UHW
ARTUNE		EQU	020H	;UHW
ARXXX1		EQU	030H	;UHW
ARSCALETBL	EQU	040H	;UHL SCALE TBL
ARXXX2		EQU	060H	;UHL
ARSIZE		EQU	080H	; SIZE
ARSIZEOF	EQU	7	; SIZEOF SHIFT

**
** ARENAS
**
** JFL 03 DEC 92
**
ARENAS

	;ARENA1
	.WORD	ADIDARENA2,PLIDARENA2,SNDSONGANOTHER,0
	.LONG	ARSCALETBLRACE,0

	;ARENA2
	.WORD	ADIDARENA5,PLIDARENA5,SNDSONGDESTRUCTOID,0
	.LONG	ARSCALETBLRACE,0

	;ARENA3
	.WORD	ADIDARENA3,PLIDARENA3,SNDSONGJOHNNYB,0
	.LONG	ARSCALETBLRACE,0

	;ARENA4
	.WORD	ADIDARENA4,PLIDARENA4,SNDSONGDESTRUCTOID,0
	.LONG	ARSCALETBLRACE,0

	;ARENA5
	.WORD	ADIDARENA5,PLIDARENA5,SNDSONGTHRASHROCKRD,0
	.LONG	ARSCALETBLRACE,0

ARENASX
	

**
** DRMAIN
** JFL 12 JUL 92
** JFL 29 JUL 92
** JFL 02 OCT 92
** JFL 26 OCT 92
**
DRMAIN
	CREATE	PID_DRAG,DRPROC
	DIE

DRPROC
	DISPOFF			;DISPLAY OFF ------------------------------
	DINT			;DISABLE INTERRUPTS -----------------------

	CLR	A14
	MOVW	A14,@HOLDGAME
	MOVL	A14,@ANIOBJS
	CALLA	WIPEOUT	;KILL ALL DESTRUCTABLES

	CALLA	INITWAVE ;CALL AFTER WIPEOUT

	;SET GAME STATE
	MOVI	INGAME,A14
	MOVW	A14,@GAME_STATE

	MOVI	DRG,A8
	MOVW	*A8(DRGARENA),A8
	SLL	ARSIZEOF,A8
	ADDI	ARENAS,A8
	.IF DEBUG
	CMPI	ARENASX,A8
	TLOCKON	HS
	.ENDIF ;DEBUG

	;RESET THE SOUND MAP -- BEFORE SETARENA
	CALLA	RESTORESNDMAP

	;SET THE ARENA -- BEFORE INITOBJECTS,INITDRDATA
	MOVW	*A8(ARADID),A2
	CALLA	SETARENA ;IN: A2 ARENAID

	;SET SCALE TBLS
	MOVL	*A8(ARSCALETBL),A2
	CALLA	INITARENASCALE ;IN:A2 SCALETBL

	CALLR	INITDRDATA	;INIT OUR DATA AFTER SETARENA
	CALLA	INITINPUT	;INIT THE INPUT
	CALLA	SCOREINIT

	.IF MAKEGHOST
	MOVK	PLIDGHOST4,A2
	.ELSE ;!MAKEGHOST
	MOVW	*A8(ARPLID),A2
	.ENDIF ;!MAKEGHOST
	CALLR	STARTPLANES ;IN: A2 PLANEID

	EINT			;ENABLE INTERRUPTS ------------------------
	DISPON			;DISPLAY ON -------------------------------

	.IF MAKEGHOST
	.REF MAKEGHOSTMAP
	MOVK	1,A14
	MOVW	A14,@NOAUTOE
	SLEEP	10
	CALLA	MAKEGHOSTMAP
DRPMGLOOP
	SLEEP	10
	JRUC	DRPMGLOOP
	.ENDIF ;MAKEGHOST

	CREATE	PID_DRAGONE,CHECKINPUT	;SPAWN INPUT HANDLER

	.IF FRI
	CALLR	FRIMODE
	.ENDIF ;FRI

	;START A TUNE
	MOVW	*A8(ARTUNE),A14
	CALLA	MAKESND ;IN:A14 SNDID

	;INIT THE ARENA
	MOVL	@ARENAINIT,A14
	JRZ	DRPNOAI
	CALL	A14
DRPNOAI

	MOVK	1,A14
	MOVW	A14,@HOLDGAME

	CALLR	INITOBJECTS	;AFTER SETARENA
	
	SLEEP	10		;DRAW EVERYTHING


	.IF MAKEHITMASK
	.REF	MAKEHITDATA	;DRMAKHIT.ASM
	CALLA	MAKEHITDATA
	.ENDIF ;MAKEHITMASK


	;MISC INIT -- EVERY RACE
	CLR	A14
	MOVW	A14,@PAUSE_GAME


	;
	;PRIORITY PROCESSES
	;

	CREATEP	PID_DRAGONE,ANIMP
	CREATEP	PID_DRAGONE,MAINCARPROC	;SPAWN ANIMATION

	;
	;OTHER PROCESSES
	;

	CREATE	PID_DRAGONE,ARENAWATCHER ;SPAWN
	CREATE	PID_DRAGONE,ARENATICKER ;SPAWN
	CREATE	PID_DRAGONE,GCOLWATCHER ;SPAWN
	CREATE	PID_DRAGONE,SPAWNDRONE ;SPAWN

	;
	;CONDITIONAL PROCESSES
	;

	.IF ARROWTHING==0
	CREATE	PID_DRAGONE,ARENASCORETIMER ;SPAWN
	.ENDIF ;ARROWTHING

	.IF ARROWTHING-MAKEGHOST>0
	CREATE	PID_DRAGONE,ARROWTHINGWATCHER
	.ENDIF ;ARROWTHING

	CALLR	INITSTATS
	CALLA	INITTOPO
	CALLA	INITCARSFORNEWRACE ;AFTER INITOBJECTS,AFTER INITDRDATA

	CLR	A0
	MOVL	A0,@WINNER

	;
	;START GUN START
	;

	CALLR	STARTGUN
DRPSG
	SLEEP	2
	CALLR	SGSUB
	JRNC	DRPSG

	MOVI	SNDPEEL1,A14
	CALLA	MAKESND ;IN:A14 SND
       	SLEEP	1
	MOVI	SNDPEEL2,A14
	CALLA	MAKESND ;IN:A14 SND
       	SLEEP	10
	MOVI	SNDPEEL3,A14
	CALLA	MAKESND ;IN:A14 SND

	CLR	A14
	MOVW	A14,@HOLDGAME

	;
	;START GUN END
	;

DMLOOP

	SLEEP	1
	MOVL	@WINNER,A0	
	JRNZ	DMWINNER

	JRUC	DMLOOP

DMWINNER
	MOVE	A0,A8

	;MOVK	1,A14
	;MOVW	A14,@PAUSE_GAME

	SLEEP	60*4

	MOVL	A8,@WINNER	;IN CASE ANOTHER WINS IN MEAN TIME

	CALLA	GAMEOVER
	DIE
	

**
** INITSTATS
**
** JFL 26 OCT 92
**
INITSTATS
	RETS


**
** SPAWNDRONE
**
** JFL 18 JAN 93
**
SPAWNDRONE
	MOVK	1,A2		;HOW MANY DRONES TO MAKE
SDLOOP
	MOVW	A2,*-A12

SDLHOLD
	SLEEP	55*4
	MOVW	@HOLDGAME,A14
	JRNZ	SDLHOLD

	CALLA	CREATEDRONE ;SCRATCHES A0-A11

	MOVW	*A12+,A2
	DSJ	A2,SDLOOP

	DIE

	.IF DEBUG
**
** ISCAROBJ
**
** IN
**   A8 OBJ IN QUESTION
**
** JFL 15 NOV 92
**
ISCAROBJ
	MMTM	SP,A0
	MOVL	@SUPPLSTS+SUPL_CAR,A0
	JRZ	ICOX
ICOLOOP
	CMP	A0,A8	
	JREQ	ICOX
	MOVL	*A0(OSLINK),A0
	JRNZ	ICOLOOP
	TLOCKUP ;NOT ON CAR SUPL
ICOX
	MMFM	SP,A0
	RETS
	.ENDIF ;DEBUG

	.IF DEBUG
**
** CKSUPLCAR
**
** JFL 02 NOV 92
**
CKSUPLCAR
	MOVW	@SUPLCARCOUNT,A3
	MOVL	@SUPPLSTS+SUPL_CAR,A2
	JRZ	CSCX
CSCLOOP
	DEC	A3
	TLOCKON	N
	MOVL	*A2(OSLINK),A2
	JRNZ	CSCLOOP
CSCX
	MOVE	A3,A3
	TLOCKON	NZ

	RETS
	.ENDIF ;DEBUG

**
** FINDPOWERUP
**
** IN
**   A2-A3 SCRATCH
**   A8 OBJ
** OUT
**   C IF NOT LOCKED ON OBJ
**   ELSE A2 IS FIRST MISSILEOBJ THAT IS LOCKED ON
**
** JFL 18 JAN 93
**
FINDPOWERUP
	MOVL	@SUPPLSTS+SUPL_FOBJ,A2
	JRZ	FPUBADX

FPULOOP
	;CHECK IF THIS IS A MISSILE
	MOVW	*A2(OID),A14
	ANDI	MASK_TYPE,A14
	CMPI	TYPE_POWERUP,A14
	JREQ	FPUX

FPUNEXT
	;NEXT
	MOVL	*A2(OSLINK),A2
	JRNZ	FPULOOP
	
FPUBADX
	SETC
	RETS
FPUX
	CLRC
	RETS

	.DEF	FINDPOWERUP	;DR.ASM
***
*** SLIP ------------------------------------------------------------------
***

SL_STEERVEL		EQU	21	;SL FIRST
SR_STEERVEL		EQU	21+8	;SL FIRST

**
** SLIP	ROUTINES !! EXIT WITH AN EXGPC B8 !!!
**
** IN
**   A0 INP
**   A1 FEEL, SCRATCH
**   A2 WHEEL MAG, SCRATCH
**   A3 SCRATCH
**   A7 CD
**   A8 OBJ
**  A10 NEW DIR
**   B8 PC
**
** OUT
**  A10 NEW DIR
**
** JFL 22 DEC 92
**
ARENASLIP
	;ADD IN SPEED RESPONSE
	MOVW	*A7(CDTOTMAG),A14	;FROM 0..800H
	SLL	SL_STEERVEL,A14		;INTO 0..7 RANGE
	SRL	SR_STEERVEL,A14
	SLL	4,A14			;SIZEOF SLIPTBL
	ADDI	EASYSLIPTBL,A14
	MOVW	*A14,A14
	
	;SHOULD WE START SLIPPING
	MOVE	A2,A3			;WHEEL SPIN MAG & DIR
	ABS	A3   			;GET JUST WHEEL SPIN MAG
	MOVW	*A1(FWHEELANTISLIP),A1	;MYSTERIOUS ANTI SLIP PROPERTY
	SUB	A1,A3
	MOVL	@ARENATRACKINFO,A1
	MOVW	*A1(TIANTISLIP),A1	;GET SLIP FACTOR FOR THIS ARENA
	SUB	A1,A3
	CMP	A14,A3			;CHECK THRESHOLD
	JRLE	ARSX
		  
	;CHECK IF WE ARE ALREADY SLIPPING
	MOVW	*A7(CDSLIPFACTOR),A14
	JRNZ	ARSX

	;
	;FIRST SLIP
	;
	
	.IF 0
	;
	;FIND TIRE TO ATTACH GRAPHIC TO
	;
	MOVK	1,A1				;ON BACK LEFT
	MOVB	*A8(ODIR),A3
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	ASNREV
	MOVK	3,A1				;ON FRONT RIGHT
ASNREV
	;ATTACH DIR TO OUTSIDE WHEEL SO DIRT LEADS SPIN
	;I.E. BACK TIRES WITH SPIN CLOCKWISE, DIRT GETS ON BACK LEFT
	;FRONT TIRES WITH SPIN CLOCKWISE, DIRT GETS ON FRONT RIGHT
	MOVE	A2,A2				;FIND DIR OF WHEEL SPIN
	JRN	ASCLOCKWISE
	XORI	3,A1				;MOVE TO OTHER SIDE				
ASCLOCKWISE
	.ENDIF ;0
	
	MOVI	FIRSTNSPART,A1
	MOVW	A1,*A7(CDSLIPPART)

	;
	;SET SLIP DIR & VEL
	;
	MOVL	*A7(CDTOTDIR),*A7(CDSLIPDIR)	;CDTOTMAG,CDSLIPMAG ALSO
	MOVI	PERCENT100<<SLIPFFRAC,A14
	MOVW	A14,*A7(CDSLIPFACTOR)
	MOVI	18H,A14
	MOVW	A14,*A7(CDSLIPFDECAY)

	;SLIP SOUND
	MOVW	*A7(CDINPNUM),A14
	ADDI	SNDSTEERSLIP1,A14
	CALLA	ARENASND ;IN:A14 SNDID

ARSX
	EXGPC	B8
	
**
** SLIP TBL
**
** JFL 22 DEC 92
**
EASYSLIPTBL
HARDSLIPTBL
	.WORD	32767 ;NO SLIPPING
	.WORD	32767 ;NO SLIPPING
	.WORD	STEERA2DMAX-STEERA2DMAX/4
	.WORD	STEERA2DMAX-STEERA2DMAX/3
	.WORD	STEERA2DMAX-STEERA2DMAX/2
	.WORD	STEERA2DMAX-STEERA2DMAX/2
	.WORD	STEERA2DMAX-STEERA2DMAX/2
	.WORD	STEERA2DMAX-STEERA2DMAX/2


***
*** --------------------------- ARENA PROCESSES -----------------------------
***

**
** SHAKESCREENTBL
**
** JFL 22 OCT 92
**
SHAKESCREENTBL
	.LONG	SSSMALL
	.LONG	SSMED
	.LONG	SSBIG
SHAKESCREENTBLX

SSSMALL
	.LONG	[-2,2],[0,-4],[-4,2],0
SSMED
	.LONG	[-2,2],[-2,4],[-4,4]
	.LONG	[-4,4],[-2,4],[-4,-2]
SSBIG
	.LONG	[-2,2],[0,-4],[-4,2],0

**
** SHAKESCREEN
**
** IN
**   A2 MAGNITUDE:FLAGS
**
** A MAGNITUDE OF 
**  0 -- SMALL
**  1 -- MEDIUM
**  2 -- BIG
**
** FLAGS -- SEE DR.I
**
**
** JFL 22 OCT 92
**
SHAKESCREEN
	MMTM	SP,A0,A1,A7,A8,A9
	
	;MAKE SURE WE ARE NOT SHAKING THE SCREEN
	MOVI	DRG,A3	
	MOVW	*A3(DRGFLAGS),A14
	BTST	B_DRGFSHAKESCREEN,A14
	JRNZ	SHSCX
     	ORI	M_DRGFSHAKESCREEN,A14
	MOVW	A14,*A3(DRGFLAGS)

	;SET UP FOR PROCESS
	MOVE	A2,A8		
	SRL	16,A2
	.IF DEBUG
	CMPI	3,A2
	TLOCKON	GE
	.ENDIF ;DEBUG
	SLL	5,A2			;SIZEOF SHAKESCREENTBL
	ADDI	SHAKESCREENTBL,A2
	.IF DEBUG
	CMPI	SHAKESCREENTBLX,A2
	TLOCKON	GE
	.ENDIF ;DEBUG
	MOVL	*A2,A9

	CREATE	PID_DRAGONE,SHAKESCREENPROC

SHSCX
	MMFM	SP,A0,A1,A7,A8,A9
	RETS


**
** SHAKESCREENPROC
**
** IN
**   A8 MAG:FLAGS
**   A9 SCRIPT
**
** JFL 22 OCT 92
** JFL 28 OCT 92
**
SHAKESCREENPROC
	
	;GET NEXT OFFSET FROM SCRIPT
	MOVL	*A9+,A2		;Y:X
	JRZ	SSPDONE
	
	;ISOLATE MOTION
	MOVE	A2,A3
	SRL	16,A3

	;ADD IT IN
	BTST	B_SSX,A8
	JRZ	SSPNOX
	MOVW	A2,@SHAKEXY
SSPNOX
	BTST	B_SSY,A8
	JRZ	SSPNOY
	MOVW	A3,@SHAKEXY+10H
SSPNOY
	
	SLEEP	1
	JRUC	SHAKESCREENPROC

SSPDONE
	MOVL	A2,@SHAKEXY
	MOVI	DRG,A3	

	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A3(DRGFLAGS+B_DRGFSHAKESCREEN),0
	SETF	16,1,0

	DIE

	.IF ARROWTHING

ARROWTHINGARENAOBJ
	.WORD	0		;ACTIVE TIME
	.WORD	AOID_ARROW	;OBJECT
	.LONG	[80,80]		;Z:X
	.WORD	0		;Y
	.WORD	0		;XXX1

**
** ARROWTHINGWATCHER
**
** JFL 09 OCT 92
** JFL 11 OCT 92
**
ARROWTHINGWATCHER
	MOVI	ARROWTHINGARENAOBJ,A8
	MOVL	*A8,A0
	JRNZ	ATWONE
	DIE
ATWONE
	MOVL	*A8+,A2		;LOAD [OBJID,ACTIVEFRAMES]
	MOVL	*A8+,A3		;LOAD Z:X
	MOVL	*A8+,A14	;LOAD ?:Y
	CALLA	ADDTOARENA ;A2,A3,A14 ARENAOBJID:ACTIVEFRAMES,Z:X,?:Y
	MOVE	A2,A8

	;OBJ IS IN A8	
ATWLOOP
	CLR	A2
	CALLA	GETPLAYERINPDATA ;IN:A2 PLNUM OUT:A2,A3 PLNUM,INPDATA
	MOVE	A3,A4
	MOVK	2,A2
	CALLA	GETPLAYERINPDATA ;IN:A2 PLNUM OUT:A2,A3 PLNUM,INPDATA
	MOVE	A3,A5
	
	MOVW	*A8(OZPOS),A2
	MOVW	*A4(INPWHEELMAG),A14
	NEG	A14
	SRA	1,A14
	ADD	A14,A2
	MOVW	A2,*A8(OZPOS)

	MOVW	*A8(OXPOS),A2
	MOVW	*A5(INPWHEELMAG),A14
	NEG	A14
	SRA	1,A14
	ADD	A14,A2
	MOVW	A2,*A8(OXPOS)

	;COMBINE X & Z FOR DEBUGGING SAKE
	MOVW	*A8(OXPOS),A2
	MOVW	*A8(OZPOS),A14
	SLL	16,A14
	MOVY	A14,A2
	NOP ;A2 [Z,X]

	.IF ARROWSHOWSTOPO
	;FIND TOPO DATA UNDER ARROW
	CALLA	TOPOXZ ;IN:A2 Z:X OUT:A2,A3 TOPOC,TOPOBA
	JRC	ATWOFFEDGE
	MOVE	A2,A3
	JRUC	ATWTDONE
ATWOFFEDGE
	MOVI	99,A3
ATWTDONE
	.ENDIF ;ARROWSHOSTOPO

	;DISPLAY DATA
	CMPI	100,A3
	JRLT	ATWVALOK
	MOVI	100,A14
	MODU	A14,A3
ATWVALOK
	CALLA	SCORESETTIME ;IN:A3 TIME

	SLEEP	4
	JRUC	ATWLOOP

	.ENDIF ;ARROWTHING

**
** SETGCOL -- EXGPC B8
**
** IN
**   A2 GCOL()
**   A8 OBJ
**
** JFL 10 JAN 93
**
SETGCOL
	.IF DEBUG
	MOVL	*A8(OGCOL),A14
	TLOCKON	NZ
	.ENDIF ;DEBUG

	;SET HANDLER
	MOVL	A2,*A8(OGCOL)

	;LINK INTO LIST
	MOVI	GCOLLIST,A2
	MOVL	*A2(0),*A8(OGCOLLINK)
	MOVL	A8,*A2

	EXGPC	B8

**
** CLRGCOL -- EXGPC B8
**
** IN
**   A2-A3 SCRATCH
**   A8 OBJ
**
** JFL 10 JAN 93
**
CLRGCOL
	;GET 1ST OBJ
	MOVL	@GCOLLIST,A3
	JRZ	CGCXBAD

	CMP	A3,A8
	JRNE	CGCLOOP

	;UNLINK FIRST
	MOVL	*A8(OGCOLLINK),A2
	MOVL	A2,@GCOLLIST
	CLR	A14
	MOVL	A14,*A8(OGCOL)
	JRUC	CGCX

CGCLOOP
	;GET NEXT
	MOVE	A3,A2			;SAVE PREV
	MOVL	*A3(OGCOLLINK),A3
	JRZ	CGCXBAD

CGCCHECK
	;IS THIS THE OBJ WE WANT
	CMP	A3,A8
	JRNE	CGCLOOP
	
	;UNLINK
	MOVL	*A3(OGCOLLINK),*A2(OGCOLLINK)
	CLR	A14
	MOVL	A14,*A8(OGCOL)
	
CGCX
	EXGPC	B8
CGCXBAD
	TLOCKUP
	EXGPC	B8

**
** GCOLWATCHER -- PROCESS
**
** JFL 01 OCT 92
** JFL 30 OCT 92; NO OFLAGS BIT
** JFL 10 JAN 93; GCOLLLIST
**
GCOLWATCHER
	;GET 1ST OBJ TO CHECK FOR GROUND COLLISION
	MOVL	@GCOLLIST,A8
	JRZ	GCWX

	;ZERO Q COUNT
	CLR	A1		;QCOUNT
	MOVI	J64Q,A9	 	;TOP OF Q

GCWLOOP
	;HAS IT HIT?	
	MOVL	*A8(OYACC),A14	
	JRNZ	GCWNEXT

	;Q IT UP
	INC	A1		;QCOUNT++
	MOVL	*A8(OGCOL),A14
	MOVL	A14,*A9+
	MOVL	A8,*A9+
	

GCWNEXT
	;NEXT OBJ
	MOVL	*A8(OGCOLLINK),A8
	JRNZ	GCWLOOP

	;ANY TO DO?
	MOVE	A1,A1
	JRZ	GCWX

	;TERM THE Q
	CLR	A14
	MOVL	A14,*A9

	;RESET TO TOP OF Q
	MOVI	J64Q,A9		;TOP OF Q
	JRUC	GCWPNEXT

GCWPLOOP
	;PULL OBJ & CALL
	MOVL	*A9+,A8		;GET OBJ
	MOVI	CLRGCOL,B8 	;FUNC IN A2-A3,A8 SC,OBJ
	EXGPC	B8 		;CLEAR OUT GCOL STUFF

	CALL	A0 ;IN: A0,A8 FUNC(),OBJ

GCWPNEXT
	;PULL FUNC
	MOVL	*A9+,A0		;GET FUNC	
	JRNZ	GCWPLOOP

GCWX
	SLEEP	2
	JRUC	GCOLWATCHER

ATFRAMEFREQ	EQU	4

**
** ARENAOBJECTSPEC
**
** JFL 24 SEP 92
**
ARENAOBJSPEC
	.IF MAKEGHOST
	.LONG	0		;NO OBJECTS
	.ENDIF ;MAKEGHOST

	.IF 0 ;NO RND SOUND
	.LONG	RANDOMSOUNDTBL	;OBJ:ACTIVE TIME
	.LONG	0		;Z:X
	.WORD	0		;Y
	.WORD	0		;XXX1
	.LONG	AOFUNRANDSND	;FUN()
	.WORD	60*10		;SLEEP TIME
	.ENDIF ;NO RND SOUND

	.LONG	[AOID_MISLICON,0] ;OBJ:ACTIVE TIME
	.LONG	[191,180]	;Z:X
	.WORD	0		;Y
	.WORD	0		;XXX1
	.LONG	0		;FUN()
	.WORD	60*10		;SLEEP TIME

	.LONG	0		;END TABLE, LOOP

**
** ARENAWATCHER
** GENERAL PURPOSE PROCESS TO WATCH THE ARENA AND ADD/REMOVE THINGS
** TO MAKE IT MORE FUN
**
** JFL 24 SEP 92
** JFL 22 NOV 92
**
ARENAWATCHER

	MOVI	ARENAOBJSPEC,A8
	MOVL	*A8,A0
	JRNZ	AWONE
	DIE
AWHOLD
	SLEEP	10
AWONE
	MOVW	@HOLDGAME,A14
	JRNZ	AWHOLD

	MOVL	*A8+,A2		;LOAD [OBJID,ACTIVEFRAMES]
	JRZ	ARENAWATCHER
	MOVL	*A8+,A3		;LOAD Z:X
	MOVL	*A8+,A14	;LOAD ?:Y
	
	MOVL	*A8+,A7		;FUN()
	JRZ	AWCREATE
	CALL	A7
	JRC	AWSLEEP		;DONT ADD
AWCREATE
	CALLA	ADDTOARENA ;A2,A3,A14 ARENAOBJID:ACTIVEFRAMES,Z:X,?:Y

AWSLEEP
	MOVW	*A8+,A0		;SLEEP TIME
	CALLA	PRCSLP
	JRUC	AWONE

**
** RANDOMSOUNDTBL
**
** JFL 22 NOV 92
**
RANDOMSOUNDTBL
	.WORD	07H		;COUNT MASK
	.WORD	SNDRAND1
	.WORD	SNDRAND2
	.WORD	SNDRAND3
	.WORD	SNDRAND4
	.WORD	SNDRAND5
	.WORD	SNDRAND6
	.WORD	SNDRAND7
	.WORD	SNDRAND8
	

**
** AOFUNRANDSND
**
** IN & OUT
**   A2 RANDOM SOUND TBL
**   A0,A3,A7,A9-A11 SCRATCH
**
** JFL 22 NOV 92
**
AOFUNRANDSND
	CALLA	RANDOMA0 ;A0 RND
	MOVW	*A2+,A14
	AND	A14,A0
	SLL	4,A0		;SIZEOF RANDOM SOUND TBL
	ADD	A0,A2
	MOVW	*A2,A14
	CALLA	MAKESND ;IN:A14 SNDID
	
	SETC			;DONT ADD ANYTHING TO THE ARENA
	RETS

**
** ARENATICKER
** GENERAL PURPOSE PROCESS TO MAINTAIN EXISTING ARENA OBJECTS
**
** JFL 24 SEP 92
**
ARENATICKER
	MOVI	SUPPLSTS+SUPL_FOBJ,A11
ATLOOP
	MOVL	*A11,A8		;GET OBJ IN LIST
	JRZ	ATX
	JRUC	ATONE
ATNEXT
	MOVL	*A8(OSLINK),A8
	JRZ	ATX
ATONE	
	;TIME TO KILL THIS OBJ?
	MOVW	*A8(OAOTIME),A0
	JRZ	ATNEXT
	SUBK	ATFRAMEFREQ,A0
	MOVW	A0,*A8(OAOTIME)
	JRP	ATNEXT
	CLR	A0
	MOVW	A0,*A8(OAOTIME)

	;KILL THIS PUPPY
	CALLA	ZAP_OBJ
	JRUC	ATNEXT
ATX
	SLEEP	ATFRAMEFREQ
	JRUC	ATLOOP

**
** ARENASCORETIMER
**
** JFL 06 OCT 92
**
ARENASCORETIMER
	MOVI	99,A3 			;SECONDS TO COUNT DOWN
	CALLA	SCORESETTIME ;IN:A3 TIME
	MOVI	TIMERSLEEPTBL,A8
ASTMLOOP
	.IF DEBUG
	MOVL	@DEBUGMOVE,A0
	JRZ	ASTMNODEBUG
	
	;GET INPUT
	MOVL	*A0(OCAR),A0
	MOVL	*A0(CDWHEELDIR),A3
	SLL	14,A3		;BIGGER IS MORE RESPONSIVE
	SRL	25,A3
	MOVI	100,A14
	MODU	A14,A3

	;SET NEXT ARENA
	MOVI	DRG,A0
	ORI	8000H,A3
	MOVW	A3,*A0(DRGARENA)
	ANDNI	8000H,A3
	
	;SET TIME
	CALLA	SCORESETTIME ;IN:A3 TIME
	SLEEP	2
	MOVI	TIMERSLEEPTBL,A8
	JRUC	ASTMLOOP
	
ASTMNODEBUG
	.ENDIF ;DEBUG

	;SLEEP FOR SO LONG
	MOVW	*A8+,A0		;SLEEP TIME
	JRNZ	ASTMLOOPNZ
	MOVI	TIMERSLEEPTBL,A8
	MOVW	*A8+,A0
	TLOCKON	Z
ASTMLOOPNZ
	CALLA	PRCSLP
	CALLA	SCORETIMEDOWN ;OUT Z IF TIMED OUT
	JRZ	ARENASCORETIMER
	JRUC	ASTMLOOP


TIMERSLEEPTBL
	.WORD	50
	.WORD	0
***
*** -----------------------------------------------------------------------
***

**
** CHECKINPUT
** JFL 13 JUL 92
**
CHECKINPUT
	CALLA	GETINPUT	;GET THE INPUT
	SLEEP	1
	JRUC	CHECKINPUT

**
** ADDSHADOW
**
** IN
**   A0 SCRATCH
**   A2 SCRATCH
**   A8 OBJ
**
** JFL 02 OCT 92
**
ADDSHADOW
	.IF DEBUG
	MOVL	*A8(OSHAD),A14
	TLOCKON	NZ
	.ENDIF ;DEBUG

	CALLA	GETOBJ
	TLOCKON	Z

	MOVL	A0,*A8(OSHAD)
	MOVL	A8,*A0(OSHAD)
	
	;LINK IT IN
	MOVE	B0,A2			;SAVE B0
	MOVI	SHADOWLIST,B0
	CLR	A14			;WHICH FGLIST
	MOVB	A14,*A0(OPLANE)		;INSPLANE DOES NOT SET OPLANE
	CALLA	INSPLANE		;B0 plane ptr
	MOVE	A2,B0			;RESTORE B0

	RETS


***
*** -----------------------------------------------------------------------
***



***
*** --------- VECTOR STUFF ------------------------------------------------
***

**
** ROUNDDIR
**
** IN
**  A10 DIR
**
** JFL 27 OCT 92
**
ROUNDDIR
	MOVE	A10,A14
	SRA	4,A10
	SLL	29,A14
	JRNC	RDX
	INC	A10
RDX
	SLL	4,A10
	RETS

ATANSHIFT	EQU	5		;FRACTION BITS

**
** COMPTODIRMAGVEC
**
** IN
**  A10 X
**  A11 Z
** OUT
**  A10 DIR
**  A11 MAG
**
** SCRATCHES B0,B1
**
** TURN VECOR COMPONENTS INTO A DIR & MAG
**
** JFL 21 OCT 92
**
COMPTODIRMAGVEC
	MMTM	SP,A0,A1,A2,A3,A4

	;FIND DIR
	CLR	A0		;SX
	CLR	A2		;SY
	MOVE	A10,A1		;DX
	MOVE	A11,A3		;DY
	CALLR	POINT2POINTDIR16 ;IN:A0,A1,A2,A3,A4 SX,DX,SY,DY,SC OUT:A3 DIR

	MOVE	A10,A2		;COPY OF X
	MOVE	A3,A10		;RESULT OF DIR
	
	;FIND APPROX DIST
	ABS	A2
	ABS	A11
	CMP	A2,A11
	JRHS	CTDMVNOFLIP
	SWAP	A2,A11
CTDMVNOFLIP
	SRL	2,A2
	ADD	A2,A11

	MMFM	SP,A0,A1,A2,A3,A4

	.IF 0 ;EXPENSIVE WAY
	MOVE	A10,B0
	MOVE	A11,B1
	CALLR	COMPTODIRVEC ;IN: A10,A11 X,Z OUT: A10,A11 DIR,SC
	MOVE	B0,A14
	MOVE	A10,B0				;DIR
	MOVE	A14,A10
	MOVE	B1,A11
	CALLR	COMPTOMAGVEC ;IN: A10,A11 X,Z OUT: A10,A11 SC,MAG
	MOVE	B0,A10
	.ENDIF ;EXPENSIVE WAY

	RETS

**
** COMPTODIRVEC
**
** IN
**  A10 X
**  A11 Z
** OUT
**  A10 DIR
**  A11 SCRATCH
**
** TURN VECTOR COMPONENTS INTO A DIR
**
** JFL 21 OCT 92
**
COMPTODIRVEC
	NEG	A11			;DONE BY VECTORTOVELS
	JRZ	CTDZZERO
	MOVE	A10,A10
	JRZ	CTDXZERO
	JRNN	CTD1OR4

	;QUADRANT 2 OR 3
	MOVE	A11,A11
	JRNN	CTD2

	;QUADRANT 3
	SLL	ATANSHIFT,A11
	DIVS	A10,A11
	SLL	3,A11			;SIZEOF ATANTBL
	ADDI	ATANTBL,A11
	CMPI	ATANTBLX,A11
	JRLT	CTD3LOOKUP
	
	;SET ANGLE
	MOVI	DIR180+DIR180/2,A10
	JRUC	CTDX

CTD3LOOKUP
	MOVB	*A11,A10
	ADDI	DIR180,A10
	JRUC	CTDX

CTDXZERO
	;X COMPONENT IS ZERO, ATAN IS UNDEFINED, ANGLE IS EITHER UP OR DOWN
	MOVE	A11,A11
	JRNN	CTDZUP

	;ANGLE IS DOWN
	MOVI	DIR180+DIR180/2,A10
	JRUC	CTDX
CTDZUP
	;ANGLE IS UP
	MOVI	DIR180/2,A10
	JRUC	CTDX

CTDZZERO
	;Z COMPONENT IS ZERO, ANGLE IS EITHER RIGHT OR LEFT
	MOVE	A10,A10
	JRNN	CTDXRIGHT
	
	;ANGLE IS LEFT
	MOVI	DIR180,A10
	JRUC	CTDX

CTDXRIGHT
	;ANGLE IS RIGHT
	CLR	A10
	JRUC	CTDX
CTD2
	;QUADRANT2
	NEG	A10
	SLL	ATANSHIFT,A11
	DIVS	A10,A11
	SLL	3,A11			;SIZEOF ATANTBL
	ADDI	ATANTBL,A11
	CMPI	ATANTBLX,A11
	JRLT	CTD2LOOKUP

	;SET ANGLE
	MOVI	DIR180/2,A10
	JRUC	CTDX

CTD2LOOKUP
	MOVI	DIR180,A10
	MOVB	*A11,A14
	SUB	A14,A10
	JRUC	CTDX
CTD1OR4
	MOVE	A11,A11
	JRNN	CTD1
	
	;QUADRANT 4
	NEG	A11
	SLL	ATANSHIFT,A11
	DIVS	A10,A11
	SLL	3,A11			;SIZEOF ATANTBL
	ADDI	ATANTBL,A11
	CMPI	ATANTBLX,A11
	JRLT	CTD4LOOKUP
	
	;SET ANGLE
	MOVI	DIR180+DIR180/2,A10
	JRUC	CTDX
	
CTD4LOOKUP
	MOVI	DIR180*2,A10
	MOVB	*A11,A14
	SUB	A14,A10
	JRUC	CTDX

CTD1
	;QUADRANT 1
	SLL	ATANSHIFT,A11
	DIVS	A10,A11
	SLL	3,A11			;SIZEOF ATANTBL
	ADDI	ATANTBL,A11
	CMPI	ATANTBLX,A11
	JRLT	CTD1LOOKUP
	
	;SET ANGLE
	MOVI	DIR180/2,A10
	JRUC	CTDX
	
CTD1LOOKUP
	MOVB	*A11,A10
	
CTDX
	RETS

**
** COMPTOMAGVEC
**
** TURN VECTOR COMPONENTS INTO A POSITIVE MAGNITUDE
**
** IN
**  A10 X
**  A11	Z
** OUT
**  A10 SCRATCHED
**  A11 MAG
**
** JFL 15 OCT 92
** JFL 21 OCT 92
**
COMPTOMAGVEC
	MOVE	A10,A10
	JRZ	CTMVUSEZ
	MOVE	A11,A11
	JRZ	CTMVUSEX

	ABS	A10
	ABS	A11
	MOVE	A10,A3
	MPYU	A3,A3

	CMP	A10,A11
	JREQ	CTMVEQ

	MPYU	A11,A11
	ADD	A11,A3

CTMVSQ
	CALLA	SQROOT ;IN: A2,A3 SC,NUM OUT: A3 SQROOT(NUM)
	MOVE	A3,A11
	JRUC	CTMVX
CTMVEQ
	ADD	A3,A3
	JRUC	CTMVSQ
CTMVUSEX
	MOVE	A10,A11
CTMVUSEZ
	ABS	A11
CTMVX
	RETS

**
** CLEARVEC
** CLEARINPVEC
**
** IN
**   A2-A3 SCRATCH
**   A7 CD
**
** JFL 23 DEC 92
**
CLEARVEC
	CLR	A14
	MOVE	A7,A2
	ADDI	CDCLEARVEC,A2
	MOVK	CDCLEARVECCOUNT,A3
CVLOOP
	MOVL	A14,*A2+
	DSJ	A3,CVLOOP
      	RETS

CLEARINPVEC
	CLR	A14
	MOVL	A14,*A7(CDDRIVEDIR)	;CDDRIVEMAG TOO
	RETS


**
** ADDTIREVEC
**
** IN
**   A2 SC
**   A7 CD
**  A10 DIR (UNSCRATCHED)
**  A11 MAG (UNSCRATCHED)
**
** JFL 23 DEC 92
**
ADDTIREVEC
	MMTM	SP,A10,A11
	CALLR	VECTORTOVELS ;IN:A10,A11 DIR,MAG OUT:A10,A11 X,Z 
	MOVW	*A7(CDTOTX),A14
	ADD	A10,A14
	MOVW	A14,*A7(CDTOTX)
	MOVW	*A7(CDTOTZ),A14
	ADD	A11,A14
	MOVW	A14,*A7(CDTOTZ)
	MMFM	SP,A10,A11
	RETS

**
** VECTORTOVELS
**
** NOTE: A2 ASSUMED NOT BROKEN IN THIS ROUTINE
**
** IN
**  A10 DIR UHB (SIGN IS LOPPED OFF)
**  A11 VEL SHW
** OUT
**  A10 XVEL SHL
**  A11 ZVEL SHL
**
** JFL 24 JUL 92
** JFL 11 AUG 92
**
VECTORTOVELS
	MMTM	SP,A1
		  
	;LOP AWAY
	SLL	24,A10
	SRL	24,A10

	.IF DEBUG
	CMPI	32767,A11
	TLOCKON	GT
	CMPI	-32768,A11
	TLOCKON	LT
	.ENDIF ;DEBUG

	; SIN & COS FOR THIS DIRECTION
	SLL	DIRLSINCOS,A10	
	ADDI	SINCOS,A10
	MOVL	*A10,A10			;COS:SIN

	; BREAK SPEED INTO Z VECTOR SPEED
	MOVE	A10,A14
	MOVE	A11,A1
	SRA	16,A14 				;COS
	MPYS	A14,A1
   	TLOCKON	V

	; BREAK SPEED INTO X VECTOR SPEED
	SEXT	A10,W				;SIN
	MPYS	A10,A11
	TLOCKON	V

	MOVE	A1,A10
	
	SRA	TRIGSHIFT,A10
	SRA	TRIGSHIFT,A11
	NEG	A11				;NEG IS INTO SCREEN

	MMFM	SP,A1
	RETS


***
*** ----------------------------------------------------------------------
***

**
** KILLCAR
**
**  A0 CAR OBJ
**  A2-A3 SCRATCH
**
** JFL 03 SEP 92
** JFL 25 SEP 92; NEW SCRATCH
** JFL 29 SEP 92; NEW SCRATCH
** JFL 05 OCT 92; M_CDFDEAD
** JFL 13 OCT 92; VEC
** JFL 27 OCT 92; COUNT CARS ALIVE
** JFL 02 NOV 92; KILL DEAD CPU CARS
** JFL 06 NOV 92
** JFL 18 JAN 93; OXYZVEL ZEROED
** JFL 25 JAN 93
** JFL 27 JAN 93; USE CDDAMAGE FOR DEATH FLAG
** JFL 04 FEB 93
**
KILLCAR
	MMTM	SP,A1,A7,A9

	MOVL	*A0(OCAR),A7

	;
	;SET DEAD FLAG
	;

	;
	;ZERO DAMAGE BAR
	;

	;SET DAMAGE BAR
	MOVW	*A7(CDDAMAGE),A3
	JRZ	KCX			;CAR ALREADY DEAD
	CLR	A3
	MOVW	A3,*A7(CDDAMAGE)
	MOVE	A0,A2
	CALLA	SCORESETDAMAGE ;IN: A2,A3 OBJ,DAMAGE

	;
	;DEATH EXPLOSION SOUND
	;

	;FLYING OUT OF CAR SOUND
	MOVW	*A7(CDDRIVERID),A14
	ADDI	SNDDEATHDRONE,A14
	CALLA	MAKESND ;IN:A14 SNDID

	;
	;ONE LESS PLAYER OR DRONE
	;

	;ONE LESS PLAYER ALIVE
	MOVI	DRG,A2
	MOVW	*A0(OID),A14
	ANDI	MASK_PLAYER,A14
	JRZ	KCONELESSDRONE

	;ONE LESS PLAYER ALIVE
	MOVW	*A2(DRGALIVEPLAYERS),A14
	DEC	A14
	MOVW	A14,*A2(DRGALIVEPLAYERS)
	JRUC	KCONELESSCAR

KCONELESSDRONE
	;ONE LESS DRONE ALIVE
	MOVW	*A2(DRGALIVEDRONES),A14
	DEC	A14
	MOVW	A14,*A2(DRGALIVEDRONES)
KCONELESSCAR

	;
	;ROADKILL SPEECH
	;

	;SPAWN ROADKILLED SOUND FOR LATER
	MOVE	A0,A2			;SAVE
	MOVE	A7,A3			;SAVE
	
	MOVW	*A0(OID),A9
	SLL	SL_POID,A9
	SRL	SR_POID,A9
	CREATE	PID_DRAGONE,AFTERCARDIES
	MOVI	60*3,A14     		;SLEEP TIME
	MOVW	A14,*A0(PTIME)

	MOVE	A2,A0			;RESTORE
	MOVE	A3,A7			;RESTORE

	;
	;DESTROY THE OBJ
	;

	;KILL THE OBJ
	MMTM	SP,A8
	MOVE	A0,A8
	MOVL	*A7(CDPARTANIMTBL),A2
	JRZ	KCCHANGE
	MOVL	*A2(PATDEATH),A2
KCCHANGE
	CLR	A14
	MOVL	A14,*A8(OXVEL)
	MOVL	A14,*A8(OYVEL)
	MOVL	A14,*A8(OZVEL)

	CALLA	CHANGEOBJTOANIM ;IN:A2,A8 ANIMSCRIPT,OBJ
	MMFM	SP,A8
	CLR	A0		;NO MORE CAR

	MOVW	@SUPLCARCOUNT,A14
	DEC	A14
	MOVW	A14,@SUPLCARCOUNT

KCMAYBELAST

	;
	;CHECK IF ITS THE LAST CAR
	;

	;ONE LESS CAR ALIVE
	MOVI	DRG,A2
	MOVW	*A2(DRGALIVE),A14
	DEC	A14
	MOVW	A14,*A2(DRGALIVE)
	CMPI	1,A14
	JRGT	KCNOTLAST

	;FIGURE WINNER
	CALLR	LASTCARALIVEWINS

KCNOTLAST

KCX
	MOVE	A0,A0		;DOES CAR EXIST OR NOT...
	MMFM	SP,A1,A7,A9
	RETS

**
** AFTERCARDIES -- PROC
**
** IN
**   A9 OID OF CAR THAT DIED
**
** JFL 22 NOV 92
**
AFTERCARDIES
	ADDI	SNDROADKILL1-1,A9
	MOVE	A9,A14
	CALLA	MAKESND ;IN:A14 SNDID
	DIE

**
** LASTCARALIVEWINS
** FIND LAST CAR ALIVE AND MAKE IT THE WINNER
**
** JFL 27 OCT 92 
**
LASTCARALIVEWINS
	MOVL	@SUPPLSTS+SUPL_CAR,A2
	JRZ	LCAWX

LCAWLOOP
	;CHECK IF THIS IS DEAD
	MOVL	*A2(OCAR),A3
	MOVW	*A3(CDDAMAGE),A14
	JRNZ	LCAWINNER

LCAWNEXT
	;CHECK NEXT CAR
	MOVL	*A2(OSLINK),A2
	JRNZ	LCAWLOOP
	TLOCKUP ;NO CARS ALIVE!!!

LCAWINNER
	MOVL	A2,@WINNER
LCAWX
	RETS

***
*** ------------------------------- INPUT SUBROUTINES ---------------------
***

**
** CHANGECARSPEED
**
** IN
**   A0	OBJ
**   A2 AMOUNT TO SLOWDOWN
**   A7 CD
**
** JFL 23 OCT 92
** JFL 23 DEC 92
**
CHANGECARSPEED
	MOVW	*A7(CDDRIVEMAG),A3		;V
	MOVE	A3,A14
	NEG	A2
	SRL	A2,A14
	MOVE	A3,A3
	JRN	CCSNEG

	;CAR IS MOVING FWD
	SUB	A14,A3
	JRNN	CCSOK
	CLR	A3
	JRUC	CCSOK
CCSNEG
	ADD	A14,A3
	JRN	CCSOK
	CLR	A3

CCSOK
	MOVW	A3,*A7(CDDRIVEMAG)		;V
	RETS


**
** SETCARDIR
**
** IN
**   A0 OBJ
**   A2 SCRATCH
**   A7 CD
**  A10 DIR
**
** JFL 21 OCT 92
** JFL 27 OCT 92; SIMPLIFIED
** JFL 23 DEC 92; CDSETDIR
**
SETCARDIR
	INC	A10
	MOVW	A10,*A7(CDSETDIR)
	DEC	A10
	RETS

**
** ALTINPHANDLER
**
** REPLACE CURRENT INP HANDLER
**
**  A1 NEW INP HANDLER
**  A2 CDFLAGS
**  A3 CD
**
** JFL 24 JUL 92
** JFL 25 JUL 92; NEW SCRATCH
**
ALTINPHANDLER
	ORI	M_CDFALTINP,A2
	MOVW	A2,*A3(CDFLAGS)
	MOVL	A1,*A3(CDINPHANDLER)
	RETS

**
** NORMINPHANDLER
** REVERT BACK TO NORMAL INPUT HANDLER
**
** IN
**  A7 CAR DATA
**  A8 CAR OBJ
**
** JFL 24 JUL 92
** JFL 25 SEP 92; NEW SCRATCH
** JFL 28 SEP 92; NEW SCRATCH
** JFL 07 OCT 92; NEED OBJ PASSED IN
** JFL 13 OCT 92; VEC
**
NORMINPHANDLER
	MOVL	*A7(CDINPNORM),*A7(CDINPHANDLER)

	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A7(CDFLAGS+B_CDFALTINP),0
	SETF	16,1,0

	CALLA	ENDMOVE	;IN:A7,A8 CD,OBJ

	RETS


**
** CARINPSTEERING
**
** IN
**   A0 INPUT DATA BLOCK
**   A1-A3 SCRATCH
**   A7 CD
** OUT
**  A10 DIR
**
** JFL 28 SEP 92
** JFL 13 OCT 92; VEC
** JFL 03 DEC 92; REDONE W/STEERTBL
** JFL 23 DEC 92; CDSETDIR
**
CARINPSTEERING
	;DO WE NEED TO SET DIR
	MOVW	*A7(CDSETDIR),A14
	JRZ	CISNOSET

	;SET THE DIR
	DEC	A14
	MOVW	A14,*A7(CDWHEELOFFSET)		;SET DIR
	CLR	A10
	MOVW	A10,*A7(CDWHEELDIR)		;RESET ACCUMULATED AMOUNT
	MOVW	A10,*A7(CDSETDIR)		;CLEAR FLAG
	JRUC	CISX

CISNOSET
	;WHEEL RESPONSE
	MOVL	*A7(CDFEEL),A1
	MOVW	*A1(FWHEELRESPONSE),A3

	;GET STEERING WHEEL -- PLAY WITH RESPONSE
	MOVW	*A0(INPWHEELMAG),A2		;MAGNITUDE
	JRZ	CISGOTMAG
	JRN	CISWRNEG

	;ADD IN STEERING RESPONSE
	ADD	A3,A2
	JRUC	CISGOTMAG

CISWRNEG
	;ADD IN STEERING RESPONSE
	SUB	A3,A2
	
CISGOTMAG
	;ACCUMULATE MAG TO GET DIR
	MOVW	*A7(CDWHEELDIR),A10		;CUMULATIVE DIRECTION
	ADD	A2,A10
	
	;HANDLE SLIP
	MOVI	ARENASLIP,B8
	EXGPC	B8 ;IN:A0,A1,A2,A3,A7,A8,A10 INP,FEEL,MAG,SC,CD,OBJ,NEWDIR

	;SET WHEEL DIR & CLEAN OUT
	MOVW	A10,*A7(CDWHEELDIR)
	SLL	STEERDIRRESPONSE,A10
	SRL	STEERDIR+STEERCLEAN,A10		;NOT ALL DEGRESS OF FREEDOM
	SLL	STEERCLEAN,A10

CISX
	RETS

**
** CARINPTIMEOUT
**
** IN
**   A7 CD
**   A8 OBJ
** 
** JFL 28 SEP 92
** JFL 07 OCT 92
**	
CARINPTIMEOUT

	;SEE IF WE HAVE TIMED OUT
	MOVW	*A7(CDALTTIME),A14
	JRZ	CITOX			;FOREVER
	DEC	A14
	MOVW	A14,*A7(CDALTTIME)
	JRP	CITOX
	CALLR	NORMINPHANDLER ;IN A7,A8 CD,OBJ
	CALLA	CCABORT ;IN:A8,A8 CD,OBJ
CITOX
	RETS

**
** SPINCARINPSUB
**
** IN
**  A7 CD
**
** JFL 18 AUG 92
** JFL 25 SEP 92
** JFL 15 NOV 92; COMBINED SPIN & DECAY
** JFL 16 NOV 92; FRACTIONAL SPIN/DECAY
**
SPINCARINPSUB
	MOVW	*A7(CDSPIN),A14
	JRZ	SCISX
	MOVE	A14,A3

	;ADJUST FOR SPIN
	MOVB	*A7(CDWHEELOFFSET),A2
	SRA	SPINFRACSHIFT,A14
	ADD	A14,A2
	MOVW	A2,*A7(CDWHEELOFFSET)

	;DECAY THE SPIN
	MOVW	*A7(CDSPINDROP),A2
	MOVE	A3,A3
	JRN	SCISDROPNEG
	SUB	A2,A3
	JRP	SCISSTORE	
SCISCLR
	CLR	A3
	JRUC	SCISSTORE

SCISDROPNEG
	ADD	A2,A3
	JRP	SCISCLR	

SCISSTORE
	MOVW	A3,*A7(CDSPIN)

SCISX
	RETS

**
** CAR INPUT HANDLERS ---------------------------------------------------
**

**
** PLAYERCARINP
** NORMAL INP HANDLER -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 24 JUL 92
** JFL 11 AUG 92
** JFL 13 AUG 92
** JFL 25 SEP 92; NEW SCRATCH
** JFL 28 SEP 92; NEW SCRATCH
**
PLAYERCARINP
	CALLR	SPINCARINPSUB ;IN: A7 CD

	;USE INPUT BLOCK FOR THIS PLAYER
	MOVL	*A7(CDINPDATA),A0 	;INPUT DATA
	CALLR	CARINPSTEERING ;IN: A0,A1,A2,A7 INPDATA,SC,SC,CD OUT:A10 DIR

	;GET PEDAL
	MOVW	*A0(INPPEDAL),A11
	
	.IF SHOWSTATES
	MOVW	*A0(INPB1),A2
	SLL	24,A2
	SRL	24+1,A2
	MOVW	*A7(CDB1),A14
	CMP	A14,A2
	JREQ	PCISKIPSS1
	MOVW	A2,*A7(CDB1)
	MOVW	*A8(OSTATE),A14
	DEC	A14
	MOVW	A14,*A8(OSTATE)
	JRP	PCISKIPSS1
	CLR	A14
	MOVW	A14,*A8(OSTATE)
PCISKIPSS1
	MOVW	*A0(INPB2),A2
	SLL	24,A2
	SRL	24+1,A2
	MOVW	*A7(CDB2),A14
	CMP	A14,A2
	JREQ	PCISKIPSS2
	MOVW	A2,*A7(CDB2)
	MOVW	*A8(OSTATE),A14
	INC	A14
	MOVW	A14,*A8(OSTATE)
	CMPI	STATE_LAST,A14
	JRLE	PCISKIPSS2
	MOVI	STATE_LAST,A14
	MOVW	A14,*A8(OSTATE)
PCISKIPSS2
	.ENDIF ;SHOWSTATES

	JRUC	CARINPPEDSUB


**
** CRAZYCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 24 JUL 92
** JFL 07 AUG 92
** JFL 03 SEP 92; ALTTIME ZERO CASE
**
CRAZYCARINP
	MOVW	@WAVEIRQS,A14
	SLL	29,A14
	SRL	29-5,A14
	ADDI	CRAZYCARINPTBL,A14
	.IF DEBUG
	CMPI	CRAZYCARINPTBLX,A14
	TLOCKON	HS
	.ENDIF ;DEBUG
	MOVL	*A14,A14
	JUMP	A14

CRAZYCARINPTBL
	.LONG	NOCONTROLCARINP
	.LONG	STEERONLYCARINP
	.LONG	PEDALONLYCARINP
	.LONG	NOCONTROLCARINP
	.LONG	NOCONTROLCARINP
	.LONG	NOCONTROLCARINP
	.LONG	NOCONTROLCARINP
	.LONG	NOCONTROLCARINP
CRAZYCARINPTBLX

**
** DEADCARINP
** NOCONTROLCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 24 JUL 92
** JFL 07 AUG 92
** JFL 03 SEP 92; ALTTIME ZERO CASE
**
DEADCARINP
NOCONTROLCARINP
	;LOCK POSITION
	MOVB	*A7(CDLASTDIR),A10
	MOVB	*A7(CDWHEELOFFSET),A14
	SUB	A14,A10

	;SPIN -- CALL AFTER LOCK AND ALLOW SPIN TO AFFECT DIR
	CALLR	SPINCARINPSUB ;IN: A7 CD
     	
	;NO VEL
	CLR	A11		   

	CALLR	CARINPTIMEOUT ;IN: A7,A8 CD,OBJ

	JRUC	CARINPPEDSUB	

**
** JUMPCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 17 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
**
JUMPCARINP

	CALLR	SPINCARINPSUB ;IN: A7 CD

	;USE INPUT BLOCK FOR THIS PLAYER
	MOVL	*A7(CDINPDATA),A0		;INPUT DATA
	CALLR	CARINPSTEERING ;IN: A0,A1,A2,A7 INPDATA,SC,SC,CD OUT:A10 DIR

	;MAINTAIN VEL
	MOVW	*A0(INPPEDAL),A11

	CALLR	CARINPTIMEOUT ;IN: A7,A8 CD,OBJ
	JRUC	CARINPFIXVELSUB	

**
** STEERONLYCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 17 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
** JFL 20 OCT 92
**
STEERONLYCARINP

	CALLR	SPINCARINPSUB ;IN: A7 CD

	;USE INPUT BLOCK FOR THIS PLAYER
	MOVL	*A7(CDINPDATA),A0		;INPUT DATA
	CALLR	CARINPSTEERING ;IN: A0,A1,A2,A7 INPDATA,SC,SC,CD OUT:A10 DIR

	;MAINTAIN VEL
	MOVW	*A7(CDPEDAL),A11
	ABS	A11

	CALLR	CARINPTIMEOUT ;IN: A7,A8 CD,OBJ
	JRUC	CARINPFIXVELSUB	


**
** PEDALONLYCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 17 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
** JFL 20 OCT 92
**
PEDALONLYCARINP

	CALLR	SPINCARINPSUB ;IN: A7 CD

	;LOCK POSITION
	MOVB	*A7(CDLASTDIR),A10
	MOVB	*A7(CDWHEELOFFSET),A14
	SUB	A14,A10

	;MAINTAIN VEL
	MOVL	*A7(CDINPDATA),A0		;INPUT DATA
	MOVW	*A0(INPPEDAL),A11

	CALLR	CARINPTIMEOUT ;IN: A7,A8 CD,OBJ
	JRUC	CARINPFIXVELSUB	

**
** DEMONCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 24 JUL 92
** JFL 07 AUG 92
** JFL 03 SEP 92; ALTTIME ZERO CASE
** JFL 17 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
**
DEMONCARINP
	CALLR	SPINCARINPSUB ;IN: A7 CD

	;USE INPUT BLOCK FOR THIS PLAYER
	MOVL	*A7(CDINPDATA),A0 	;INPUT DATA
	CALLR	CARINPSTEERING ;IN: A0,A1,A2,A7 INPDATA,SC,SC,CD OUT:A10 DIR

	;GET PEDAL
	;MOVW	*A0(INPPEDAL),A11
	CLR	A11

	CALLR	CARINPTIMEOUT ;IN: A7,A8 CD,OBJ
	JRUC	CARINPPEDSUB	



***
*** CAR INPUT SUBS -------------------------------------------------------
***

**
** CARINPPEDSUB
** 
** IN
**   A7 CD
**   A8 CAR
**  A10 DIR
**  A11 VEL
**
** JFL 16 AUG 92
** JFL 10 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
** JFL 04 DEC 92
** JFL 22 DEC 92; TURBOBOOST
**
CARINPPEDSUB
	;ADD IN TURBO
	MOVW	*A7(CDTURBOBOOST),A14
	ADD	A14,A11

	;IF PEDAL IS NOT DOWN VERY FAR TREAT IT LIKE A BRAKE
	SUBK	PEDALBRAKE,A11
	JRP	CIPSNOTBRAKING
	CLR	A11		;BRAKING
	JRUC	CIPSX

CIPSNOTBRAKING

	;HANDLE REVERSE/FORWARD
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	CIPSX
	NEG	A11		;REVERSE
CIPSX
	JRUC	CARINPSUB	

**
** CARINPFIXVELSUB
** 
** IN
**  A7 CD
**  A8 CAR OBJ
** A10 DIR
** A11 VEL
**
** JFL 16 AUG 92
** JFL 10 SEP 92
** JFL 11 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
**
CARINPFIXVELSUB

	;HANDLE REVERSE/FORWARD
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	CIFVOK
	NEG	A11			;REV
CIFVOK
	JRUC	CARINPSUB	

**
** CARINPSUB
** SUBROUTINE -- ASSUMES PROPER SETUP
**
** IN
**   A7 CD
**   A8 CAR
**  A10 DESIRED DIR
**  A11 PEDAL 0==BRAKES,1..127 FWD VEL,-1..-127 REV VEL
**
** RETURNS
** A10 DIR
** A11 VEL INT16
**
** JFL 29 JUL 92
** JFL 11 AUG 92
** JFL 13 AUG 92; REDONE
** JFL 14 AUG 92; V = V + (PED*Pk - V)*ACCk
** JFL 21 AUG 92; REVERSE PEEL-OUT SND, REV CRASH SND FIX
** JFL 23 SEP 92; SPEED ADJ FOR TILT
** JFL 28 SEP 92; NEW SCRATCH
** JFL 07 OCT 92
** JFL 13 OCT 92; VEC
**
CARINPSUB
	;  A0 HANDLING DATA
	;  A1
	;  A2 SCRATCH
	;  A3 SCRATCH
	;  A4 LAST VEL
	;  A5 LAST PED
	;  A6 CDFLAGS
	;  A7 CD
	;  A8 OBJ
	;  A9
	; A10 DIR
	; A11 VEL (PED)

	MOVW	@HOLDGAME,A14
	JRZ	CISNHOLD
	CLR	A11
CISNHOLD

	MOVW	*A7(CDFLAGS),A6
	MOVL	*A7(CDFEEL),A0

	;OFFSET USER DESIRED (OR CURRENT WHEEL) DIRECTION
	MOVB	*A7(CDWHEELOFFSET),A14
	ADD	A14,A10
	CALLR	ROUNDDIR ;IN: A10

   	;GET OLD VEL, OLD PEDAL, STORE NEW PEDAL
	MOVW	*A7(CDDRIVEMAG),A4	;V
	MOVW	*A7(CDPEDAL),A5
	MOVW	A11,*A7(CDPEDAL)

	;CHECK FOR BRAKES
	MOVE	A11,A11
	JRNE	CISACCDOWN
	
	;BRAKES ON
	MOVE	A5,A5
	JRZ	CISBNOTFIRST		;BRAKES HAVE BEEN ON

	;DONT SCREETCH WHEN STOPPING FROM GEAR ZERO
	MOVW	*A7(CDGEAR),A14
	JRZ	CISBNOTFIRST		;IN GEAR ZERO, DONT SCREETCH

	MOVW	*A7(CDINPNUM),A14
	ADDI	SNDBRAKE1,A14
	CALLA	ARENASND ;IN:A14 SNDID

CISBNOTFIRST

	;BUMP UP PEDAL-NOT-PUSHED COUNT
	MOVW	*A7(CDNOPEDAL),A14
	INC	A14
	MOVW	A14,*A7(CDNOPEDAL)

	;APPLY BRAKES
	MOVE	A4,A14		       	;SLOW DOWN BY 1/8 VEL
	SRA	3,A14
	JRZ	CISBSTOP
	INC	A14			;CHECK FOR NEG STOP
	JRZ	CISBSTOP
	DEC	A14			;UNDO CHECK (MAYNOTBENECESSARY)
	SUB	A14,A4
	JRUC	CISVOK
CISBSTOP
	CLR	A4
	MOVW	A4,*A7(CDGEAR)			;RESET GEAR
	JRUC	CISVOK
	
CISACCDOWN
	;CHECK FROM LAST TIME THROUGH -- USER CANT PRESS PEDAL FAST ENOUGH
	BTST	B_CDFCHECKPEEL,A6
	JRZ	CISADNCP
	
	;IF AT ANY TIME WHILE IN GEAR ZERO, PEDAL IS PRESSED REALLY FAR...
	MOVW	*A7(CDGEAR),A14
	JRZ	CISCHKPEEL
	ANDNI	M_CDFCHECKPEEL,A6
	MOVW	A6,*A7(CDFLAGS)
  	JRUC	CISADNCP

CISCHKPEEL
	;CHECK FOR CHANGE REQUIRED
	MOVE	A11,A14
	ABS	A14
	CMPI	PEDALPEEL,A14
	JRLT	CISADNCP
	
	MOVE	A11,A3
	CALLA	DOPEELOUT ;IN: A1,A2,A3,A8 SC,SC,VEL,OBJ
	
CISADNCP
	;IF PLAYER IS LAZY, SET THE CHECK PEEL FLAG
	MOVE	A5,A5				;A5 IS LAST PEDAL VALUE
	JRNZ	CISADAGAIN
	MOVW	*A7(CDNOPEDAL),A14
	SRL	4,A14				;LAZY FOR OVER 32 FRAMES?
	JRZ	CISADNOPEEL
	ORI	M_CDFCHECKPEEL,A6		;YES, SET CHECK PEEL FLAG
	MOVW	A6,*A7(CDFLAGS)

CISADNOPEEL
	MOVW	A5,*A7(CDNOPEDAL)		;RESET LAZY-PLAYER THING
CISADAGAIN
	CMPXY	A11,A4				;CHECK SIGNS OF ACC & VEL
	JRYEQ	CISNOTREV
	MOVE	A4,A4				;LEAVE ALONE IF STOPPED
	JRZ	CISNOTREV

	;WANT TO GO IN OPPOSITE DIR, DO STOP-AND-REVERSE MODE THING
	BTST	B_CDFSTOPREV,A6			;ALREADY IN REV MODE?
	JRNZ	CISREV
	
	;BEGIN STOP-AND-REVERSE MODE
	ORI	M_CDFSTOPREV,A6
	MOVW	A6,*A7(CDFLAGS)
	
	MOVW	*A7(CDGEAR),A14
	JRZ	CISRNOTFIRST		;IN GEAR ZERO, DONT SCREETCH

	;STOP & REVERSE
	MOVW	*A7(CDINPNUM),A14
	ADDI	SNDBRAKE1,A14
	CALLA	ARENASND ;IN:A14 SNDID

CISRNOTFIRST

CISREV
	;SLOW CAR DOWN >>FAST<<
	MOVE	A4,A14				;SLOW DOWN BY 1/4 OF CUR VEL
	SRA	2,A14				;SLOW TWICE AS FAST AS BRAKES
	JRZ	CISRSTOP
	SUB	A14,A4
	JRNZ	CISVOK
CISRSTOP
	CLR	A4			   	;ZERO PEDAL VEL

	;STOPPED, END STOP-AND-REVERSE MODE
	ANDNI	M_CDFSTOPREV,A6
	MOVW	A6,*A7(CDFLAGS)
	JRUC	CISFINDGEAR
	
CISNOTREV
	;CHECK ON REVERSING-A-REVERSE BEFORE STOPPED
	BTST	B_CDFSTOPREV,A6
	JRZ	CISFINDGEAR

	;REVERSED A REVERSE BEFORE CAR WAS FULLY STOPPED
	ANDNI	M_CDFSTOPREV,A6		;CLR STOP IN PROGRESS FLAG
	MOVW	A6,*A7(CDFLAGS)

CISFINDGEAR
	;FIGURE GEAR
	ABS	A4				;FWD GEARS == REV GEARS
	MOVW	*A7(CDGEAR),A5			;A5 TMP GEAR NUM
CISFGEAR
	MOVE	A5,A3				;TMP GEAR NUM
	SLL	FGEARSIZESHIFT,A3
	ADD	A0,A3
	MOVW	*A3(FGEARMAXVEL),A14
	CMP	A14,A4
	JRGT	CISFGUP

	MOVE	A5,A14				;IF GEAR IS ZERO, USE IT
	JRZ	CISFGDONE

	MOVW	*A3(FGEARMAXVEL-FGEARSIZE),A14	;CHECK ONE GEAR DOWN
	CMP	A14,A4
	JRGT	CISFGDONE

CISFGDWN
	;TRY NEXT GEAR DOWN
	DEC	A5
	MOVW	A5,*A7(CDGEAR)
	.IF DEBUG
	TLOCKON	N	;SET UP GEARS SO THIS DOESNT HAPPEN
	.ENDIF ;DEBUG
	JRUC	CISFGEAR

CISFGUP
	;TRY NEXT GEAR UP
	INC	A5
	MOVW	A5,*A7(CDGEAR)
	.IF DEBUG
	CMPI	FGEARNUM,A5
	TLOCKON	GE	;SET UP GEARS SO THIS DOESNT HAPPEN
	.ENDIF ;DEBUG
	JRUC	CISFGEAR

CISFGDONE	
	;IF TURBO, USE ONE GEAR DOWN FROM TOP (I.E. DOWNSHIFT)
	MOVW	*A7(CDTURBOBOOST),A14
	JRZ	CISFGNODOWNSHIFT

	;IF IN TOP GEAR, DOWN SHIFT ONE	FOR FASTER GEARING MULTIPLIER
	CMPI	FGEARNUM-1,A5
	JRLT	CISFGNODOWNSHIFT

	;DOWNSHIFT
	SUBI	FGEARSIZE,A3

CISFGNODOWNSHIFT
	;A3 GEAR DATA
	MOVB	*A3(FGEARPEDMULSL),A14	;PED MULTIPLIER
	SLL	24,A14			;DROP SIGN BITS
	SRL	24,A14
	SETF	8,1,1			;RESTORE
	MPYU	A14,A11			;PEDAL * PEDMUL
	SRA	PELMULFRACBITS,A11
	SETF	32,1,1			;RESTORE
	MOVW	*A7(CDDRIVEMAG),A4	;V
	SUB	A4,A11			;(PEDAL * PEDMUL) - V
	MOVB	*A3(FGEARACCMULSL),A14	;ACC MULTIPLIER
	JRNN	CISAMNN
	SRA	A14,A11			;((PEDAL*PEDMUL)-V)/ACCMUL
	JRNZ	CISAMADD		;GUARD AGAINST FRACTIONS TURNING TO 0
	INC	A11			;NEG VALUES NEVER SRA TO 0
	JRUC	CISAMADD
	
CISAMNN
	SLL	A14,A11			;((PEDAL*PEDMUL)-V)*ACCMUL
CISAMADD
	ADD	A4,A11			;V+(((PEDAL*PEDMUL)-V)*ACCMUL)

	;MAKE SURE NEW SPEED IS IN RANGE
	JRN	CISCKMIN		;CHECK MIN & MAX SPEEDS
	MOVW	*A0(FVELMAXPOS),A14
	CMP	A14,A11
	JRLE	CISVUSE
	MOVE	A14,A11
	JRUC	CISVUSE
CISCKMIN
	MOVW	*A0(FVELMAXNEG),A14
	CMP	A14,A11
	JRGE	CISVUSE
	MOVE	A14,A11
CISVUSE
	MOVE	A11,A4
	
CISVOK	; ......JUMPED INTO FROM WAAAY UP TOO
	MOVE	A4,A11

CISVDONE
	RETS

SLIPTAILVEL	EQU	380H

**
** DECAYSLIP
**
** IN
**   A0 OBJ
**   A1-A4 SC
**   A7 CD
**
** JFL 23 DEC 92
** JFL 14 JAN 93; SPIT DIRT ON SLIP
**
DECAYSLIP
	MOVW	*A7(CDSLIPFACTOR),A3
	JRZ	DSX
	
	MOVW	*A7(CDSLIPFDECAY),A2
	SUB	A2,A3
	JRP	DSSLIPPING
	
	;NO MORE SLIPPING
	CLR	A3
	MOVW	A3,*A7(CDSLIPFACTOR)
	MOVW	A3,*A7(CDSLIPPART)
DSX
	RETS

DSSLIPPING
	;SAVE FACTOR
	MOVW	A3,*A7(CDSLIPFACTOR)
	MOVW	*A7(CDTOTMAG),A14
	CMPI	SLIPTAILVEL,A14
	JRLE	DSX
	MOVL	*A0(OYACC),A14		;NOT IF IN AIR
	JRNZ	DSX
	MOVW	*A7(CDSLIPPART),A4
	JRZ	DSX

	;GENERATE EVERY 4TH FRAME
	MOVW	@WAVEIRQS,A14
	SLL	30,A14
	JRNZ	DSX

	.IF 0
*****
	;
	;FIND TIRE TO ATTACH GRAPHIC TO
	;
	MOVK	1,A1				;ON BACK LEFT
	MOVB	*A8(ODIR),A3
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	ASNREV
	MOVK	3,A1				;ON FRONT RIGHT
ASNREV
	;ATTACH DIR TO OUTSIDE WHEEL SO DIRT LEADS SPIN
	;I.E. BACK TIRES WITH SPIN CLOCKWISE, DIRT GETS ON BACK LEFT
	;FRONT TIRES WITH SPIN CLOCKWISE, DIRT GETS ON FRONT RIGHT
	MOVE	A2,A2				;FIND DIR OF WHEEL SPIN
	JRN	ASCLOCKWISE
	XORI	3,A1				;MOVE TO OTHER SIDE				
ASCLOCKWISE

*****
	.ENDIF ;0

	;ADD SLIP GRAPHIC
	MOVK	1,A1				;ON BACK LEFT
	MOVB	*A0(ODIR),A2
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	DSNN
	ADDI	DIR180,A2
	MOVK	3,A1				;ON FRONT RIGHT
DSNN

	;ATTACH DIR TO OUTSIDE WHEEL SO DIRT LEADS SPIN
	;I.E. BACK TIRES WITH SPIN CLOCKWISE, DIRT GETS ON BACK LEFT
	;FRONT TIRES WITH SPIN CLOCKWISE, DIRT GETS ON FRONT RIGHT
	MOVL	*A7(CDINPDATA),A14
	MOVW	*A14(INPWHEELMAG),A14
	JRN	DSCLOCKWISE
	XORI	3,A1				;MOVE TO OTHER SIDE				
DSCLOCKWISE
	ADD	A1,A4				;PART ID

	;TURN DIR INTO INDEX INTO TBL & FETCH ANIMSCRIPT
	SLL	24,A2
	SRL	24+4,A2
	SLL	5,A2			;SIZEOF TBL	
	ADDI	DIRANIMDIRT,A2
	MOVL	*A2,A1			;GET ANIMSCRIPT+FLAGS
	MOVE	A4,A2
	CALLR	ADDNSPART ;IN:A0,A1,A2 OBJ,ANIM,PARTID OUT:A2 OBJ

	JRUC	DSX	

**
** MAINCARPROC -- PROCESS
** JFL 13 JUL 92; STOLEN FROM DREDD
** JFL 24 JUL 92
** JFL 24 SEP 92; TURNED INTO MAIN CAR PROCESS
** JFL 25 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
** JFL 13 OCT 92
** JFL 09 NOV 92
** JFL 23 DEC 92
** JFL 15 JAN 93; DRONES
** JFL 19 JAN 93; FRACTIONAL TURBO
**
MAINCARPROC
	;CLEAR HIT FLAGS & REORDER CAR SUPL IF NECESSARY
	CALLA	AFTERHITTEST

	;TIME DOWN CARS WHO HIT EACHOTHER RECORDS
	CALLA	BEFOREHITTEST

	MOVL	@SUPPLSTS+SUPL_CAR,A8
	JRZ	MCPX
MCPLOOP
	;LOAD UP
	MOVL	*A8(OCAR),A7

	;CLEAR TOTAL VECTOR STUFF
	CLR	A14
	MOVL	A14,*A7(CDTOTX)		;CLEAR CDTOTZ TOO

	;SKIP STUFF IF CAR IS DEAD
	MOVW	*A7(CDDAMAGE),A14
	JRZ	MCPCARISDEAD

	MOVW	@HOLDGAME,A14
	JRNZ	MCPCARISDEAD

	.IF SHOWSTATES==0
	CALLR	SPECMOVE ;IN:A7,A8 CD,CAROBJ
	.ENDIF

MCPCARISDEAD
	CALLR	ANICAR ;IN: A8 CAR, OUT:ALL REASONABLE A'S SCRATCHED
	MOVE	A8,A0			;CHANGE HANDS

	;ADD IN DRIVE & SLIP VEL
	MOVW	*A7(CDDRIVEMAG),A3		;DRIVE
	MOVW	*A7(CDSLIPMAG),A5		;SLIP
	MOVW	*A7(CDSLIPFACTOR),A2
	SRL	SLIPFFRAC,A2
	SETF	10,1,1				;MUST BE > HIGHEST BIT MPYS
	MPYS	A2,A5				
	SRA	PERCENTSHIFT,A5			;SLIP CONTRIBUTION
	SUBI	PERCENT100,A2			;DRIVE+SLIP=100%
	NEG	A2
	MPYS	A2,A3
	SRA	PERCENTSHIFT,A3			;DRIVE CONTRIBUTION
	SETF	32,1,1

	;CONVERT DRIVE DIR&MAG TO XZ
	MOVW	*A7(CDDRIVEDIR),A10
	MOVE	A3,A11
	CALLR	VECTORTOVELS ;IN:A10,A11 DIR,MAG OUT:A10,A11 X,Z 
	MOVE	A10,A8		;SAVE
	MOVE	A11,A9		;SAVE
	
	;CONVERT SLIDE DIR&MAG TO XZ
	MOVW	*A7(CDSLIPDIR),A10
	MOVE	A5,A11
	CALLR	VECTORTOVELS ;IN:A10,A11 DIR,MAG OUT:A10,A11 X,Z 
	ADD	A10,A8
	ADD	A11,A9

	;GET TOTAL MISC
	;CALLR	TOTALMISCXZ ;IN A2-A6,A7 SC,CD
	;ADD	A10,A8
	;ADD	A11,A9

	;SAVE TOTAL TOTAL
	MOVW	A8,*A7(CDTOTX)
	MOVW	A9,*A7(CDTOTZ)

	;DECAY SLIP
	CALLR	DECAYSLIP ;IN A0,A1-A4,A7 OBJ,SC,CD

	CALLA	HITCARTOPO ;IN: A0,A7 CAR,CD
	CALLA	TOPOREACT ;IN: A0,A7 CAR,CD

	;FIND TOTAL VELS
	MOVW	*A7(CDTOTX),A10
	MOVW	*A7(CDTOTZ),A11
	MOVE	A10,A4
	MOVE	A11,A5
	SLL	VELSHIFT,A4
	SLL	VELSHIFT,A5
	MOVL	A4,*A0(OXVEL)
	MOVL	A5,*A0(OZVEL)

	;FIND DIR&MAG
	CALLR	COMPTODIRMAGVEC ;IN: A10,A11 X,Z OUT: A10,A11 DIR,MAG
	MOVW	A10,*A7(CDTOTDIR)
	MOVW	A11,*A7(CDTOTMAG)
	
	;
	;MOVE CAR
	;

	CALLA	VELADDCAR ;IN: A0 CAR BREAKS A1-A11,A14
	CALLA	HITTESTOBJS ;IN A0 CAR BREAKS A1-A11
	CALLR	HITTESTCARS ;IN A0 CAR OUT NZ IF HIT A CAR
	JRNZ	MCPUNDO

	MOVL	*A0(OCAR),A7

	;DO WE NEED TO UNDO THIS CARS MOVEMENT -- FROM TOPO OR OBJ
	MOVB	*A7(CDFLAGS+B_CDFUNDO-7),A14
	JRNN	MCPHITDONE
	
	;
	;UNDO MOVE
	;

MCPUNDO

	;UNDO
	CALLA	VELSUBCAR ;IN: A0 CAR (BREAKS ALL OTHER A)

	MOVL	*A0(OCAR),A7

	;CLEAR FLAG
	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A7(CDFLAGS+B_CDFUNDO),0
	SETF	16,1,0

	;ZERO TOTMAG
	CLR	A14
	MOVW	A14,*A7(CDTOTMAG)

MCPHITDONE
	MOVE	A0,A8			;RESTORE

	;GIVE DRONES A CHANCE TO THINK
	MOVB	*A7(CDFLAGS+B_CDFDRONE-7),A14
	JRNN	MCPNOTDRONE
       	CALLA	HANDLEDRONE ;IN:A7,A8 CD,OBJ

MCPNOTDRONE

	;
	;REGENERATION EVERY SO OFTEN
	;
	MOVW	@WAVEIRQS,A14
	SLL	32-3,A14		;EVERY 8TH FRAME
	JRNZ	MCPNOREGEN

	;REGENERATE TURBO
	MOVW	*A7(CDTURBOS),A4
	MOVE	A4,A2
	SRL	TURBOFRACSHIFT,A2
	MOVW	*A7(CDREGENERATE),A14
	ADD	A14,A4
	MOVE	A4,A14
	SRL	TURBOFRACSHIFT,A14
	CMP	A2,A14
	JRLS	MCPNOTWHOLE
	
	;CHECK IF WEVE MAXED OUT
	MOVK	TURBOSINGLEMAX,A3
	CMP	A3,A14
	JRHI	MCPMAXTURBO
	
	;DIDNT MAX OUT
	MOVE	A14,A3
	MOVE	A8,A2
	CALLA	SCORESETTURBO ;IN: A2,A3 OBJ,TURBOS
MCPNOTWHOLE
	MOVW	A4,*A7(CDTURBOS)
MCPMAXTURBO



	SRL	TURBOFRACSHIFT,A3
MCPNOREGEN

	;NEXT CAR

	MOVL	*A8(OSLINK),A8
	JRNZ	MCPLOOP

	.IF DEBUG
	CALLA	CKSUPLCAR
	.ENDIF ;DEBUG

MCPX
	SLEEP	1			;REST STOP

	MOVW	@PAUSE_GAME,A14
	JRNZ	MCPX

	JRUC	MAINCARPROC		;LOOP


**
** ANICAR
**
** IN
**   A7 CD
**   A8 OBJ
**
** JFL 13 JUL 92; STOLEN FROM DREDD
** JFL 17 JUL 92; MOTION IN Z
** JFL 21 JUL 92; CAR HANDLING STUFF STARTED
** JFL 23 JUL 92
** JFL 24 JUL 92
** JFL 31 JUL 92; MULTIPARTS
** JFL 11 AUG 92
** JFL 16 AUG 92; X FORCES
** JFL 24 SEP 92; TILT SPEED ADJ
** JFL 28 SEP 92; NEW SCRATCH
** JFL 07 OCT 92; ADDITIONAL VEL
** JFL 13 OCT 92; VEC
** JFL 19 OCT 92
** JFL 23 DEC 92
**
ANICAR
	MOVW	*A8(ODIR),*A7(CDLASTDIR)

	;CLEAR FLAGS THAT NEED IT
	MOVW	*A7(CDCOUNTEXT),A14
	JRNZ	ACSTILLEXT

	SETF	1,0,0
	MOVE	A14,*A7(CDFLAGS+B_CDFSTOPEXT),0
	SETF	16,1,0
ACSTILLEXT

	;HANDLE INPUT
	MOVL	*A7(CDINPHANDLER),A14
	CALL	A14 ;IN:A0,A7,A8 CD,OBJ OUT:A10,A11 DIR,VEL
	MOVE	A10,A2			;A1 USE DIR OF INP FOR IMAGE DIR

	;RECORD INP VECTOR
	MOVW	A10,*A7(CDDRIVEDIR)
	MOVW	A11,*A7(CDDRIVEMAG)

	;SET IMAGE FOR THIS DIRECTION
	;CHECK IF IMG HAS CHANGED (NEW DIR OR CHANGED PIECE)
	MOVW	A2,*A8(ODIR)		;A1 DIRECTION
	CALLR	CARILIST ;IN A2,A8 DIR,CAROBJ OUT: A1 IMGTBL
	MOVL	*A1+,A3			;PTR TO IMGLIST
	MOVW	*A1+,A2			;CTRL BITS
	ZEXT	A2,W
	MOVL	*A3,A10			;CHECK IF CHASSIS IMAGE CHANGED
	MOVL	*A8(OIMG),A14
	CMP	A10,A14
	JRNE	ACNEWIMG
	MOVW	*A8(OCTRL),A14
	CMPXY	A2,A14			;DONT COMPARE SIGN EXTENSION
	JRXEQ	ACSAMEIMG
ACNEWIMG
	;PUT THE PIECES FOR THIS DIR ON THE CAR
	CALLR	SETCARPARTS ;A0,A1,A4,A5,A8 SC,SC,SC,SC,OBJ
	CALLR	SETNONSTANDARDPARTS ;A0,A1,A8 SCRATCH,SCRATCH,OBJ
ACSAMEIMG
	;SET THE Z FOR THE PARTS
	CALLR	SETZCARPARTS ;IN: A0,A8 SCRATCH,CAR 

	RETS

**
** CARILIST
**
**  A2 DIR
**  A8 CAR OBJ
** OUT:
**  A1 IMAGE TABLE
**
** JFL 09 SEP 92
** JFL 29 DEC 92
**
CARILIST
	MOVL	*A8(OIMGTBL),A1		;A2 IMG TBL
	MOVW	*A8(OSTATE),A14
	SLL	5,A14			;SIZEOF IMGTBL ENTRY
	ADD	A14,A1
	MOVL	*A1,A1			;A2 IMG LIST FOR THIS STATE

	ADDI	DIR180/16,A2		;CHOSE IMAGE IN MIDDLE OF ARC
	SLL	24,A2			;CLEAN OFF SIGN SHIT
	SRL	24+DIRRIMAGE,A2		;CLEAN BOTTOM
	SLL	IMAGELOFFSET,A2		;IMGTBL ENTRY SIZE = 128BITS
	ADD	A2,A1

	RETS

**
** SETCARPARTS
**
**  MEANT TO BE CALLED AFTER CALL TO CARILIST
** IN
**  A0 SCRATCH
**  A1 PTR IMGTBL SHADOW
**  A2 DMACTRL
**  A3 PTR TO IMGLIST CHASIS
**  A4 SCRATCH
**  A5 SCRATCH
**  A8 OBJ
**
** JFL 03 AUG 92
** JFL 04 AUG 92
** JFL 07 AUG 92; TREAT HEAD (CHASIS) DIFFERENT
** JFL 09 SEP 92
** JFL 13 SEP 92; SCALE FIX
** JFL 28 SEP 92; NEW SCRATCH
** JFL 18 OCT 92; 1 PART CARS
** JFL 29 DEC 92
**
SETCARPARTS
	MOVE	A2,A4			;A4 CTRL
	MOVE	A3,A2			;A2 ILIST

	;
	;HANDLE SHADOW
	;
	MOVL	*A8(OSHADIMG),A0
	JRZ	SCPNOSHAD

	;UPDATE OBJECT IMG
	MOVE	A1,A3
	MOVL	*A3+,A1				;GET SHAD IMG
	JRNZ	SCPSHADOK
	JRUC	SCPNOSHAD
SCPSHADOK
	MOVW	*A3,A5				;GET FLIP & DMACNZ CTRL
	MOVW	*A1(ICTRL),A14			
	OR	A14,A5
  	MOVW	A5,*A0(OCTRL)
	MOVL	A1,*A0(OIMG)			;UPDATE IMAGE
	MOVL	*A1(ISIZE),A14			;Y:X SIZ
	MOVL	A14,*A0(OSIZE)
	MOVL	A14,*A0(OUSIZE)
	MOVL	*A1(IANIOFF),A14		;Y:X ANI
	MOVL	A14,*A0(OANIOFF)
	MOVL	A14,*A0(OUANIOFF)
 	MOVL	*A1(ISAG),*A0(OSAG)		;SAG

	CLR	A14
	MOVW	A14,*A0(OSCALEMUL)		;FORCE UPDATE

SCPNOSHAD
	
	;
	;CONTINUE WITH CAR PARTS
	;
       	MOVE	A8,A0
	MOVW	*A0(OPARTID),A3		;HEAD HAS NUM PARTS

SCPLOOP
	MOVL	*A2+,A1			;NEXT IMG IN TABLE
	MOVW	*A0(OPARTID),A14	;ONLY SET CAR PARTS
	CMP	A3,A14
	JRNE	SCPNEXT

	MOVW	*A0(OFLAGS),A5		;OFLAGS

	;HANDLE A NON DISPLAYABLE PART
	MOVE	A1,A1
	JRNZ	SCPREAL

	;DONT DISPLAY THE OBJ
	SETF	1,0,0
	MOVE	A1,*A0(OCTRL+B_INUSE),0
	SETF	16,1,0
	JRUC	SCPNPART

SCPREAL
	;UPDATE OBJECT IMG
	MOVL	A1,*A0(OIMG)			;UPDATE IMAGE
	MOVL	*A1(ISIZE),A14			;Y:X SIZ
	MOVL	A14,*A0(OSIZE)
	MOVL	A14,*A0(OUSIZE)
	MOVL	*A1(IANIOFF),A14		;Y:X ANI
	MOVL	A14,*A0(OANIOFF)
	MOVL	A14,*A0(OUANIOFF)
 	MOVL	*A1(ISAG),*A0(OSAG)		;SAG
  	MOVW	*A1(ICTRL),A14			;GET ICTRL
	OR	A4,A14				;OR IN OUR
  	MOVW	A14,*A0(OCTRL)

	CLR	A14
	MOVW	A14,*A0(OSCALEMUL)		;FORCE UPDATE

SCPNPART
	MOVW	A5,*A0(OFLAGS)
	MOVL	*A0(OPARTS),A0			;NEXT OBJ PART
	JRZ	SCPX	 			;NO MORE PARTS
SCPNEXT
	DEC	A3
	JRP	SCPLOOP
SCPX
	;GO BACK AND GIVE HEAD A SCALE
	CALLR	SETOBJSCALE ;IN: A8 OBJ

	RETS

**
** SETZCARPARTS
** THIS IS NECESSARY BECAUSE VELADD MAY MAX OUT PIECE COORDS TO THE
** SAME VALUES AS THE HEAD OBJ
**
**  A8 OBJ
** SCRATCHES A0
**
** JFL 14 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
** JFL 18 OCT 92; 1 PART CARS
**
SETZCARPARTS
       	MOVE	A8,A0
	MOVW	*A0(OPARTID),A3		;HEAD HAS NUM PARTS
	JRZ	SZCPX
	MOVL	*A0(OZVAL),A2
	INC	A2			;MAKE PARTS CLOSER
	JRUC	SZCPNPART		;SKIP HEAD

SZCPLOOP
	MOVW	*A0(OPARTID),A14	;ONLY SET CAR PARTS
	CMP	A3,A14
	JRNE	SZCPNEXT

	;CHANGE Z OF ALL PARTS
	MOVL	A2,*A0(OZVAL)

SZCPNPART
	MOVL	*A0(OPARTS),A0			;NEXT OBJ PART
	JRZ	SZCPX	 			;NO MORE PARTS
SZCPNEXT
	DSJ	A3,SZCPLOOP 			;CAR PARTS MUST BE FIRST PARTS
SZCPX
	RETS

**
** CHECKFORNSPART
** CHECK ALL PARTS FOR THE ID
**
**  A0 OBJ HEAD
**  A1 NS PART ID
** RETURNS NZ IF ALREADY HAS ONE, Z IF NOT YET
**
** JFL 26 AUG 92
**
CHECKFORNSPART
	MMTM	SP,A0
CFNSPLOOP
	MOVE	*A0(OPARTS),A0,L	
	JRZ	CFNSPX
	MOVE	*A0(OPARTID),A14,W
	CMP	A1,A14
	JRNE	CFNSPLOOP
CFNSPX
	MOVE	A0,A0		;SET NZ OR Z
	MMFM	SP,A0
	RETS

**
** SETNONSTANDARDPARTS
** MOVE ANIM POINTS ON MULTIPART OBJECTS FOR NONSTANDARD PARTS
**
**  A8 OBJ
**
** JFL 23 AUG 92
** JFL 24 AUG 92
** JFL 28 SEP 92; NEW SCRATCH
**
SETNONSTANDARDPARTS
	MOVE	A8,A0

	.IF DEBUG
	MOVL	*A8(OPART1),A14
	JRZ	SNSPXXX
	CMP	A14,A8
	TLOCKON	NE
SNSPXXX
	.ENDIF ;DEBUG

SNSPLOOP
	MOVL	*A0(OPARTS),A0
	JRZ	SNSPX
	
	;CHECK PART NUMBER
	MOVW	*A0(OPARTID),A1
	JRN	SNSPLOOP
	CMPI	FIRSTNSPART,A1
	JRLT	SNSPLOOP

	CALLR	SETNSPONE ;IN: A0,A1,A8 OBJPART,OPARTID,OBJHEAD

	JRUC	SNSPLOOP

SNSPX
	RETS


**
** SETNSPONE
**
** IN
**   A0 OBJ PART
**   A1 OPARTID 
**   A2-A3 SCRATCH
**   A8 OBJ HEAD
**
** JFL 24 AUG 92 
** JFL 26 AUG 92 
** JFL 28 SEP 92; NEW SCRATCH
** JFL 12 OCT 92; OPARTSXY
** JFL 09 NOV 92; NEW PTS
** JFL 12 NOV 92; IPTS
** JFL 12 JAN 93
**
SETNSPONE
	.IF DEBUG
	CMP	A0,A8
	TLOCKON	EQ		;SCALE SETTINGS ASSUME PART NOT HEAD
	.ENDIF ;DEBUG

	;GET PART INDEX
	SUBI	FIRSTNSPART,A1	;GET INDEX INTO LIST
	TLOCKON	N

	;CHECK IF THIS PART GOES ON WHEEL
	CMPI	FIRSTNSNONWHEEL-FIRSTNSPART,A1
	JRGE	SNSPNWHEEL

	;GET IMAGE LIST FOR THIS DIR
	MOVL	*A8(OCAR),A3
	MOVL	*A3(CDS0ILIST),A3
	MOVB	*A8(ODIR),A2
	SLL	24,A2			;CLEAN OFF SIGN SHIT
	SRL	24+DIRRIMAGE,A2		;CLEAN BOTTOM
	SLL	IMAGELOFFSET,A2		;IMGTBL ENTRY SIZE = 64BITS
	ADD	A3,A2

	;GET IMG HEADER & CTRL BITS
	MOVL	*A2+,A3			;MULTI IMG BLOCK
	MOVL	*A3,A3			;IHDR
	
	;TEST IF THIS IS HFLIPPED
	MOVB	*A2(B_FLIPH-7),A14
	JRN	SNSPHFLIP

	;GET ANIM POINT CORRESPONDING TO NS PART NUMBER
	SLL	IPTSIZEOF,A1		;SIZEOF ONE POINT
	ADD	A3,A1			;ADD IN PART OFFSET
	ADDI	IPT0,A1			;ADD IN POINT0 OFFSET
	MOVL	*A1,A14			;GET POINTY:X
	MOVL	*A3(IANIOFF),A1		;GET ANIY:X
	
	;PARTSXY = POINTY:X - ANIY:X
	SUBXY	A1,A14			;FIND DIFF FROM MAIN ANIOFF
	MOVL	A14,*A0(OPARTSXY)
	JRUC	SNSPDONE

SNSPHFLIP
	;REMAP POINT TO KEEP TIRE0 ON FRONT LEFT
	XORI	3,A1			;0<-3, 1<-2, 2<-1, 3<-0

	;GET ANIM POINT CORRESPONDING TO NS PART NUMBER
	SLL	IPTSIZEOF,A1		;SIZEOF ONE POINT
	ADD	A3,A1			;ADD IN PART OFFSET
	ADDI	IPT0,A1			;ADD IN POINT0 OFFSET
	MOVL	*A1,A14			;GET POINTY:X
	MOVL	*A3(IANIOFF),A1		;GET ANIY:X

	;FLIPPED POINTY - ANIY AND ANIX - POINTX
	MOVE	A14,A2
	SUBXY	A1,A14
	SRL	16,A14
	MOVW	A14,*A0(OPARTSXY+10H)
	SUBXY	A2,A1
	MOVW	A1,*A0(OPARTSXY)
	JRUC	SNSPDONE


SNSPNWHEEL
	;SET DIR SAME AS CAR
	MOVW	*A8(ODIR),A2
	MOVW	A2,*A0(ODIR)
	SLL	24,A2
	SRL	24+DIRTOMISINDEX,A2
	SLL	MISIZEOF,A2
	ADDI	MISIMAGES,A2

	MOVL	*A2+,A1 		;IHDR
	MOVL	*A2,A2			;AOFF:CTRL
	MOVE	A2,A3
	ZEXT	A2,W			;CTRL
	ANDNI	M_INUSE,A2		;!!FIX TBL!!
	SRL	16,A3			;AOFF

	;KEEP DMAGO BIT OF OBJ
	MOVW	*A0(OCTRL),A14
	ANDI	M_INUSE,A14
	OR	A14,A2

	;UPDATE IMAGE
	MOVL	A1,*A0(OIMG)			;UPDATE IMAGE
	MOVL	*A1(ISIZE),A14			;Y:X SIZ
	MOVL	A14,*A0(OSIZE)
	MOVL	A14,*A0(OUSIZE)
 	MOVL	*A1(ISAG),A14
	MOVL	A14,*A0(OSAG)			;SAG
  	MOVW	*A1(ICTRL),A14			;GET ICTRL
	OR	A2,A14				;OR IN OUR
  	MOVW	A14,*A0(OCTRL)
	
	;SET ANIM POINT
	ADD	A3,A1				;IHDR+AOFF
	MOVL	*A1,A14				;Y:X ANI
	MOVL	A14,*A0(OANIOFF)
	MOVL	A14,*A0(OUANIOFF)

	CLR	A14			
	MOVW	A14,*A0(OSCALEMUL)		;FORCE UPDATE

	JRUC	SNSX	
	

SNSPDONE
	CLR	A14			
	MOVW	A14,*A0(OSCALEMUL)		;FORCE UPDATE
	
SNSX
	RETS

**
** ADDNSPART
**
** IN
**   A0 OBJ TO ADD IT TO
**   A1 ANIMSCRIPT
**   A2 PART ID
** OUT
**   A2 OBJ OR Z
**
** JFL 24 AUG 92
** JFL 25 SEP 92; NEW SCRATCH
** JFL 29 SEP 92; NEW SCRATCH
** JFL 12 OCT 92; REDONE
** JFL 24 NOV 92
** JFL 07 DEC 92
** JFL 13 JAN 93
**
ADDNSPART
	MMTM	SP,A0,A1,A4,A8

	.IF DEBUG
	CMPI	FIRSTNSPART,A2
	TLOCKON	LO
	.ENDIF ;DEBUG

	;CAN ONLY HANDLE 0..3 FOR NOW
	CMPI	FIRSTNSPART+3,A2
	TLOCKON	HI
	JRHI	ANSPBADX

	MOVE	A0,A8				;A8 OBJ HEAD
	MOVE	A1,A4				;A4 ANIMSCRIPT
	MOVE	A2,A3 				;A3 PART ID
	
	;GET ID & CHECK IF OBJ ALREADY HAS ONE
	;XXX MOVE	A3,A1
	;CALLR	CHECKFORNSPART ;IN: A0,A1 OBJ,PARTNUM
	;JRNZ	ANSPX

	;GET OBJ
	CALLA	GETOBJ
	TLOCKON	Z

	;FILL IN MISC INFO
	MOVW	A3,*A0(OPARTID)
	MOVI	OID_PART,A14
	MOVW	A14,*A0(OID)

	;FILL IN IMAGE DATA
	MOVE	A4,A2
	SLL	SL_HVF,A2			;LINE UP HV FLIP TO CTRL
	SRL	SR_HVF,A2	
	SRL	4,A4				;CLEAR FLAG BITS
	SLL	4,A4
	MOVL	*A4,A1				;A1 IMAGE
	MOVL	A1,*A0(OIMG)			;UPDATE IMAGE
	MOVL	*A1(ISIZE),A14			;Y:X SIZ
	MOVL	A14,*A0(OSIZE)
	MOVL	A14,*A0(OUSIZE)
 	MOVL	*A1(ISAG),*A0(OSAG)		;SAG
	MOVL	*A1(IANIOFF),A14		;Y:X ANI OFF
	MOVL	A14,*A0(OANIOFF)
	MOVL	A14,*A0(OUANIOFF)
  	MOVW	*A1(ICTRL),A14			;GET ICTRL
	ORI	DMAWNZ,A14
	OR	A2,A14
  	MOVW	A14,*A0(OCTRL)

	;USE SAME PALETTE
	PUSH	A0
	MOVL	*A1(ICMAP),A0
	CALLA	GETFPAL
	TLOCKON	Z
	MOVE	A0,A14
	PULL	A0
	MOVW	A14,*A0(OPAL)
				  	
	;SET NON STANDARD PART
	MOVW	*A0(OPARTID),A1
	CALLR	SETNSPONE ;IN: A0,A1,A8 OBJPART,OPARTID,OBJHEAD

	;LINK IN AT END	-- MUST BE AFTER NORMAL CAR PARTS
	MOVL	A8,*A0(OPART1)

	;FIND END OF PARTS
	MOVE	A8,A1
ANSPLINK
	MOVE	A1,A3		 	;A3 PREV
	MOVL	*A1(OPARTS),A1
	JRNZ	ANSPLINK
	
	MOVL	A1,*A0(OPARTS)		;CLR LINK AFTER US
	MOVL	A0,*A3(OPARTS)		;ADD US TO PREV

	;INSERT THE OBJ INTO THE PLANE LIST
	CALLR	INSOBJ

	;ADD ANIMATION
	MOVL	A4,*A0(ANIMFRM)
	MOVL	A4,*A0(ANIMSCR)
	MOVK	1,A14
	MOVW	A14,*A0(ANIMSLPB)
	MOVW	A14,*A0(ANIMSLPA)
	CALLA	CKINSANI

ANSPX
	MOVE	A0,A2			;RETURN OBJ
	MMFM	SP,A0,A1,A4,A8
	RETS
ANSPBADX	
	CLR	A2
	MMFM	SP,A0,A1,A4,A8
	RETS
	

	.END

* EOF
