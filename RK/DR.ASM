***
*** FILE: DR.ASM
*** DERBY RACE
***
*** JFL 12 JUL 92; STARTED
*** JFL 13 JUL 92
*** JFL 14 JUL 92
*** JFL 16 JUL 92
*** JFL 17 JUL 92; JIM'S NEW SEMI IMAGES
*** JFL 21 JUL 92
*** JFL 22 JUL 92; WHEEL-POINT HIT TESTING STARTED
*** JFL 23 JUL 92; SOUNDS
*** JFL 24 JUL 92
*** JFL 28 JUL 92
*** JFL 29 JUL 92
*** JFL 31 JUL 92; MULTIPARTS STARTED
*** JFL 01 AUG 92
*** JFL 03 AUG 92; MULTIPART CAR
*** JFL 04 AUG 92
*** JFL 05 AUG 92; DAMAGE TO PARTS
*** JFL 07 AUG 92; DAMAGE AFFECTS CONTROL
*** JFL 09 AUG 92; HIT TEST RECTANGLE OVERLAPPING
*** JFL 10 AUG 92; SPIN DIR BASED ON HIT
*** JFL 11 AUG 92
*** JFL 12 AUG 92; ALL PLAYERS ON SCREEN
*** JFL 16 AUG 92; SPLIT DR.ASM -> DRH.ASM DRI.ASM
*** JFL 18 AUG 92; MOTION VECTOR METHOD
*** JFL 20 AUG 92
*** JFL 21 AUG 92; REV CRASH/PEELOUT SND FIXES
*** JFL 23 AUG 92
*** JFL 13 SEP 92; SCALE FIX
*** JFL 23 SEP 92
*** JFL 28 SEP 92; NEW SCRATCH
*** JFL 30 SEP 92; NEW SCORE
*** JFL 02 OCT 92; SHADOW
*** JFL 07 OCT 92; TURBOCARINP
*** JFL 09 OCT 92
*** JFL 12 OCT 92; OPARTSXY
*** JFL 13 OCT 92; VEC
*** JFL 14 OCT 92; ONE CAR
*** JFL 15 OCT 92; NEW MAP OBJ
*** JFL 16 OCT 92; DRB
*** JFL 22 OCT 92
*** JFL 26 OCT 92
*** JFL 27 OCT 92
*** JFL 29 OCT 92
*** JFL 23 DEC 92; NEW VEC
*** JFL 10 JAN 93; GCOLLIST
*** JFL 24 JAN 93
*** JFL 09 FEB 93; ARENA OBJECT WATCHER DONE BY ARENA CODE
*** JFL 16 FEB 93
*** JFL 26 MAR 93; AR6
*** JFL 12 APR 93; DISPATCH
*** JFL 14 APR 93; ARENA SONG CHANGED
*** JFL 14 APR 93; UNDER CAR ADD MOVING PART
***
	.MLIB	"APMACS.LIB"
	.FILE	"DR.ASM"
	.TITLE	" <<< DERBY RACE -- MAIN LOOP >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**
** COMPILE FLAGS
**
ARROWSHOWSTOPO		EQU	1

***********************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
*************************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"
	.INCLUDE	"DRINP.I"
	.INCLUDE	"DR.I"
	.INCLUDE	"DRO.I"
	.INCLUDE	"DRM.I"		;MOVE INCLUDES
	.INCLUDE	"DRT.I"
	.INCLUDE	"DRS.I"
	.INCLUDE	"DRVEC.I"
	.INCLUDE	"DRV.I"
	.INCLUDE	"DRMO.I"
	.INCLUDE	"DRB.I"
	.INCLUDE	"DRC.I"
	.INCLUDE	"DRP.I"
	.INCLUDE	"DRSND.I"
	.INCLUDE	"DRPAL.I"
	.INCLUDE	"DRMIS.I"
	.INCLUDE	"DRA.I"
	.INCLUDE	"DRPRO.I"
	.INCLUDE	"DRDISP.I"
	.INCLUDE	"DRFHIT.I"
	.INCLUDE	"DRFSHOW.I"
	.INCLUDE	"DRFGHOST.I"
	.INCLUDE	"DRFARROW.I"
	.INCLUDE	"DRFKILL.I"

**
** CHECK SOME STUFF
**
	.IF OMODSIZE>ODATAX
	- OMODSIZE TOO BIG -
	.ENDIF

	.IF NUMBUTTONS<>3
	- CHECK MOVE STUFF IN DR.I -
	.ENDIF

	.IF MPYSCALE<>8
	- CHECK VEL SCALE IN APD.ASM -
	.ENDIF

** OTHERS USE
	.DEF	DRPROC		;DR.ASM
	.DEF	ALTINPHANDLER	;DR.ASM
	.DEF	NORMINPHANDLER	;DR.ASM
	.DEF	PLAYERCARINP	;DR.ASM
	.DEF	CRAZYCARINP	;DR.ASM
	.DEF	DEMONCARINP	;DR.ASM
	.DEF	NOCONTROLCARINP	;DR.ASM
	.DEF	STEERONLYCARINP	;DR.ASM
	.DEF	JUMPCARINP	;DR.ASM
	.DEF	KILLCAR		;DR.ASM
	.DEF	ADDSHADOW	;DR.ASM
	.DEF	ADDTIREVEC	;DR.ASM
	.DEF	CLEARINPVEC	;DR.ASM
	.DEF	CLEARVEC	;DR.ASM
	.DEF	VECTORTOVELS	;DR.ASM
	.DEF	SETCARDIR	;DR.ASM
	.DEF	SHAKESCREEN	;DR.ASM
	.DEF	CHANGECARSPEED	;DR.ASM
	.DEF	SPINCARINPSUB  	;DR.ASM
	.DEF	CARINPPEDSUB   	;DR.ASM
	.DEF	PEDALONLYCARINP	;DR.ASM
	.DEF	ISCAROBJ	;DR.ASM
	.DEF	COMPTODIRVEC	;DR.ASM
	.DEF	COMPTODIRMAGVEC	;DR.ASM
	.DEF	FINDPOWERUP	;DR.ASM
	.DEF	ADDMOVINGPART	;DR.ASM	

** WE USE
	.REF	DISPATCHPROC   	;AP.ASM
	.REF	STARTPLANES	;DRB.ASM
	.REF	WIPEOUT		;AP.ASM
   	.REF	SINCOS		;DRSINCOS.ASM
	.REF	ATANTBL		;DRSINCOS.ASM
	.REF	ATANTBLX	;DRSINCOS.ASM
	.REF	ANIMP		;APC.ASM
	.REF	INITDRDATA	;DRI.ASM
	.REF	SCOREINIT	;DRS.ASM
	.REF	SHADOWLIST	;APD.ASM
	.REF	FREEOBJ		;APD.ASM
	.REF	SPECMOVE	;DRM.ASM
	.REF	SETOBJSCALE	;DRH.ASM
	.REF	VELADDCAR	;APD.ASM
	.REF	VELSUBCAR	;APD.ASM
	.REF	AFTERHITTEST	;DRH.ASM
	.REF	BEFOREHITTEST	;DRH.ASM
	.REF	HITTESTOBJS	;DRH.ASM
	.REF	HITTESTMISC	;DRH.ASM
	.REF	SREGXXX		;DR.ASM
	.REF	CREGXXX		;DR.ASM
	.REF	ADDTOARENA	;DRA.ASM
	.REF	INITTOPO	;DRT.ASM
	.REF	INSANI		;APD.ASM
	.REF	CKINSANI	;APD.ASM
	.REF	SCORESETTIME	;DRS.ASM
	.REF	SCORESETMISL	;DRS.ASM
	.REF	SCORESETTURBO	;DRS.ASM
	.REF	SCORETIMEDOWN	;DRS.ASM
	.REF	DOPEELOUT	;DRA.ASM
	.REF	HITCARTOPO	;DRT.ASM
	.REF	TOPOXZ		;DRT.ASM
	.REF	TOPOREACT	;DRT.ASM
	.REF	HITTESTCARS	;DRH.ASM
	.REF	SQROOT		;DRU.ASM	
	.REF	SETARENA	;DRT.ASM
	.REF	SHAKEXY		;APD.ASM
	.REF	CCABORT		;DRC.ASM
	.REF	CARDISABLE	;DRC.ASM
	.REF	SCORESETDAMAGE	;DRS.ASM
	.REF	MAKESND		;DRSND.ASM
	.REF	ARENASND	;DRSND.ASM
	.REF	RANDOMA0	;APUTIL.ASM
	.REF	ARSCALETBLRACE 	;DRH.ASM
	.REF	INITARENASCALE	;DRH.ASM
	.REF	MAKEOBJANIM	;DRA.ASM
	.REF	RESTORESNDMAP	;DRSND.ASM
	.REF	MISIMAGES	;DRMIS.ASM
	.REF	HANDLEDRONE	;DRD.ASM
	.REF	POINT2POINTDIR16 ;DRH.ASM
	.REF	ARENAPROC	;DRACT.ASM
	.REF	STARTGUN   	;DRATT.ASM
	.REF	STARTGUNSUB	;DRATT.ASM
	.REF	OBJINITDEATHBOOM ;DRAS.ASM
	.REF	OBJINITDEADMISL ;DRAS.ASM
	.REF	OBJINITCARFIRE	;DRAS.ASM
	.REF	OBJINITRUNNER	;DRAS.ASM
	.REF	CREATECAR	;DRI.ASM
	.REF	PLAYERIZE	;DRI.ASM
	.REF	CARCODETBL	;DRI.ASM
	.REF	GETINPDATA	;DRINP.ASM
	.REF	CARLOSEPARTS	;DRH.ASM
	.REF	FLASHPLBACKDEATH ;DRH.ASM
	.REF	ASDEADMISL	;DRAS.ASM
	.REF	ASDEATHBOOM	;DRAS.ASM
	.REF	ASCARFIRE	;DRAS.ASM
	.REF	MAKESHADMULTI	;DRI.ASM
	.REF	INSERT_OBJ	;APD.ASM
	.REF	GCOLWATCHER	;APD.ASM
	.REF	FGLISTS		;APD.ASM
	.REF	ENDMOVE		;DRM.ASM
	.REF	SETCARPAL	;DRA.ASM
	.REF	ZAPOBJ		;APD.ASM
	.REF	SETGCOL		;DR.ASM
	.REF	RUNNERPROC	;DRR.ASM
	.REF	ANISPAWNFIX	;DRA.ASM

	.REF	MOVINGPARTTBL	;DRAS.ASM
	.REF	MOVINGPARTTBLX	;DRAS.ASM

	.REF	GAME_STATE
	.REF	WAVEIRQS
	.REF	PAUSE_GAME
	.REF	NOAUTOE

** WE USE -- RAM
	.REF	WINNER		;DRRAM.ASM
	.REF	TTRIG		;DRRAM.ASM
	.REF	DRG		;DRRAM.ASM
	.REF	ARENAINIT	;DRRAM.ASM
	.REF	ARENAACTOBJS	;DRRAM.ASM
	.REF	DEBUGMOVE	;DRRAM.ASM
	.REF	ARENATRACKINFO	;DRRAM.ASM
	.REF	HOLDGAME	;DRRAM.ASM
	.REF	PLAYERRECORDTBL	;DRRAM.ASM
	.REF	PROTECTION	;DRRAM.ASM

	.TEXT
	.EVEN

**
** DEFINES
**


**
** ARENAS STRUCT
**
** JFL 03 DEC 92
**
ARADID		EQU	000H	;UHW
ARPLID		EQU	010H	;UHW
ARTUNE		EQU	020H	;UHW
ARXXX1		EQU	030H	;UHW
ARSCALETBL	EQU	040H	;UHL SCALE TBL
ARXXX2		EQU	060H	;UHL
ARSIZE		EQU	080H	; SIZE
ARSIZEOF	EQU	7	; SIZEOF SHIFT

**
** ARENAS
**
** JFL 03 DEC 92
** JFL 26 MAR 93; AR6
**
ARENAS

	;ARENA1
	.WORD	ADIDARENA2,PLIDARENA2,SNDSONGANOTHER,0
	.LONG	ARSCALETBLRACE,0

	;ARENA2
	.WORD	ADIDARENA5,PLIDARENA5,SNDSONGDESTRUCTOID,0
	.LONG	ARSCALETBLRACE,0

	;ARENA3
	.WORD	ADIDARENA3,PLIDARENA3,SNDSONGDESTRUCTOID,0
	.LONG	ARSCALETBLRACE,0

	;ARENA4
	.WORD	ADIDARENA4,PLIDARENA4,SNDSONGDESTRUCTOID,0
	.LONG	ARSCALETBLRACE,0

	;ARENA5
	.WORD	ADIDARENA5,PLIDARENA5,SNDSONGTHRASHROCKRD,0
	.LONG	ARSCALETBLRACE,0

	;ARENA6
	.WORD	ADIDARENA6,PLIDARENA6,SNDSONGTHRASHROCKRD,0
	.LONG	ARSCALETBLRACE,0

	;ARENA7
	.WORD	ADIDARENA7,PLIDARENA7,SNDSONGTHRASHROCKRD,0
	.LONG	ARSCALETBLRACE,0

ARENASX
	
**
** DRPROC
**
** JFL 12 JUL 92
** JFL 29 JUL 92
** JFL 02 OCT 92
** JFL 26 OCT 92
** JFL 16 FEB 93
**
DRPROC
	DISPOFF			;DISPLAY OFF ------------------------------
	DINT			;DISABLE INTERRUPTS -----------------------

	CLR	A14
	MOVW	A14,@HOLDGAME
	MOVL	A14,@ANIOBJS
	CALLA	WIPEOUT ;INIT FOR NEW WAVE

	;SET GAME STATE
	MOVI	INGAMEINIT,A14
	MOVW	A14,@GAME_STATE

	MOVI	DRG,A8
	MOVW	*A8(DRGARENA),A8
	SLL	ARSIZEOF,A8
	ADDI	ARENAS,A8
	.IF DEBUG
	CMPI	ARENASX,A8
	TLOCKON	HS
	.ENDIF ;DEBUG

	;RESET THE SOUND MAP -- BEFORE SETARENA
	CALLA	RESTORESNDMAP

	;SET THE ARENA -- BEFORE INITOBJECTS,INITDRDATA
	MOVW	*A8(ARADID),A2
	CALLA	SETARENA ;IN: A2 ARENAID

	;SET SCALE TBLS
	MOVL	*A8(ARSCALETBL),A2
	CALLA	INITARENASCALE ;IN:A2 SCALETBL

	CALLR	INITDRDATA	;INIT OUR DATA AFTER SETARENA
	CALLA	SCOREINIT

	.IF MAKEGHOST
	MOVK	PLIDGHOST6,A2
	.ELSE ;!MAKEGHOST
	MOVW	*A8(ARPLID),A2
	.ENDIF ;!MAKEGHOST
	CALLR	STARTPLANES ;IN: A2 PLANEID

	EINT			;ENABLE INTERRUPTS ------------------------
	DISPON			;DISPLAY ON -------------------------------

	.IF MAKEGHOST
	.REF MAKEGHOSTMAP
	MOVK	1,A14
	MOVW	A14,@NOAUTOE
	SLEEP	10
	CALLA	MAKEGHOSTMAP
DRPMGLOOP
	SLEEP	10
	JRUC	DRPMGLOOP
	.ENDIF ;MAKEGHOST

	;START A TUNE
	MOVW	*A8(ARTUNE),A14
	CALLA	MAKESND ;IN:A14 SNDID

	;INIT THE ARENA
	MOVL	@ARENAINIT,A14
	JRZ	DRPNOAI
	CALL	A14
DRPNOAI

	MOVK	1,A14
	MOVW	A14,@HOLDGAME

	SLEEP	4		;DRAW EVERYTHING

	;MISC INIT -- EVERY RACE
	CLR	A14
	MOVW	A14,@PAUSE_GAME


	;
	;OTHER PROCESSES
	;

	CREATE	PID_DRAGONE,GCOLWATCHER
	CREATE	PID_DRAGONE,ANIMP
	CREATE	PID_DRAGONE,MAINCARPROC

	;
	;CONDITIONAL PROCESSES
	;

	.IF ARROWTHING-MAKEGHOST>0
	CREATE	PID_DRAGONE,ARROWTHINGWATCHER
	.ENDIF ;ARROWTHING

	CALLA	INITTOPO

	CLR	A0
	MOVL	A0,@WINNER

	;
	;PLAYER PROCESSES
	;

	CLR	A8
DRPPLAYER
	MOVE	A8,A14
	SLL	5,A14
	ADDI	CARCODETBL,A14
	MOVL	*A14,A9
	MMTM	SP,A8
	CALLA	CREATECAR ;IN:A9 CARID:DRIVERID:STARTID:INPNUM
			  ;OUT:A7,A8 CD,OBJ SC:A0-A11
	MMFM	SP,A8
	CREATE	PID_DRAGONE,WATCHPLAYERPROC
	SLEEP	1		;MAKE SURE SYSTEM CAN KEEP UP WITH US
	INC	A8
	CMPI	DRPLAYERS,A8
	JRLT	DRPPLAYER

	;
	;START GUN START
	;

	CALLR	STARTGUN
DRPSG
	SLEEP	2
	CALLR	STARTGUNSUB
	JRNC	DRPSG

	MOVI	SNDPEEL1,A14
	CALLA	MAKESND ;IN:A14 SND
       	SLEEP	1
	MOVI	SNDPEEL2,A14
	CALLA	MAKESND ;IN:A14 SND
       	SLEEP	10
	MOVI	SNDPEEL3,A14
	CALLA	MAKESND ;IN:A14 SND

	CLR	A14
	MOVW	A14,@HOLDGAME

	;SET GAME STATE
	MOVI	INGAME,A14
	MOVW	A14,@GAME_STATE

	;
	;START GUN END
	;

	;CREATE	PID_DRAGONE,CREATEDEBUGPROC

	;
	;SPAWN ARENA PROCESS
	;

	MOVL	@ARENAACTOBJS,A14
	JRZ	DRPNOARENAPROC
	CREATE	PID_DRAGONE,ARENAPROC

	.IF PROTECT
	MOVL	@SUPPLSTS+SUPL_CAR,A8
	MOVI	PROTECTION+PROCSUMSTARTA-300H,A9
	CREATE	PID_DRAGONE,CHECKPROTECTAPROC

	MOVI	PROTECTION+PROCSUMSTARTB-50H,A8
	MOVL	@SUPPLSTS+SUPL_CAR,A9
	CREATE	PID_DRAGONE,CHECKPROTECTBPROC
	.ENDIF ;PROTECT

DRPNOARENAPROC

DMLOOP

	SLEEP	1
	MOVL	@WINNER,A0	
	JRNZ	DMWINNER

	JRUC	DMLOOP

DMWINNER
	MOVE	A0,A8

	;MOVK	1,A14
	;MOVW	A14,@PAUSE_GAME

	SLEEP	60*4

	MOVL	A8,@WINNER	;IN CASE ANOTHER WINS IN MEAN TIME

	CREATE	PID_MAIN,DISPATCHPROC
	DIE
	
	.IF 0 ;-------------------------------------------------
**
**
CREATEDEBUGPROC

	;CREATE ANIM
	MOVI	OBJINITDEBUG,A5
	CALLA	CREATE_OBJ
	MOVI	[SCRBOT-SCRBOT/8,0],A14
	MOVL	A14,*A0(OZVAL)
	MOVI	[SCRRGT,0],A14
	MOVL	A14,*A0(OXVAL)
	MOVI	-[2,0],A14
	MOVL	A14,*A0(OXVEL)
	CALLR	INSOBJ ;IN:A0

	MOVE	A0,A8
CDPLOOP
	SLEEP	1
	
	.REF	MSL1
	MOVI	MSL1,A1
	MOVL	A1,*A8(OIMG)
	MOVL	*A1(ISIZE),A14
	MOVL	A14,*A8(OUSIZE)
	MOVL	*A1(ISAG),A14
	MOVL	A14,*A8(OSAG)
	MOVL	*A1(IANIOFF),A14
	MOVL	A14,*A8(OUANIOFF)
	CLR	A14	       		
	MOVW	A14,*A8(OSCALEMUL)		;FORCE UPDATE

	SLEEP	1
	
	.REF	MSL2
	MOVI	MSL2,A1
	MOVL	A1,*A8(OIMG)
	MOVL	*A1(ISIZE),A14
	MOVL	A14,*A8(OUSIZE)
	MOVL	*A1(ISAG),A14
	MOVL	A14,*A8(OSAG)
	MOVL	*A1(IANIOFF),A14
	MOVL	A14,*A8(OUANIOFF)
	CLR	A14	       		
	MOVW	A14,*A8(OSCALEMUL)		;FORCE UPDATE

	SLEEP	1
	
	.REF	MSL3
	MOVI	MSL3,A1
	MOVL	A1,*A8(OIMG)
	MOVL	*A1(ISIZE),A14
	MOVL	A14,*A8(OUSIZE)
	MOVL	*A1(ISAG),A14
	MOVL	A14,*A8(OSAG)
	MOVL	*A1(IANIOFF),A14
	MOVL	A14,*A8(OUANIOFF)
	CLR	A14	       		
	MOVW	A14,*A8(OSCALEMUL)		;FORCE UPDATE

	MOVL	*A8(OXVAL),A14
	JRP	CDPLOOP
	MOVI	[SCRRGT,0],A14
	MOVL	A14,*A8(OXVAL)
	JRUC	CDPLOOP

	.ENDIF ;0 -------------------------------------------------

***
*** WATCH PLAYER ---------------------------------------------------------
***

	.IF PROTECT
**
** CHECKPROTECTAPROC
**
** IN
**   A8 OBJ
**   A9 ADR
**
** JFL 02 MAR 93
**
CHECKPROTECTAPROC
	SLEEP	ONESECOND*5
	MOVL	*A9(300H),A9
	CMPI	VPROCSUMSTARTA,A9
	JREQ	CPPAOK
	GETST	A0
	DINT
	JRUC	$
	PUTST	A0
	MOVL	A8,@WINNER		;PICK WINNE
CPPAOK
	DIE

**
** CHECKPROTECTBPROC
**
** IN
**   A8 ADR
**   A9 OBJ
**
** JFL 02 MAR 93
**
CHECKPROTECTBPROC
	SLEEP	ONESECOND*5
	MOVL	*A8(50H),A14
	CMPI	VPROCSUMSTARTB,A14
	JREQ	CPPBOK
	GETST	A0
	DINT
	JRUC	$
	PUTST	A0
	MOVL	A9,@WINNER		;PICK WINNE
CPPBOK
	DIE

**
** CHECKPROTECTDMA
**
** JFL 04 MAR 93
**
CHECKPROTECTDMA
	DIE

	.ENDIF ;PROTECT

**
** WATCH PLAYER DATA
**
** JFL 16 FEB 93
**
WPDBTN		EQU	PDATA+000H ;UHW START BUTTON COUNT
WPDSIZE		EQU	PDATA+020H ; SIZE

**
** WATCHPLAYERPROC
**
** IN
**   A8 PLAYER 0..2
**   
** JFL 16 FEB 93
**
WATCHPLAYERPROC
	;MAP PLAYER NUMBER TO PLAYER RECORD
	MOVI	PLRSIZE,A1
	MPYU	A8,A1
	ADDI	PLAYERRECORDTBL,A1
	MOVE	A1,A10
	
	;CHECK IF PLAYER HAS ALREADY BOUGHT IN & IS IN THE GAME
	MOVW	*A10(PLRINGAME),A14
	JRNZ	WPPJOIN
	
	;MAP PLAYER NUMBER TO INPUT DATA
	MOVE	A8,A2
	CALLA	GETINPDATA ;IN:A2 PLNUM OUT:A2,A3 PLNUM,INPDATA
	MOVE	A3,A9
	
	;INIT
	MOVW	*A9(INPBSTART),*A13(WPDBTN)
WPPLOOP
	;REG USE
	;  A8 PLAYERNUM
	;  A9 INPDATA
	; A10 PLAYERREC
	
	MOVW	*A9(INPBSTART),A2
	MOVW	*A13(WPDBTN),A14
	CMP	A2,A14
	JRNE	WPPJOIN

	;NAP FOR A BIT
	SLEEP	23
	JRUC	WPPLOOP	
WPPJOIN
	;
	;JOIN IN
	;
	CALLA	PLAYERIZE ;IN:A8 PLAYERNUM
	
WPPX
	DIE
	


***
*** -----------------------------------------------------------------------
***


	.IF DEBUG
**
** ISCAROBJ
**
** IN
**   A8 OBJ IN QUESTION
**
** JFL 15 NOV 92
**
ISCAROBJ
	MMTM	SP,A0
	MOVL	@SUPPLSTS+SUPL_CAR,A0
	JRZ	ICOX
ICOLOOP
	CMP	A0,A8	
	JREQ	ICOX
	MOVL	*A0(OSLINK),A0
	JRNZ	ICOLOOP
	TLOCKUP ;NOT ON CAR SUPL
ICOX
	MMFM	SP,A0
	RETS
	.ENDIF ;DEBUG

**
** FINDPOWERUP
**
** IN
**   A2-A3 SCRATCH
**   A8 OBJ
** OUT
**   C IF NOT LOCKED ON OBJ
**   ELSE A2 IS FIRST MISSILEOBJ THAT IS LOCKED ON
**
** JFL 18 JAN 93
**
FINDPOWERUP
	MOVL	@SUPPLSTS+SUPL_FOBJ,A2
	JRZ	FPUBADX

FPULOOP
	;CHECK IF THIS IS A MISSILE
	MOVW	*A2(OID),A14
	ANDI	MASK_TYPE,A14
	CMPI	TYPE_POWERUP,A14
	JREQ	FPUX

FPUNEXT
	;NEXT
	MOVL	*A2(OSLINK),A2
	JRNZ	FPULOOP
	
FPUBADX
	SETC
	RETS
FPUX
	CLRC
	RETS

	.DEF	FINDPOWERUP	;DR.ASM
***
*** SLIP ------------------------------------------------------------------
***

SL_STEERVEL		EQU	21	;SL FIRST
SR_STEERVEL		EQU	21+8	;SL FIRST

**
** SLIP	ROUTINES !! EXIT WITH AN EXGPC B8 !!!
**
** IN
**   A0 INP
**   A1 FEEL, SCRATCH
**   A2 WHEEL MAG, SCRATCH
**   A3 SCRATCH
**   A7 CD
**   A8 OBJ
**  A10 NEW DIR
**   B8 PC
**
** OUT
**  A10 NEW DIR
**
** JFL 22 DEC 92
** JFL 17 FEB 93; DONT SLIP IN THE AIR
**
ARENASLIP
	;ADD IN SPEED RESPONSE
	MOVW	*A7(CDTOTMAG),A14	;FROM 0..800H
	SLL	SL_STEERVEL,A14		;INTO 0..7 RANGE
	SRL	SR_STEERVEL,A14
	SLL	4,A14			;SIZEOF SLIPTBL
	ADDI	EASYSLIPTBL,A14
	MOVW	*A14,A14
	
	;SHOULD WE START SLIPPING
	MOVE	A2,A3			;WHEEL SPIN MAG & DIR
	ABS	A3   			;GET JUST WHEEL SPIN MAG
	MOVW	*A1(FWHEELANTISLIP),A1	;MYSTERIOUS ANTI SLIP PROPERTY
	SUB	A1,A3
	MOVL	@ARENATRACKINFO,A1
	MOVW	*A1(TIANTISLIP),A1	;GET SLIP FACTOR FOR THIS ARENA
	SUB	A1,A3
	CMP	A14,A3			;CHECK THRESHOLD
	JRLE	ARSX
		  
	;CHECK IF WE ARE ALREADY SLIPPING
	MOVW	*A7(CDSLIPFACTOR),A14
	JRNZ	ARSX

	;
	;FIRST SLIP
	;
	
	MOVI	FIRSTNSPART,A1
	MOVW	A1,*A7(CDSLIPPART)

	;
	;SET SLIP DIR & VEL
	;
	MOVL	*A7(CDTOTDIR),*A7(CDSLIPDIR)	;CDTOTMAG,CDSLIPMAG ALSO
	MOVI	PERCENT100<<SLIPFFRAC,A14
	MOVW	A14,*A7(CDSLIPFACTOR)
	MOVI	18H,A14
	MOVW	A14,*A7(CDSLIPFDECAY)

	;SLIP SOUND
	MOVW	*A7(CDINPNUM),A14
	ADDI	SNDSTEERSLIP1,A14
	CALLA	ARENASND ;IN:A14 SNDID

ARSX
	EXGPC	B8
	
**
** SLIP TBL
**
** JFL 22 DEC 92
**
EASYSLIPTBL
HARDSLIPTBL
	.WORD	32767 ;NO SLIPPING
	.WORD	32767 ;NO SLIPPING
	.WORD	STEERA2DMAX-STEERA2DMAX/4
	.WORD	STEERA2DMAX-STEERA2DMAX/3
	.WORD	STEERA2DMAX-STEERA2DMAX/2
	.WORD	STEERA2DMAX-STEERA2DMAX/2
	.WORD	STEERA2DMAX-STEERA2DMAX/2
	.WORD	STEERA2DMAX-STEERA2DMAX/2



**
** SHAKESCREENTBL
**
** JFL 22 OCT 92
**
SHAKESCREENTBL
	.LONG	SSSMALL
	.LONG	SSMED
	.LONG	SSBIG
SHAKESCREENTBLX

SSSMALL
	.LONG	[-2,2],[0,-4],[-4,2],0
SSMED
	.LONG	[-2,2],[-2,4],[-4,4]
	.LONG	[-4,4],[-2,4],[-4,-2]
SSBIG
	.LONG	[-2,2],[0,-4],[-4,2],0

**
** SHAKESCREEN
**
** IN
**   A2 MAGNITUDE:FLAGS
**
** A MAGNITUDE OF 
**  0 -- SMALL
**  1 -- MEDIUM
**  2 -- BIG
**
** FLAGS -- SEE DR.I
**
**
** JFL 22 OCT 92
**
SHAKESCREEN
	MMTM	SP,A0,A1,A7,A8,A9
	
	;MAKE SURE WE ARE NOT SHAKING THE SCREEN
	MOVI	DRG,A3	
	MOVW	*A3(DRGFLAGS),A14
	BTST	B_DRGFSHAKESCREEN,A14
	JRNZ	SHSCX
     	ORI	M_DRGFSHAKESCREEN,A14
	MOVW	A14,*A3(DRGFLAGS)

	;SET UP FOR PROCESS
	MOVE	A2,A8		
	SRL	16,A2
	.IF DEBUG
	CMPI	3,A2
	TLOCKON	GE
	.ENDIF ;DEBUG
	SLL	5,A2			;SIZEOF SHAKESCREENTBL
	ADDI	SHAKESCREENTBL,A2
	.IF DEBUG
	CMPI	SHAKESCREENTBLX,A2
	TLOCKON	GE
	.ENDIF ;DEBUG
	MOVL	*A2,A9

	CREATE	PID_DRAGONE,SHAKESCREENPROC

SHSCX
	MMFM	SP,A0,A1,A7,A8,A9
	RETS


**
** SHAKESCREENPROC
**
** IN
**   A8 MAG:FLAGS
**   A9 SCRIPT
**
** JFL 22 OCT 92
** JFL 28 OCT 92
**
SHAKESCREENPROC
	
	;GET NEXT OFFSET FROM SCRIPT
	MOVL	*A9+,A2		;Y:X
	JRZ	SSPDONE
	
	;ISOLATE MOTION
	MOVE	A2,A3
	SRL	16,A3

	;ADD IT IN
	BTST	B_SSX,A8
	JRZ	SSPNOX
	MOVW	A2,@SHAKEXY
SSPNOX
	BTST	B_SSY,A8
	JRZ	SSPNOY
	MOVW	A3,@SHAKEXY+10H
SSPNOY
	
	SLEEP	1
	JRUC	SHAKESCREENPROC

SSPDONE
	MOVL	A2,@SHAKEXY
	MOVI	DRG,A3	

	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A3(DRGFLAGS+B_DRGFSHAKESCREEN),0
	SETF	16,1,0

	DIE

	.IF ARROWTHING

ARROWTHINGARENAOBJ
	.WORD	0		;AOLVAL16
	.WORD	AOID_ARROW	;OBJECT
	.LONG	[80,80]		;Z:X
	.WORD	0		;Y
	.WORD	0		;XXX1

**
** ARROWTHINGWATCHER
**
** JFL 09 OCT 92
** JFL 11 OCT 92
**
ARROWTHINGWATCHER
	MOVI	ARROWTHINGARENAOBJ,A8
	MOVL	*A8,A0
	JRNZ	ATWONE
	DIE
ATWONE
	MOVL	*A8+,A2		;LOAD [OBJID,AOLVAL16]
	MOVL	*A8+,A3		;LOAD Z:X
	MOVL	*A8+,A14	;LOAD ?:Y
	CALLA	ADDTOARENA ;A2,A3,A14 ARENAOBJID:AOLVAL16,Z:X,?:Y
	MOVE	A2,A8

	;OBJ IS IN A8	
ATWLOOP
	CLR	A2
	CALLA	GETINPDATA ;IN:A2 PLNUM OUT:A2,A3 PLNUM,INPDATA
	MOVE	A3,A4
	MOVK	2,A2
	CALLA	GETINPDATA ;IN:A2 PLNUM OUT:A2,A3 PLNUM,INPDATA
	MOVE	A3,A5
	
	MOVW	*A8(OZPOS),A2
	MOVW	*A4(INPWHEELMAG),A14
	NEG	A14
	SRA	1,A14
	ADD	A14,A2
	MOVW	A2,*A8(OZPOS)

	MOVW	*A8(OXPOS),A2
	MOVW	*A5(INPWHEELMAG),A14
	NEG	A14
	SRA	1,A14
	ADD	A14,A2
	MOVW	A2,*A8(OXPOS)

	;COMBINE X & Z FOR DEBUGGING SAKE
	MOVW	*A8(OXPOS),A2
	MOVW	*A8(OZPOS),A14
	SLL	16,A14
	MOVY	A14,A2
	NOP ;A2 [Z,X]

	.IF ARROWSHOWSTOPO
	;FIND TOPO DATA UNDER ARROW
	CALLA	TOPOXZ ;IN:A2 Z:X OUT:A2,A3 TOPOC,TOPOBA
	JRC	ATWOFFEDGE
	MOVE	A2,A3
	JRUC	ATWTDONE
ATWOFFEDGE
	MOVI	99,A3
ATWTDONE
	.ENDIF ;ARROWSHOSTOPO

	;DISPLAY DATA
	CMPI	100,A3
	JRLT	ATWVALOK
	MOVI	100,A14
	MODU	A14,A3
ATWVALOK
	CALLA	SCORESETTIME ;IN:A3 TIME

	SLEEP	4
	JRUC	ATWLOOP

	.ENDIF ;ARROWTHING



	.IF 0 ;NOTIMER
**
** ARENASCORETIMER
**
** JFL 06 OCT 92
**
ARENASCORETIMER
	MOVI	99,A3 			;SECONDS TO COUNT DOWN
	CALLA	SCORESETTIME ;IN:A3 TIME
	MOVI	TIMERSLEEPTBL,A8
ASTMLOOP
	.IF DEBUG
	MOVL	@DEBUGMOVE,A0
	JRZ	ASTMNODEBUG
	
	;GET INPUT
	MOVL	*A0(OCAR),A0
	MOVL	*A0(CDWHEELDIR),A3
	SLL	14,A3		;BIGGER IS MORE RESPONSIVE
	SRL	25,A3
	MOVI	100,A14
	MODU	A14,A3

	;SET NEXT ARENA
	MOVI	DRG,A0
	ORI	8000H,A3
	MOVW	A3,*A0(DRGARENA)
	ANDNI	8000H,A3
	
	;SET TIME
	CALLA	SCORESETTIME ;IN:A3 TIME
	SLEEP	2
	MOVI	TIMERSLEEPTBL,A8
	JRUC	ASTMLOOP
	
ASTMNODEBUG
	.ENDIF ;DEBUG

	;SLEEP FOR SO LONG
	MOVW	*A8+,A0		;SLEEP TIME
	JRNZ	ASTMLOOPNZ
	MOVI	TIMERSLEEPTBL,A8
	MOVW	*A8+,A0
	TLOCKON	Z
ASTMLOOPNZ
	CALLA	PRCSLP
	CALLA	SCORETIMEDOWN ;OUT Z IF TIMED OUT
	JRZ	ARENASCORETIMER
	JRUC	ASTMLOOP


TIMERSLEEPTBL
	.WORD	50
	.WORD	0

	.ENDIF ;NOTIMER

***
*** -----------------------------------------------------------------------
***

**
** ADDSHADOW
**
** IN
**   A8 OBJ
** OUT
**   A0 SHADOBJ
** SC: A0,A2 SCRATCH
**
** JFL 02 OCT 92
**
ADDSHADOW
	.IF DEBUG
	MOVL	*A8(OSHAD),A14
	TLOCKON	NZ ;ALREADY HAS A SHADOW
	.ENDIF ;DEBUG

	;GET A SHADOW OBJ
	CALLA	GETOBJ
	TLOCKON	Z

	;LINK SHADOW TO OBJ
	MOVL	A0,*A8(OSHAD)
	MOVL	A8,*A0(OSHAD)
	
	;LINK SHADOW INTO PLANE
	MOVE	B0,A2			;SAVE
	MOVI	SHADOWLIST,B0
	CALLA	INSPLANE ;IN:A0,B0 OBJ,PLANE
	MOVE	A2,B0			;UNSAVE

	RETS


***
*** -----------------------------------------------------------------------
***



***
*** --------- VECTOR STUFF ------------------------------------------------
***

ATANSHIFT	EQU	5		;FRACTION BITS

**
** COMPTODIRMAGVEC
**
** IN
**  A10 X
**  A11 Z
** OUT
**  A10 DIR
**  A11 MAG
**
** SCRATCHES B0,B1
**
** TURN VECOR COMPONENTS INTO A DIR & MAG
**
** JFL 21 OCT 92
**
COMPTODIRMAGVEC
	MMTM	SP,A0,A1,A2,A3,A4

	;FIND DIR
	CLR	A0		;SX
	CLR	A2		;SY
	MOVE	A10,A1		;DX
	MOVE	A11,A3		;DY
	CALLR	POINT2POINTDIR16 ;IN:A0,A1,A2,A3,A4 SX,DX,SY,DY,SC OUT:A3 DIR

	MOVE	A10,A2		;COPY OF X
	MOVE	A3,A10		;RESULT OF DIR
	
	;FIND APPROX DIST
	ABS	A2
	ABS	A11
	CMP	A2,A11
	JRHS	CTDMVNOFLIP
	SWAP	A2,A11
CTDMVNOFLIP
	SRL	2,A2
	ADD	A2,A11

	MMFM	SP,A0,A1,A2,A3,A4

	.IF 0 ;EXPENSIVE WAY
	MOVE	A10,B0
	MOVE	A11,B1
	CALLR	COMPTODIRVEC ;IN: A10,A11 X,Z OUT: A10,A11 DIR,SC
	MOVE	B0,A14
	MOVE	A10,B0				;DIR
	MOVE	A14,A10
	MOVE	B1,A11
	CALLR	COMPTOMAGVEC ;IN: A10,A11 X,Z OUT: A10,A11 SC,MAG
	MOVE	B0,A10
	.ENDIF ;EXPENSIVE WAY

	RETS

**
** COMPTODIRVEC
**
** IN
**  A10 X
**  A11 Z
** OUT
**  A10 DIR
**  A11 SCRATCH
**
** TURN VECTOR COMPONENTS INTO A DIR
**
** JFL 21 OCT 92
**
COMPTODIRVEC
	NEG	A11			;DONE BY VECTORTOVELS
	JRZ	CTDZZERO
	MOVE	A10,A10
	JRZ	CTDXZERO
	JRNN	CTD1OR4

	;QUADRANT 2 OR 3
	MOVE	A11,A11
	JRNN	CTD2

	;QUADRANT 3
	SLL	ATANSHIFT,A11
	DIVS	A10,A11
	SLL	3,A11			;SIZEOF ATANTBL
	ADDI	ATANTBL,A11
	CMPI	ATANTBLX,A11
	JRLT	CTD3LOOKUP
	
	;SET ANGLE
	MOVI	DIR180+DIR180/2,A10
	JRUC	CTDX

CTD3LOOKUP
	MOVB	*A11,A10
	ADDI	DIR180,A10
	JRUC	CTDX

CTDXZERO
	;X COMPONENT IS ZERO, ATAN IS UNDEFINED, ANGLE IS EITHER UP OR DOWN
	MOVE	A11,A11
	JRNN	CTDZUP

	;ANGLE IS DOWN
	MOVI	DIR180+DIR180/2,A10
	JRUC	CTDX
CTDZUP
	;ANGLE IS UP
	MOVI	DIR180/2,A10
	JRUC	CTDX

CTDZZERO
	;Z COMPONENT IS ZERO, ANGLE IS EITHER RIGHT OR LEFT
	MOVE	A10,A10
	JRNN	CTDXRIGHT
	
	;ANGLE IS LEFT
	MOVI	DIR180,A10
	JRUC	CTDX

CTDXRIGHT
	;ANGLE IS RIGHT
	CLR	A10
	JRUC	CTDX
CTD2
	;QUADRANT2
	NEG	A10
	SLL	ATANSHIFT,A11
	DIVS	A10,A11
	SLL	3,A11			;SIZEOF ATANTBL
	ADDI	ATANTBL,A11
	CMPI	ATANTBLX,A11
	JRLT	CTD2LOOKUP

	;SET ANGLE
	MOVI	DIR180/2,A10
	JRUC	CTDX

CTD2LOOKUP
	MOVI	DIR180,A10
	MOVB	*A11,A14
	SUB	A14,A10
	JRUC	CTDX
CTD1OR4
	MOVE	A11,A11
	JRNN	CTD1
	
	;QUADRANT 4
	NEG	A11
	SLL	ATANSHIFT,A11
	DIVS	A10,A11
	SLL	3,A11			;SIZEOF ATANTBL
	ADDI	ATANTBL,A11
	CMPI	ATANTBLX,A11
	JRLT	CTD4LOOKUP
	
	;SET ANGLE
	MOVI	DIR180+DIR180/2,A10
	JRUC	CTDX
	
CTD4LOOKUP
	MOVI	DIR180*2,A10
	MOVB	*A11,A14
	SUB	A14,A10
	JRUC	CTDX

CTD1
	;QUADRANT 1
	SLL	ATANSHIFT,A11
	DIVS	A10,A11
	SLL	3,A11			;SIZEOF ATANTBL
	ADDI	ATANTBL,A11
	CMPI	ATANTBLX,A11
	JRLT	CTD1LOOKUP
	
	;SET ANGLE
	MOVI	DIR180/2,A10
	JRUC	CTDX
	
CTD1LOOKUP
	MOVB	*A11,A10
	
CTDX
	RETS

**
** COMPTOMAGVEC
**
** TURN VECTOR COMPONENTS INTO A POSITIVE MAGNITUDE
**
** IN
**  A10 X
**  A11	Z
** OUT
**  A10 SCRATCHED
**  A11 MAG
**
** JFL 15 OCT 92
** JFL 21 OCT 92
**
COMPTOMAGVEC
	MOVE	A10,A10
	JRZ	CTMVUSEZ
	MOVE	A11,A11
	JRZ	CTMVUSEX

	ABS	A10
	ABS	A11
	MOVE	A10,A3
	MPYU	A3,A3

	CMP	A10,A11
	JREQ	CTMVEQ

	MPYU	A11,A11
	ADD	A11,A3

CTMVSQ
	CALLA	SQROOT ;IN: A2,A3 SC,NUM OUT: A3 SQROOT(NUM)
	MOVE	A3,A11
	JRUC	CTMVX
CTMVEQ
	ADD	A3,A3
	JRUC	CTMVSQ
CTMVUSEX
	MOVE	A10,A11
CTMVUSEZ
	ABS	A11
CTMVX
	RETS

**
** CLEARVEC
** CLEARINPVEC
**
** IN
**   A2-A3 SCRATCH
**   A7 CD
**
** JFL 23 DEC 92
**
CLEARVEC
	CLR	A14
	MOVE	A7,A2
	ADDI	CDCLEARVEC,A2
	MOVK	CDCLEARVECCOUNT,A3
CVLOOP
	MOVL	A14,*A2+
	DSJ	A3,CVLOOP
      	RETS

CLEARINPVEC
	CLR	A14
	MOVL	A14,*A7(CDDRIVEDIR)	;CDDRIVEMAG TOO
	RETS


**
** ADDTIREVEC
**
** IN
**   A2 SC
**   A7 CD
**  A10 DIR (UNSCRATCHED)
**  A11 MAG (UNSCRATCHED)
**
** JFL 23 DEC 92
**
ADDTIREVEC
	MMTM	SP,A10,A11
	CALLR	VECTORTOVELS ;IN:A10,A11 DIR,MAG OUT:A10,A11 X,Z 
	MOVW	*A7(CDTOTX),A14
	ADD	A10,A14
	MOVW	A14,*A7(CDTOTX)
	MOVW	*A7(CDTOTZ),A14
	ADD	A11,A14
	MOVW	A14,*A7(CDTOTZ)
	MMFM	SP,A10,A11
	RETS

**
** VECTORTOVELS
**
** NOTE: A2 ASSUMED NOT BROKEN IN THIS ROUTINE
**
** IN
**  A10 DIR UHB (SIGN IS LOPPED OFF)
**  A11 VEL SHW
** OUT
**  A10 XVEL SHL
**  A11 ZVEL SHL
**
** JFL 24 JUL 92
** JFL 11 AUG 92
**
VECTORTOVELS
	MMTM	SP,A1
		  
	;LOP AWAY
	SLL	24,A10
	SRL	24,A10

	.IF DEBUG
	CMPI	32767,A11
	TLOCKON	GT
	CMPI	-32768,A11
	TLOCKON	LT
	.ENDIF ;DEBUG

	;SIN & COS FOR THIS DIRECTION
	SLL	SL_DIR2TRIG,A10	
	ADDI	SINCOS,A10
	MOVL	*A10,A10			;COS:SIN

	;BREAK MAG INTO COMPONENTS
	MOVE	A10,A14				;COS:SIN
	SRA	16,A14 				;COS
	SEXT	A10,W				;SIN
	MOVE	A11,A1				;COPY OF MAG

	;DO MULS
	SETF	16,1,1
	MPYS	A14,A1	 			
	MPYS	A10,A11
	SETF	32,1,1

	MOVE	A1,A10
	
	SRA	TRIGSHIFT,A10
	SRA	TRIGSHIFT,A11
	NEG	A11				;NEG IS INTO SCREEN

	MMFM	SP,A1
	RETS


***
*** ----------------------------------------------------------------------
***

**
** ZAPOBJPROC
**
** IN
**   A8 OBJ
**
** JFL 08 FEB 93
**
ZAPOBJPROC
	CALLA	ZAP_OBJ ;IN:A8 OBJ
	DIE


EXPLOSIONZOFF	EQU	-10
KRYVEL		EQU	600H		;YVEL
KRYVELBITS	EQU	14		;BITS FOR MPYU

**
** KILLCAR
**
** IN
**   A0 CAR OBJ
**   A2-A3 SCRATCH
** OUT
**   B0 NZ IF CAR STILL AROUND
**
** JFL 03 SEP 92
** JFL 25 SEP 92; NEW SCRATCH
** JFL 29 SEP 92; NEW SCRATCH
** JFL 05 OCT 92; M_CDFDEAD
** JFL 13 OCT 92; VEC
** JFL 27 OCT 92; COUNT CARS ALIVE
** JFL 02 NOV 92; KILL DEAD CPU CARS
** JFL 06 NOV 92
** JFL 18 JAN 93; OXYZVEL ZEROED
** JFL 25 JAN 93
** JFL 27 JAN 93; USE CDDAMAGE FOR DEATH FLAG
** JFL 04 FEB 93
** JFL 19 FEB 93
** JFL 21 FEB 93; DROP UNUSED WEAPONS
** JFL 20 MAR 93; DONT DESTROY KILLED CAR
** JFL 14 APR 93
**
KILLCAR
	MMTM	SP,A0,A1,A5,A6,A7,A8,A9,A10,A11

	MOVE	A0,A8
	MOVL	*A0(OCAR),A7

	;SET DEAD FLAG
	SETF	1,0,0
	MOVK	1,A14
	MOVE	A14,*A7(CDFLAGS+B_CDFDEAD),0
	SETF	16,1,0

	;
	;ZERO DAMAGE BAR
	;THIS ALSO SIGNALS CAR IS DEAD
	;

	;SET DAMAGE BAR
	MOVW	*A7(CDDAMAGE),A3
	JRZ	KCX			;CAR ALREADY DEAD
	CLR	A3
	MOVW	A3,*A7(CDDAMAGE)
	MOVE	A0,A2
	CALLA	SCORESETDAMAGE ;IN: A2,A3 OBJ,DAMAGE
	
	;FLASH AREA
	MOVK	SPALRED,A3
	CALLR	FLASHPLBACKDEATH ;IN A0,A3 OBJ,COLOR

	;
	;LAUNCH LEFT OVER WEAPONS
	;
	MOVW	*A7(CDMISSILES),A6
	JRZ	KCNOMISL

	;ZERO MISL COUNT
	CLR	A3
	MOVE	A8,A2
	CALLA	SCORESETMISL ;IN: A2,A3 OBJ,COUNT

	;CREATE ANIM
	MOVI	OBJINITDEADMISL,A5
	CALLA	CREATE_OBJ
	JRZ	KCNOMISL
	MOVW	A6,*A0(OAOLVAL16)	;NUMBER OF MISSILES
	MOVI	ASDEADMISL,A14
	MOVL	A14,*A0(ANIMFRM)
	MOVL	A14,*A0(ANIMSCR)
	MOVK	1,A14
	MOVW	A14,*A0(ANIMSLPB)
	CALLA	INSANI
	MOVW	*A8(OXPOS),*A0(OXPOS)
	MOVW	*A8(OZPOS),*A0(OZPOS)

	;MAKE SHADOW & INS OBJ
	MOVE	A8,A6		;SAVE
	MOVE	A0,A9		;SAVE

	MOVE	A0,A8
	MOVL	@OBJINITDEADMISL,A2 ;PULL IHDR FROM ABOVE
	CALLA	MAKESHADMULTI ;IN A2,A3-A5,A8 SHADIMG,SC,OBJ OUT:A0 SHADOBJ
	CALLR	INSERT_OBJ ;IN:A8

	MOVE	A6,A8		;UNSAVE
	MOVE	A9,A0		;UNSAVE

KCNOMISL


	;
	;ONE LESS PLAYER OR DRONE
	;

	;ONE LESS CAR ALIVE
	MOVI	DRG,A2

	;CHECK IF ITS A DRONE OR PLAYER
	MOVB	*A7(CDFLAGS+B_CDFDRONE-7),A14
	JRN	KCONELESSDRONE

	;ONE LESS PLAYER ALIVE
	MOVW	*A2(DRGALIVEPLAYERS),A14
	DEC	A14
	TLOCKON	N
	MOVW	A14,*A2(DRGALIVEPLAYERS)

	;CHECK IF THERE ARE 2 OR MORE PLAYERS LEFT
	;SUBK	1,A14
	JRP	KCONELESSCAR

	;FIGURE WINNER
	CALLR	LASTCARALIVEWINS
	JRUC	KCNOTLAST

KCONELESSDRONE
	;ONE LESS DRONE ALIVE
	MOVW	*A2(DRGALIVEDRONES),A14
	DEC	A14
	TLOCKON	N
	MOVW	A14,*A2(DRGALIVEDRONES)

KCONELESSCAR
	;ONE LESS CAR ALIVE PERIOD
	MOVW	*A2(DRGALIVE),A14
	DEC	A14
	TLOCKON	N
	MOVW	A14,*A2(DRGALIVE)

	;CHECK IF THIS DRONE WON -- SHOULD BE IN ATTRACT MODE
	SUBK	1,A14
	JRP	KCNOTLAST

	;FIGURE WINNER
	CALLR	LASTCARALIVEWINS
KCNOTLAST

	;
	;ROADKILL SPEECH
	;

	;SPAWN ROADKILLED SOUND FOR LATER
	MOVE	A7,A2			;SAVE
	
	MOVW	*A8(OID),A9
	CREATE	PID_DRAGONE,AFTERCARDIES ;IN:A9 OID
	MOVI	ONESECOND*3,A14		;SLEEP TIME
	MOVW	A14,*A0(PTIME)

	MOVE	A2,A7			;RESTORE

	;
	;LAUNCH CAR DEATH ANIM
	;

	;STOP CAR FROM MOVING
	CLR	A14
	MOVL	A14,*A8(OXVEL)
	MOVL	A14,*A8(OYVEL)
	MOVL	A14,*A8(OZVEL)

	;TOSS ALL REMAINING PARTS IN THE AIR
	CLR	A3
	MOVE	A3,A2
	DEC	A2
	MOVE	A8,A0		;SAVE (& USE)
	CALLA	CARLOSEPARTS ;IN:A0,A2,A3,A7 CAR,AREA,DAMAGE,CD 
			     ;OUT:B1 1=PARTSLOST SC:A1,A3-A6,A8-A11
	MOVE	A0,A8	  	;RESTORE

	.IF KILLEXPLODE ;EXPLODE ON DEATH

	CALLR	HURLPLAYER ;IN:A7,A8 CD,OBJ
	CLR	B0		;SIGNAL CAR HAS BEEN ZAPPED

	.ELSE ;!EXPLODE ON DEATH

	;
	;CHANGE IMAGE FOR CAR
	;

	MOVW	*A7(CDDEADPAL),A2
	CALLA	SETCARPAL ;IN:A2,A8 PAL,OBJ SC:A1-A3

	;
	;ADD SOME DEATHLY FIRE ANIM THING
	;
	MOVI	OBJINITCARFIRE,A5
	CALLA	CREATE_OBJ
	JRZ	KCDNOANI
	MOVI	ASCARFIRE,A14
	MOVL	A14,*A0(ANIMFRM)
	MOVL	A14,*A0(ANIMSCR)
	MOVK	1,A14
	MOVW	A14,*A0(ANIMSLPB)
	CALLA	INSANI ;IN:A0

	;ADD IT AS A MULTIPART OF CAR -- AS LAST OBJ
	MOVE	A8,A1		;HEAD
	MOVE	A8,A14		;TMP
KCDADDLOOP
	MOVE	A14,A1
	MOVL	*A1(OPARTS),A14
	JRNZ	KCDADDLOOP

	;LINK IN
	MOVL	A8,*A0(OPART1)
	MOVL	A0,*A1(OPARTS)

	;SET POS
	MOVW	*A8(OXPOS),*A0(OXPOS)
	MOVW	*A8(OYPOS),*A0(OYPOS)
	MOVW	*A8(OZPOS),A2
	MOVI	EXPLOSIONZOFF,A14
	;MOVW	A14,*A0(OZOFF)
	SUB	A14,A2
	MOVW	A2,*A0(OZPOS)
	CALLR	INSOBJ ;IN:A0

	MOVK	1,B0		;SIGNAL CAR HASNT BEEN ZAPPED

KCDNOANI

	.ENDIF ;!EXPLODE ON DEATH
	

	.IF KILLRUNNER

	;CREATE ANIM
	MOVI	OBJINITRUNNER,A5
	CALLA	CREATE_OBJ
	JRZ	KCNORUNNER

	;USE SAME OCAR
	MOVL	A7,*A0(OCAR)

	;SET OID -- USE PLAYER ID FROM CAR OBJ
	MOVW	*A8(OID),A14
	SLL	SL_POID,A14
	SRL	SR_POID,A14
	SLL	SR_POID-SL_POID,A14
	MOVW	*A0(OID),A3
	OR	A3,A14
	MOVW	A14,*A0(OID)
	
	;SET X & Z
	MOVW	*A8(OXPOS),*A0(OXPOS)
	MOVW	*A8(OZPOS),*A0(OZPOS)
	CALLR	INSOBJ ;IN:A0

	;SET Y VEL & ACC
	MOVI	KRYVEL,A1
	MOVW	*A8(OSCALEMUL),A3
	SETF	KRYVELBITS,0,1
	MPYU	A3,A1
	SETF	32,1,1
	NEG	A1
	MOVL	A1,*A0(OYVEL)
	NEG	A1
	SRL	7,A1
	MOVL	A1,*A0(OYACC)

	;CREATE THE SHADOW FOR THE RUNNER
	MOVE	A0,A8
	CALLR	ADDSHADOW ;IN:A0,A2,A8 SC,OBJ

	;CREATE THE RUNNER
	MOVE	A7,A9
	CREATE	PID_DRAGONE,RUNNERPROC
	MOVL	A0,*A8(OPLINK)


KCNORUNNER
	.ENDIF ;KILLRUNNER

KCX
	MMFM	SP,A0,A1,A5,A6,A7,A8,A9,A10,A11
	RETS


**
** HURLPLAYER
**
** IN
**   A7 CD
**   A8	CAR
**
** JFL 20 MAR 93
**
HURLPLAYER
	MMTM	SP,A0,A1,A7

	;FLYING OUT OF CAR SOUND
	MOVW	*A7(CDDRIVERID),A14
	ADDI	SNDDEATHDRONE,A14
	CALLA	MAKESND ;IN:A14 SNDID

	;CREATE ANIM
	MOVI	OBJINITDEATHBOOM,A5
	CALLA	CREATE_OBJ
	JRZ	HPNOANI
	MOVI	ASDEATHBOOM,A14
	MOVL	A14,*A0(ANIMFRM)
	MOVL	A14,*A0(ANIMSCR)
	MOVK	1,A14
	MOVW	A14,*A0(ANIMSLPB)
	CALLA	INSANI ;IN:A0
	MOVW	*A8(OXPOS),*A0(OXPOS)
	MOVW	*A8(OZPOS),*A0(OZPOS)
	CALLR	INSOBJ ;IN:A0
	MOVW	*A7(CDDRIVERID),*A0(ODEATHID)
HPNOANI

	;
	;SET CAR OBJ TO BE ZAPPED ASAP
	;
	CREATE	PID_DRAGONE,ZAPOBJPROC ;IN:A8 OBJ

	MMFM	SP,A0,A1,A7
	RETS

**
** AFTERCARDIES -- PROC
**
** IN
**   A9 OID OF CAR THAT DIES
**
** JFL 22 NOV 92
**
AFTERCARDIES
	SLL	SL_POID,A9
	SRL	SR_POID,A9
	JRZ	ACDX			;NO PLAYER NUMBER
	ADDI	SNDROADKILL1-1,A9
	MOVE	A9,A14
	CALLA	MAKESND ;IN:A14 SNDID
ACDX
	DIE

**
** LASTCARALIVEWINS
** FIND LAST CAR ALIVE AND MAKE IT THE WINNER
**
** JFL 27 OCT 92 
** JFL 08 FEB 93
**
LASTCARALIVEWINS
	MOVL	@SUPPLSTS+SUPL_CAR,A2
	JRZ	LCAWX

LCAWLOOP
	;CHECK IF THIS IS DEAD
	MOVL	*A2(OCAR),A3
	MOVW	*A3(CDDAMAGE),A14
	JRNZ	LCAWINNER

LCAWNEXT
	;CHECK NEXT CAR
	MOVL	*A2(OSLINK),A2
	JRNZ	LCAWLOOP

	;NO CARS ALIVE
	MOVK	1,A2

LCAWINNER
	MOVL	A2,@WINNER
LCAWX
	RETS

***
*** ------------------------------- INPUT SUBROUTINES ---------------------
***

**
** CHANGECARSPEED
**
** IN
**   A0	OBJ
**   A2 AMOUNT TO SLOWDOWN
**   A7 CD
**
** JFL 23 OCT 92
** JFL 23 DEC 92
**
CHANGECARSPEED
	MOVW	*A7(CDDRIVEMAG),A3		;V
	MOVE	A3,A14
	NEG	A2
	SRL	A2,A14
	MOVE	A3,A3
	JRN	CCSNEG

	;CAR IS MOVING FWD
	SUB	A14,A3
	JRNN	CCSOK
	CLR	A3
	JRUC	CCSOK
CCSNEG
	ADD	A14,A3
	JRN	CCSOK
	CLR	A3

CCSOK
	MOVW	A3,*A7(CDDRIVEMAG)		;V
	RETS


**
** SETCARDIR
**
** IN
**   A0 OBJ
**   A2 SCRATCH
**   A7 CD
**  A10 DIR
**
** JFL 21 OCT 92
** JFL 27 OCT 92; SIMPLIFIED
** JFL 23 DEC 92; CDSETDIR
**
SETCARDIR
	INC	A10
	MOVW	A10,*A7(CDSETDIR)
	DEC	A10
	RETS

**
** ALTINPHANDLER
**
** REPLACE CURRENT INP HANDLER
**
**  A1 NEW INP HANDLER
**  A2 CDFLAGS
**  A3 CD
**
** JFL 24 JUL 92
** JFL 25 JUL 92; NEW SCRATCH
**
ALTINPHANDLER
	ORI	M_CDFALTINP,A2
	MOVW	A2,*A3(CDFLAGS)
	MOVL	A1,*A3(CDINPHANDLER)
	RETS

**
** NORMINPHANDLER
** REVERT BACK TO NORMAL INPUT HANDLER
**
** IN
**  A7 CAR DATA
**  A8 CAR OBJ
**
** JFL 24 JUL 92
** JFL 25 SEP 92; NEW SCRATCH
** JFL 28 SEP 92; NEW SCRATCH
** JFL 07 OCT 92; NEED OBJ PASSED IN
** JFL 13 OCT 92; VEC
**
NORMINPHANDLER
	MOVL	*A7(CDINPNORM),*A7(CDINPHANDLER)

	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A7(CDFLAGS+B_CDFALTINP),0
	SETF	16,1,0

	CALLA	ENDMOVE ;IN:A7,A8 CD,OBJ

	RETS


**
** CARINPSTEERING
**
** IN
**   A0 INPUT DATA BLOCK
**   A1-A3 SCRATCH
**   A7 CD
** OUT
**  A10 DIR
**
** JFL 28 SEP 92
** JFL 13 OCT 92; VEC
** JFL 03 DEC 92; REDONE W/STEERTBL
** JFL 23 DEC 92; CDSETDIR
**
CARINPSTEERING
	;DO WE NEED TO SET DIR
	MOVW	*A7(CDSETDIR),A14
	JRZ	CISNOSET

	;SET THE DIR
	DEC	A14
	MOVW	A14,*A7(CDWHEELOFFSET)		;SET DIR
	CLR	A10
	MOVW	A10,*A7(CDWHEELDIR)		;RESET ACCUMULATED AMOUNT
	MOVW	A10,*A7(CDSETDIR)		;CLEAR FLAG
	JRUC	CISX

CISNOSET
	;WHEEL RESPONSE
	MOVL	*A7(CDFEEL),A1
	MOVW	*A1(FWHEELRESPONSE),A3

	;GET STEERING WHEEL -- PLAY WITH RESPONSE
	MOVW	*A0(INPWHEELMAG),A2		;MAGNITUDE
	JRZ	CISGOTMAG
	JRN	CISWRNEG

	;ADD IN STEERING RESPONSE
	ADD	A3,A2
	JRUC	CISGOTMAG

CISWRNEG
	;ADD IN STEERING RESPONSE
	SUB	A3,A2
	
CISGOTMAG
	;ACCUMULATE MAG TO GET DIR
	MOVW	*A7(CDWHEELDIR),A10		;CUMULATIVE DIRECTION
	ADD	A2,A10
	
	;HANDLE SLIP
	MOVI	ARENASLIP,B8
	EXGPC	B8 ;IN:A0,A1,A2,A3,A7,A8,A10 INP,FEEL,MAG,SC,CD,OBJ,NEWDIR

	;TURN ACCUMULATED WHEEL DIR INTO A DIRECTION 0..FF
	MOVW	A10,*A7(CDWHEELDIR)
	SLL	SL_WHLRESPONSE,A10
	SRL	SR_WHLDIR+3,A10
	SLL	3,A10

CISX
	RETS

**
** CARINPTIMEOUT
**
** IN
**   A7 CD
**   A8 OBJ
** 
** JFL 28 SEP 92
** JFL 07 OCT 92
**	
CARINPTIMEOUT

	;SEE IF WE HAVE TIMED OUT
	MOVW	*A7(CDALTTIME),A14
	JRZ	CITOX			;FOREVER
	DEC	A14
	MOVW	A14,*A7(CDALTTIME)
	JRP	CITOX
	CALLR	NORMINPHANDLER ;IN A7,A8 CD,OBJ
	CALLA	CCABORT ;IN:A8,A8 CD,OBJ
CITOX
	RETS

**
** SPINCARINPSUB
**
** IN
**  A7 CD
**
** JFL 18 AUG 92
** JFL 25 SEP 92
** JFL 15 NOV 92; COMBINED SPIN & DECAY
** JFL 16 NOV 92; FRACTIONAL SPIN/DECAY
**
SPINCARINPSUB
	MOVW	*A7(CDSPIN),A14
	JRZ	SCISX
	MOVE	A14,A3

	;ADJUST FOR SPIN
	MOVB	*A7(CDWHEELOFFSET),A2
	SRA	SPINFRACSHIFT,A14
	ADD	A14,A2
	MOVW	A2,*A7(CDWHEELOFFSET)

	;DECAY THE SPIN
	MOVW	*A7(CDSPINDROP),A2
	MOVE	A3,A3
	JRN	SCISDROPNEG
	SUB	A2,A3
	JRP	SCISSTORE	
SCISCLR
	CLR	A3
	JRUC	SCISSTORE

SCISDROPNEG
	ADD	A2,A3
	JRP	SCISCLR	

SCISSTORE
	MOVW	A3,*A7(CDSPIN)

SCISX
	RETS

**
** CAR INPUT HANDLERS ---------------------------------------------------
**

**
** PLAYERCARINP
** NORMAL INP HANDLER -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 24 JUL 92
** JFL 11 AUG 92
** JFL 13 AUG 92
** JFL 25 SEP 92; NEW SCRATCH
** JFL 28 SEP 92; NEW SCRATCH
**
PLAYERCARINP
	CALLR	SPINCARINPSUB ;IN: A7 CD

	;USE INPUT BLOCK FOR THIS PLAYER
	MOVL	*A7(CDINPDATA),A0 	;INPUT DATA
	CALLR	CARINPSTEERING ;IN: A0,A1,A2,A7 INPDATA,SC,SC,CD OUT:A10 DIR

	;GET PEDAL
	MOVW	*A0(INPPEDAL),A11
	
	.IF SHOWSTATES
	MOVW	*A0(INPB1),A2
	SLL	24,A2
	SRL	24+1,A2
	MOVW	*A7(CDB1),A14
	CMP	A14,A2
	JREQ	PCISKIPSS1
	MOVW	A2,*A7(CDB1)
	MOVW	*A8(OSTATE),A14
	DEC	A14
	MOVW	A14,*A8(OSTATE)
	JRP	PCISKIPSS1
	CLR	A14
	MOVW	A14,*A8(OSTATE)
PCISKIPSS1
	MOVW	*A0(INPB2),A2
	SLL	24,A2
	SRL	24+1,A2
	MOVW	*A7(CDB2),A14
	CMP	A14,A2
	JREQ	PCISKIPSS2
	MOVW	A2,*A7(CDB2)
	MOVW	*A8(OSTATE),A14
	INC	A14
	MOVW	A14,*A8(OSTATE)
	CMPI	STATE_LAST,A14
	JRLE	PCISKIPSS2
	MOVI	STATE_LAST,A14
	MOVW	A14,*A8(OSTATE)
PCISKIPSS2
	.ENDIF ;SHOWSTATES

	JRUC	CARINPPEDSUB


**
** CRAZYCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 24 JUL 92
** JFL 07 AUG 92
** JFL 03 SEP 92; ALTTIME ZERO CASE
**
CRAZYCARINP
	MOVW	@WAVEIRQS,A14
	SLL	29,A14
	SRL	29-5,A14
	ADDI	CRAZYCARINPTBL,A14
	.IF DEBUG
	CMPI	CRAZYCARINPTBLX,A14
	TLOCKON	HS
	.ENDIF ;DEBUG
	MOVL	*A14,A14
	JUMP	A14

CRAZYCARINPTBL
	.LONG	NOCONTROLCARINP
	.LONG	STEERONLYCARINP
	.LONG	PEDALONLYCARINP
	.LONG	NOCONTROLCARINP
	.LONG	NOCONTROLCARINP
	.LONG	NOCONTROLCARINP
	.LONG	NOCONTROLCARINP
	.LONG	NOCONTROLCARINP
CRAZYCARINPTBLX

**
** DEADCARINP
** NOCONTROLCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 24 JUL 92
** JFL 07 AUG 92
** JFL 03 SEP 92; ALTTIME ZERO CASE
**
DEADCARINP
NOCONTROLCARINP
	;LOCK POSITION
	MOVB	*A7(CDLASTDIR),A10
	MOVB	*A7(CDWHEELOFFSET),A14
	SUB	A14,A10

	;SPIN -- CALL AFTER LOCK AND ALLOW SPIN TO AFFECT DIR
	CALLR	SPINCARINPSUB ;IN: A7 CD
     	
	;NO VEL
	CLR	A11		   

	CALLR	CARINPTIMEOUT ;IN: A7,A8 CD,OBJ

	JRUC	CARINPPEDSUB	

**
** JUMPCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 17 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
**
JUMPCARINP

	CALLR	SPINCARINPSUB ;IN: A7 CD

	;USE INPUT BLOCK FOR THIS PLAYER
	MOVL	*A7(CDINPDATA),A0		;INPUT DATA
	CALLR	CARINPSTEERING ;IN: A0,A1,A2,A7 INPDATA,SC,SC,CD OUT:A10 DIR

	;MAINTAIN VEL
	MOVW	*A0(INPPEDAL),A11

	CALLR	CARINPTIMEOUT ;IN: A7,A8 CD,OBJ
	JRUC	CARINPFIXVELSUB	

**
** STEERONLYCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 17 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
** JFL 20 OCT 92
**
STEERONLYCARINP

	CALLR	SPINCARINPSUB ;IN: A7 CD

	;USE INPUT BLOCK FOR THIS PLAYER
	MOVL	*A7(CDINPDATA),A0		;INPUT DATA
	CALLR	CARINPSTEERING ;IN: A0,A1,A2,A7 INPDATA,SC,SC,CD OUT:A10 DIR

	;MAINTAIN VEL
	MOVW	*A7(CDPEDAL),A11
	ABS	A11

	CALLR	CARINPTIMEOUT ;IN: A7,A8 CD,OBJ
	JRUC	CARINPFIXVELSUB	


**
** PEDALONLYCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 17 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
** JFL 20 OCT 92
**
PEDALONLYCARINP

	CALLR	SPINCARINPSUB ;IN: A7 CD

	;LOCK POSITION
	MOVB	*A7(CDLASTDIR),A10
	MOVB	*A7(CDWHEELOFFSET),A14
	SUB	A14,A10

	;MAINTAIN VEL
	MOVL	*A7(CDINPDATA),A0		;INPUT DATA
	MOVW	*A0(INPPEDAL),A11

	CALLR	CARINPTIMEOUT ;IN: A7,A8 CD,OBJ
	JRUC	CARINPFIXVELSUB	

**
** DEMONCARINP
** ALTERNATE INP HANDLER -- MUST REMOVE ITSELF -- USE WITH CARINPSUB
**
** IN
**   A0 SCRATCH
**   A1 SCRATCH
**   A7 CD
**   A8 CAR OBJ
**
** OUT
**  A10 DESIRED DIR
**  A11 PEDAL -127 .. 127 (NEVER ZERO)
**
** JFL 24 JUL 92
** JFL 07 AUG 92
** JFL 03 SEP 92; ALTTIME ZERO CASE
** JFL 17 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
**
DEMONCARINP
	CALLR	SPINCARINPSUB ;IN: A7 CD

	;USE INPUT BLOCK FOR THIS PLAYER
	MOVL	*A7(CDINPDATA),A0 	;INPUT DATA
	CALLR	CARINPSTEERING ;IN: A0,A1,A2,A7 INPDATA,SC,SC,CD OUT:A10 DIR

	;GET PEDAL
	;MOVW	*A0(INPPEDAL),A11
	CLR	A11

	CALLR	CARINPTIMEOUT ;IN: A7,A8 CD,OBJ
	JRUC	CARINPPEDSUB	



***
*** CAR INPUT SUBS -------------------------------------------------------
***

**
** CARINPPEDSUB
** 
** IN
**   A7 CD
**   A8 CAR
**  A10 DIR
**  A11 VEL
**
** JFL 16 AUG 92
** JFL 10 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
** JFL 04 DEC 92
** JFL 22 DEC 92; TURBOBOOST
**
CARINPPEDSUB
	;ADD IN TURBO
	MOVW	*A7(CDTURBOBOOST),A14
	ADD	A14,A11

	;IF PEDAL IS NOT DOWN VERY FAR TREAT IT LIKE A BRAKE
	SUBK	PEDALBRAKE,A11
	JRP	CIPSNOTBRAKING
	CLR	A11		;BRAKING
	JRUC	CIPSX

CIPSNOTBRAKING

	;HANDLE REVERSE/FORWARD
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	CIPSX
	NEG	A11		;REVERSE
CIPSX
	JRUC	CARINPSUB	

**
** CARINPFIXVELSUB
** 
** IN
**  A7 CD
**  A8 CAR OBJ
** A10 DIR
** A11 VEL
**
** JFL 16 AUG 92
** JFL 10 SEP 92
** JFL 11 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
**
CARINPFIXVELSUB

	;HANDLE REVERSE/FORWARD
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	CIFVOK
	NEG	A11			;REV
CIFVOK
	JRUC	CARINPSUB	

**
** CARINPSUB
** SUBROUTINE -- ASSUMES PROPER SETUP
**
** IN
**   A7 CD
**   A8 CAR
**  A10 DESIRED DIR
**  A11 PEDAL 0==BRAKES,1..127 FWD VEL,-1..-127 REV VEL
**
** RETURNS
** A10 DIR
** A11 VEL INT16
**
** JFL 29 JUL 92
** JFL 11 AUG 92
** JFL 13 AUG 92; REDONE
** JFL 14 AUG 92; V = V + (PED*Pk - V)*ACCk
** JFL 21 AUG 92; REVERSE PEEL-OUT SND, REV CRASH SND FIX
** JFL 23 SEP 92; SPEED ADJ FOR TILT
** JFL 28 SEP 92; NEW SCRATCH
** JFL 07 OCT 92
** JFL 13 OCT 92; VEC
**
CARINPSUB
	;  A0 HANDLING DATA
	;  A1
	;  A2 SCRATCH
	;  A3 SCRATCH
	;  A4 LAST VEL
	;  A5 LAST PED
	;  A6 CDFLAGS
	;  A7 CD
	;  A8 OBJ
	;  A9
	; A10 DIR
	; A11 VEL (PED)

	MOVW	@HOLDGAME,A14
	JRZ	CISNHOLD
	CLR	A11
CISNHOLD

	MOVW	*A7(CDFLAGS),A6
	MOVL	*A7(CDFEEL),A0

	;OFFSET USER DESIRED (OR CURRENT WHEEL) DIRECTION
	MOVB	*A7(CDWHEELOFFSET),A14
	SLL	24,A14			;THESE MAY NOT BE NECESSARY..
	SRL	24,A14
	ADD	A14,A10
	SLL	24,A10
	SRL	24,A10
	
   	;GET OLD VEL, OLD PEDAL, STORE NEW PEDAL
	MOVW	*A7(CDDRIVEMAG),A4	;V
	MOVW	*A7(CDPEDAL),A5
	MOVW	A11,*A7(CDPEDAL)

	;CHECK FOR BRAKES
	MOVE	A11,A11
	JRNE	CISACCDOWN
	
	;BRAKES ON
	MOVE	A5,A5
	JRZ	CISBNOTFIRST		;BRAKES HAVE BEEN ON

	;DONT SCREETCH WHEN STOPPING FROM GEAR ZERO
	MOVW	*A7(CDGEAR),A14
	JRZ	CISBNOTFIRST		;IN GEAR ZERO, DONT SCREETCH

	MOVW	*A7(CDINPNUM),A14
	ADDI	SNDBRAKE1,A14
	CALLA	ARENASND ;IN:A14 SNDID

CISBNOTFIRST

	;BUMP UP PEDAL-NOT-PUSHED COUNT
	MOVW	*A7(CDNOPEDAL),A14
	INC	A14
	MOVW	A14,*A7(CDNOPEDAL)

	;APPLY BRAKES
	MOVE	A4,A14		       	;SLOW DOWN BY 1/8 VEL
	SRA	3,A14
	JRZ	CISBSTOP
	INC	A14			;CHECK FOR NEG STOP
	JRZ	CISBSTOP
	DEC	A14			;UNDO CHECK (MAYNOTBENECESSARY)
	SUB	A14,A4
	JRUC	CISVOK
CISBSTOP
	CLR	A4
	MOVW	A4,*A7(CDGEAR)			;RESET GEAR
	JRUC	CISVOK
	
CISACCDOWN
	;CHECK FROM LAST TIME THROUGH -- USER CANT PRESS PEDAL FAST ENOUGH
	BTST	B_CDFCHECKPEEL,A6
	JRZ	CISADNCP
	
	;IF AT ANY TIME WHILE IN GEAR ZERO, PEDAL IS PRESSED REALLY FAR...
	MOVW	*A7(CDGEAR),A14
	JRZ	CISCHKPEEL
	ANDNI	M_CDFCHECKPEEL,A6
	MOVW	A6,*A7(CDFLAGS)
  	JRUC	CISADNCP

CISCHKPEEL
	;CHECK FOR CHANGE REQUIRED
	MOVE	A11,A14
	ABS	A14
	CMPI	PEDALPEEL,A14
	JRLT	CISADNCP
	
	MOVE	A11,A3
	CALLA	DOPEELOUT ;IN: A1,A2,A3,A8 SC,SC,VEL,OBJ
	
CISADNCP
	;IF PLAYER IS LAZY, SET THE CHECK PEEL FLAG
	MOVE	A5,A5				;A5 IS LAST PEDAL VALUE
	JRNZ	CISADAGAIN
	MOVW	*A7(CDNOPEDAL),A14
	SRL	4,A14				;LAZY FOR OVER 32 FRAMES?
	JRZ	CISADNOPEEL
	ORI	M_CDFCHECKPEEL,A6		;YES, SET CHECK PEEL FLAG
	MOVW	A6,*A7(CDFLAGS)

CISADNOPEEL
	MOVW	A5,*A7(CDNOPEDAL)		;RESET LAZY-PLAYER THING
CISADAGAIN
	CMPXY	A11,A4				;CHECK SIGNS OF ACC & VEL
	JRYEQ	CISNOTREV
	MOVE	A4,A4				;LEAVE ALONE IF STOPPED
	JRZ	CISNOTREV

	;WANT TO GO IN OPPOSITE DIR, DO STOP-AND-REVERSE MODE THING
	BTST	B_CDFSTOPREV,A6			;ALREADY IN REV MODE?
	JRNZ	CISREV
	
	;BEGIN STOP-AND-REVERSE MODE
	ORI	M_CDFSTOPREV,A6
	MOVW	A6,*A7(CDFLAGS)
	
	MOVW	*A7(CDGEAR),A14
	JRZ	CISRNOTFIRST		;IN GEAR ZERO, DONT SCREETCH

	;STOP & REVERSE
	MOVW	*A7(CDINPNUM),A14
	ADDI	SNDBRAKE1,A14
	CALLA	ARENASND ;IN:A14 SNDID

CISRNOTFIRST

CISREV
	;SLOW CAR DOWN >>FAST<<
	MOVE	A4,A14				;SLOW DOWN BY 1/4 OF CUR VEL
	SRA	2,A14				;SLOW TWICE AS FAST AS BRAKES
	JRZ	CISRSTOP
	SUB	A14,A4
	JRNZ	CISVOK
CISRSTOP
	CLR	A4			   	;ZERO PEDAL VEL

	;STOPPED, END STOP-AND-REVERSE MODE
	ANDNI	M_CDFSTOPREV,A6
	MOVW	A6,*A7(CDFLAGS)
	JRUC	CISFINDGEAR
	
CISNOTREV
	;CHECK ON REVERSING-A-REVERSE BEFORE STOPPED
	BTST	B_CDFSTOPREV,A6
	JRZ	CISFINDGEAR

	;REVERSED A REVERSE BEFORE CAR WAS FULLY STOPPED
	ANDNI	M_CDFSTOPREV,A6		;CLR STOP IN PROGRESS FLAG
	MOVW	A6,*A7(CDFLAGS)

CISFINDGEAR
	;FIGURE GEAR
	ABS	A4				;FWD GEARS == REV GEARS
	MOVW	*A7(CDGEAR),A5			;A5 TMP GEAR NUM
CISFGEAR
	MOVE	A5,A3				;TMP GEAR NUM
	SLL	FGEARSIZESHIFT,A3
	ADD	A0,A3
	MOVW	*A3(FGEARMAXVEL),A14
	CMP	A14,A4
	JRGT	CISFGUP

	MOVE	A5,A14				;IF GEAR IS ZERO, USE IT
	JRZ	CISFGDONE

	MOVW	*A3(FGEARMAXVEL-FGEARSIZE),A14	;CHECK ONE GEAR DOWN
	CMP	A14,A4
	JRGT	CISFGDONE

CISFGDWN
	;TRY NEXT GEAR DOWN
	DEC	A5
	MOVW	A5,*A7(CDGEAR)
	.IF DEBUG
	TLOCKON	N	;SET UP GEARS SO THIS DOESNT HAPPEN
	.ENDIF ;DEBUG
	JRUC	CISFGEAR

CISFGUP
	;TRY NEXT GEAR UP
	INC	A5
	MOVW	A5,*A7(CDGEAR)
	.IF DEBUG
	CMPI	FGEARNUM,A5
	TLOCKON	GE	;SET UP GEARS SO THIS DOESNT HAPPEN
	.ENDIF ;DEBUG
	JRUC	CISFGEAR

CISFGDONE	
	;IF TURBO, USE ONE GEAR DOWN FROM TOP (I.E. DOWNSHIFT)
	MOVW	*A7(CDTURBOBOOST),A14
	JRZ	CISFGNODOWNSHIFT

	;IF IN TOP GEAR, DOWN SHIFT ONE	FOR FASTER GEARING MULTIPLIER
	CMPI	FGEARNUM-1,A5
	JRLT	CISFGNODOWNSHIFT

	;DOWNSHIFT
	SUBI	FGEARSIZE,A3

CISFGNODOWNSHIFT
	;A3 GEAR DATA
	MOVB	*A3(FGEARPEDMULSL),A14	;PED MULTIPLIER
	SLL	24,A14			;DROP SIGN BITS
	SRL	24,A14
	SETF	8,0,1			;RESTORE
	MPYU	A14,A11			;PEDAL * PEDMUL
	SRA	PELMULFRACBITS,A11
	SETF	32,1,1			;RESTORE
	MOVW	*A7(CDDRIVEMAG),A4	;V
	SUB	A4,A11			;(PEDAL * PEDMUL) - V
	MOVB	*A3(FGEARACCMULSL),A14	;ACC MULTIPLIER
	JRNN	CISAMNN
	SRA	A14,A11			;((PEDAL*PEDMUL)-V)/ACCMUL
	JRNZ	CISAMADD		;GUARD AGAINST FRACTIONS TURNING TO 0
	INC	A11			;NEG VALUES NEVER SRA TO 0
	JRUC	CISAMADD
	
CISAMNN
	SLL	A14,A11			;((PEDAL*PEDMUL)-V)*ACCMUL
CISAMADD
	ADD	A4,A11			;V+(((PEDAL*PEDMUL)-V)*ACCMUL)

	;MAKE SURE NEW SPEED IS IN RANGE
	JRN	CISCKMIN		;CHECK MIN & MAX SPEEDS
	MOVW	*A0(FVELMAXPOS),A14
	CMP	A14,A11
	JRLE	CISVUSE
	MOVE	A14,A11
	JRUC	CISVUSE
CISCKMIN
	MOVW	*A0(FVELMAXNEG),A14
	CMP	A14,A11
	JRGE	CISVUSE
	MOVE	A14,A11
CISVUSE
	MOVE	A11,A4
	
CISVOK	; ......JUMPED INTO FROM WAAAY UP TOO
	MOVE	A4,A11

CISVDONE
	RETS

SLIPTAILVEL	EQU	380H

**
** DECAYSLIP
**
** IN
**   A0 OBJ
**   A1-A4 SC
**   A7 CD
**
** JFL 23 DEC 92
** JFL 14 JAN 93; SPIT DIRT ON SLIP
**
DECAYSLIP
	MOVW	*A7(CDSLIPFACTOR),A3
	JRZ	DSX
	
	MOVW	*A7(CDSLIPFDECAY),A2
	SUB	A2,A3
	JRP	DSSLIPPING
	
	;NO MORE SLIPPING
	CLR	A3
	MOVW	A3,*A7(CDSLIPFACTOR)
	MOVW	A3,*A7(CDSLIPPART)
DSX
	RETS

DSSLIPPING
	;SAVE FACTOR
	MOVW	A3,*A7(CDSLIPFACTOR)
	MOVW	*A7(CDTOTMAG),A14
	CMPI	SLIPTAILVEL,A14
	JRLE	DSX
	MOVL	*A0(OYACC),A14		;NOT IF IN AIR
	JRNZ	DSX
	MOVW	*A7(CDSLIPPART),A4
	JRZ	DSX

	;GENERATE EVERY 4TH FRAME
	MOVW	@WAVEIRQS,A14
	SLL	30,A14
	JRNZ	DSX

	;ADD SLIP GRAPHIC
	MOVK	1,A1				;ON BACK LEFT
	MOVB	*A0(ODIR),A2
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	DSNN
	ADDI	DIR180,A2
	MOVK	3,A1				;ON FRONT RIGHT
DSNN

	;ATTACH DIR TO OUTSIDE WHEEL SO DIRT LEADS SPIN
	;I.E. BACK TIRES WITH SPIN CLOCKWISE, DIRT GETS ON BACK LEFT
	;FRONT TIRES WITH SPIN CLOCKWISE, DIRT GETS ON FRONT RIGHT
	MOVL	*A7(CDINPDATA),A14
	MOVW	*A14(INPWHEELMAG),A14
	JRN	DSCLOCKWISE
	XORI	3,A1				;MOVE TO OTHER SIDE				
DSCLOCKWISE
	ADD	A1,A4				;PART ID

	;TURN DIR INTO INDEX INTO TBL & FETCH ANIMSCRIPT

	JRUC	DSX	

**
** OBJLISTCHECK
**
** IN
**   A2 OBJLIST
**   A3 OBJ
** OUT
**   C IF ON LIST
**
** JFL 08 FEB 93 
**
OBJLISTCHECK
	MMTM	SP,A0
	MOVE	A2,A0
	JRUC	OLCNEXT
OLCLOOP
	CMP	A0,A3
	JREQ	OLCGOODX
OLCNEXT
	MOVL	*A0,A0
	CMP	A0,A2
	JRNE	OLCLOOP
	CLRC
	MMFM	SP,A0
	RETS
OLCGOODX
	SETC
	MMFM	SP,A0
	RETS

**
** MAINCARPROC -- PROCESS
** JFL 13 JUL 92; STOLEN FROM DREDD
** JFL 24 JUL 92
** JFL 24 SEP 92; TURNED INTO MAIN CAR PROCESS
** JFL 25 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
** JFL 13 OCT 92
** JFL 09 NOV 92
** JFL 23 DEC 92
** JFL 15 JAN 93; DRONES
** JFL 19 JAN 93; FRACTIONAL TURBO
**
MAINCARPROC
	;CLEAR HIT FLAGS & REORDER CAR SUPL IF NECESSARY
	CALLA	AFTERHITTEST

	;TIME DOWN CARS WHO HIT EACHOTHER RECORDS
	CALLA	BEFOREHITTEST

	MOVL	@SUPPLSTS+SUPL_CAR,A8
	JRZ	MCPX
MCPLOOP
	;LOAD UP
	MOVL	*A8(OCAR),A7
   	
	MOVL	*A8(ANIMFRM),A14
	TLOCKON	NZ
	MOVL	*A8(ANIMSCR),A14
	TLOCKON	NZ
	MOVL	*A8(ANIMNXT),A14
	TLOCKON	NZ
	
	;CHECK IF THIS CAR IS IN PROCESS OF BEING ZAPPED
	MOVW	*A8(OID),A14
	ANDI	SUPLM_CAR,A14
	TLOCKON	Z
	JRZ	MCPNEXT

	;CLEAR TOTAL VECTOR STUFF
	CLR	A14
	MOVL	A14,*A7(CDTOTX)		;CLEAR CDTOTZ TOO

	MOVW	@HOLDGAME,A14
	JRNZ	MCPCARISDEAD

	;GIVE DRONES A CHANCE TO THINK
	MOVB	*A7(CDFLAGS+B_CDFDRONE-7),A14
	JRNN	MCPNOTDRONE
       	CALLA	HANDLEDRONE ;IN:A7,A8 CD,OBJ
MCPNOTDRONE

	.IF SHOWSTATES==0
	CALLR	SPECMOVE ;IN:A7,A8 CD,CAROBJ
	.ENDIF

MCPCARISDEAD
	CALLR	ANICAR ;IN: A8 CAR, SC:A0-A6,A9-A11
	MOVE	A8,A0			;CHANGE HANDS

	;ADD IN DRIVE & SLIP VEL
	MOVW	*A7(CDDRIVEMAG),A3		;DRIVE
	MOVW	*A7(CDSLIPMAG),A5		;SLIP
	MOVW	*A7(CDSLIPFACTOR),A2
	SRL	SLIPFFRAC,A2
	SETF	10,1,1				;MUST BE > HIGHEST BIT MPYS
	MPYS	A2,A5				
	SRA	PERCENTSHIFT,A5			;SLIP CONTRIBUTION
	SUBI	PERCENT100,A2			;DRIVE+SLIP=100%
	NEG	A2
	MPYS	A2,A3
	SRA	PERCENTSHIFT,A3			;DRIVE CONTRIBUTION
	SETF	32,1,1

	;CONVERT DRIVE DIR&MAG TO XZ
	MOVW	*A7(CDDRIVEDIR),A10
	MOVE	A3,A11
	CALLR	VECTORTOVELS ;IN:A10,A11 DIR,MAG OUT:A10,A11 X,Z 
	MOVE	A10,A8		;SAVE
	MOVE	A11,A9		;SAVE
	
	;CONVERT SLIDE DIR&MAG TO XZ
	MOVW	*A7(CDSLIPDIR),A10
	MOVE	A5,A11
	CALLR	VECTORTOVELS ;IN:A10,A11 DIR,MAG OUT:A10,A11 X,Z 
	ADD	A10,A8
	ADD	A11,A9

	;GET TOTAL MISC
	;CALLR	TOTALMISCXZ ;IN A2-A6,A7 SC,CD
	;ADD	A10,A8
	;ADD	A11,A9

	;SAVE TOTAL TOTAL
	MOVW	A8,*A7(CDTOTX)
	MOVW	A9,*A7(CDTOTZ)

	;DECAY SLIP
	CALLR	DECAYSLIP ;IN A0,A1-A4,A7 OBJ,SC,CD

	CALLA	HITCARTOPO ;IN: A0,A7 CAR,CD
	CALLA	TOPOREACT ;IN: A0,A7 CAR,CD

	;FIND TOTAL VELS
	MOVW	*A7(CDTOTX),A10
	MOVW	*A7(CDTOTZ),A11
	MOVE	A10,A4
	MOVE	A11,A5
	SLL	VELSHIFT,A4
	SLL	VELSHIFT,A5
	MOVL	A4,*A0(OXVEL)
	MOVL	A5,*A0(OZVEL)

	;FIND DIR&MAG
	CALLR	COMPTODIRMAGVEC ;IN: A10,A11 X,Z OUT: A10,A11 DIR,MAG
	MOVW	A10,*A7(CDTOTDIR)
	MOVW	A11,*A7(CDTOTMAG)
	
	;
	;MOVE CAR
	;

	CALLA	VELADDCAR ;IN: A0 CAR BREAKS A1-A11,A14
	CALLA	HITTESTOBJS ;IN A0 CAR BREAKS A1-A11,B0-B3
	CALLR	HITTESTCARS ;IN A0 CAR OUT NZ IF HIT A CAR
	JRNZ	MCPUNDO

	MOVL	*A0(OCAR),A7

	;DO WE NEED TO UNDO THIS CARS MOVEMENT -- FROM TOPO OR OBJ
	MOVB	*A7(CDFLAGS+B_CDFUNDO-7),A14
	JRNN	MCPHITDONE
	
	;
	;UNDO MOVE
	;

MCPUNDO

	;UNDO
	CALLA	VELSUBCAR ;IN: A0 CAR (BREAKS ALL OTHER A)

	MOVL	*A0(OCAR),A7

	;CLEAR FLAG
	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A7(CDFLAGS+B_CDFUNDO),0
	SETF	16,1,0

	;ZERO TOTMAG
	CLR	A14
	MOVW	A14,*A7(CDTOTMAG)

MCPHITDONE
	MOVE	A0,A8			;RESTORE


	;
	;REGENERATION EVERY SO OFTEN
	;
	MOVW	@WAVEIRQS,A14
	SLL	32-3,A14		;EVERY 8TH FRAME
	JRNZ	MCPNOREGEN

	;REGENERATE TURBO
	MOVW	*A7(CDTURBOS),A4
	MOVE	A4,A2
	SRL	TURBOFRACSHIFT,A2
	MOVW	*A7(CDREGENERATE),A14
	ADD	A14,A4
	MOVE	A4,A14
	SRL	TURBOFRACSHIFT,A14
	CMP	A2,A14
	JRLS	MCPNOTWHOLE
	
	;CHECK IF WEVE MAXED OUT
	MOVK	TURBOSINGLEMAX,A3
	CMP	A3,A14
	JRHI	MCPMAXTURBO
	
	;DIDNT MAX OUT
	MOVE	A14,A3
	MOVE	A8,A2
	CALLA	SCORESETTURBO ;IN: A2,A3 OBJ,TURBOS
MCPNOTWHOLE
	MOVW	A4,*A7(CDTURBOS)
MCPMAXTURBO

	;	
	;TAKE AWAY BONUS TURBO...
	;
	MOVW	*A7(CDBONUSTURBO),A14
	JRZ	MCPNOBONUSTURBO
	DEC	A14
	MOVW	A14,*A7(CDBONUSTURBO)
	JRP	MCPNOBONUSTURBO
	SETF	1,0,0
	MOVE	SP,*A7(CDFLAGS+B_CDFBONUSTURBO),0
	SETF	16,1,0
MCPNOBONUSTURBO

MCPNOREGEN


MCPNEXT
	;NEXT CAR
	MOVL	*A8(OSLINK),A8
	JRNZ	MCPLOOP

MCPX
	;HIT TEST MISC STUFF EVERY OTHER FRAME
	MOVB	@WAVEIRQS-7,A14
	JRN	MCPXN
	CALLA	HITTESTMISC ;A0-A11,B0-A6 SCRATCH
MCPXN
	
	CALLR	DEBUGCHECKOBJS ;SCRATCH:A2-A3

	SLEEP	1			;REST STOP

	MOVW	@PAUSE_GAME,A14
	JRNZ	MCPX

	JRUC	MAINCARPROC		;LOOP

**
** DEBUGCHECKOBJS
**
** SCRATCH: A0-A3
**
** JFL 26 FEB 93
**
	.ALIGN ;CACHE BOUNDRY
DEBUGCHECKOBJS
	MOVI	FGLISTS,A0
	MOVE	A0,A1
	MOVI	NOBJ,A3
	JRUC	DCONEXT	

DCOLOOP
	;CHECK FOR INFINITE LINK
	DEC	A3
	TLOCKON	N ;MORE OBJS LINED UP THAN THERE ARE.  HMMM...

	;CHECK BACK LINK
	MOVL	*A0(OBLINK),A2
	CMP	A2,A14
	TLOCKON	NE
	
DCONEXT
	MOVE	A0,A14
	MOVL	*A0,A0
	
	CMP	A0,A1
	JRNE	DCOLOOP

DCOX
	RETS


**
** ANICAR
**
** IN
**   A7 CD
**   A8 OBJ
** SC:A0-A6,A9-A11
**
** JFL 13 JUL 92; STOLEN FROM DREDD
** JFL 17 JUL 92; MOTION IN Z
** JFL 21 JUL 92; CAR HANDLING STUFF STARTED
** JFL 23 JUL 92
** JFL 24 JUL 92
** JFL 31 JUL 92; MULTIPARTS
** JFL 11 AUG 92
** JFL 16 AUG 92; X FORCES
** JFL 24 SEP 92; TILT SPEED ADJ
** JFL 28 SEP 92; NEW SCRATCH
** JFL 07 OCT 92; ADDITIONAL VEL
** JFL 13 OCT 92; VEC
** JFL 19 OCT 92
** JFL 23 DEC 92
** JFL 17 FEB 93; CDSAS
** JFL 25 MAR 93; SINGLE-PART CARS
** JFL 26 MAR 93; SPECIAL MULTIPARTS
** JFL 14 APR 93; MOVING PART
**
ANICAR
	MOVW	*A8(ODIR),*A7(CDLASTDIR)

	;
	;HANDLE CDSAS -- STATE ANIMATION SCRIPTS
	;

	.IF SHOWSTATES==0

	;GET SAS ADR
	MOVL	*A7(CDSAS),A0
	JRZ	ACSASDONE

	;CHECK IF ITS TIME
	MOVL	@WAVEIRQS,A1
	MOVL	*A7(CDSASIRQ),A14
	CMP	A14,A1
	JRLT	ACSASDONE		;NOT YET
	
ACSASPULL
	MOVW	*A0+,A2			;PULL COMMAND
	JRNN	ACSASNN
	
	BTST	B_SASRESET,A2
	JRNZ	ACSASRES
	BTST	B_SASTIME,A2
	JRNZ	ACSASTIM

	;DISENGAGE SAS
	CLR	A0
	MOVW	A0,*A8(OSTATE)
	MOVL	A0,*A7(CDSAS)
	MOVL	A0,*A7(CDSASIRQ)
	MOVW	A0,*A7(CDANIPRI)
	JRUC	ACSASDONE

ACSASTIM
	;PULL NEW DELAY
	MOVW	*A0+,A2
	MOVW	A2,*A7(CDSASTIME)
	JRUC	ACSASPULL
ACSASRES
	;PULL NEW ADR
	MOVL	*A0,A0
	JRUC	ACSASPULL
ACSASNN
	;SET STATE
	MOVW	A2,*A8(OSTATE)
	MOVL	A0,*A7(CDSAS)
	
	;SET NEXT TIME
	MOVW	*A7(CDSASTIME),A14	;GET DELAY TO NEXT
	ADD	A14,A1		     	;ADD TO WAVE IRQS
	MOVL	A1,*A7(CDSASIRQ)	;WHEN FOR NEXT TO OCCUR
ACSASDONE
	.ENDIF ;SHOWSTATES==0

	;
	;DO OTHER STUFF
	;

	;CLEAR FLAGS THAT NEED IT
	MOVW	*A7(CDCOUNTEXT),A14
	JRNZ	ACSTILLEXT

	SETF	1,0,0
	MOVE	SP,*A7(CDFLAGS+B_CDFSTOPEXT),0
	SETF	16,1,0
ACSTILLEXT

	;HANDLE INPUT
	MOVL	*A7(CDINPHANDLER),A14
	CALL	A14 ;IN:A0,A7,A8 CD,OBJ OUT:A10,A11 DIR,VEL
	MOVE	A10,A2			;A1 USE DIR OF INP FOR IMAGE DIR

	;RECORD INP VECTOR
	MOVW	A10,*A7(CDDRIVEDIR)
	MOVW	A11,*A7(CDDRIVEMAG)

	;SET IMAGE FOR THIS DIRECTION
	MOVW	A2,*A8(ODIR)		;DIRECTION
	SLL	24,A2			;SIGN SHIT
	SRL	24+SR_DIR2CAR,A2	;DROP EXTRA ANGLE PRECISION
	MOVE	A2,A5			;SAVE FOR OMDATA & SPECIAL MULTIS
	SLL	SL_CAR2OFF,A2		;EACH ENTRY
	MOVW	*A8(OSTATE),A3
	MOVE	A3,A6			;SAVE FOR OMDATA & SPECIAL MULTIS
	SLL	SL_STATE2OFF,A3
	ADD	A2,A3			;GET OFFSET INTO IMAGE TBL

	;CHECK IF THIS OFFSET MATCHES PREVIOUS
	MOVW	*A8(OTBLOFF),A14
	CMP	A3,A14
	JREQ	ACSAMEIMG

	;INDEX TO IMAGE
	MOVW	A3,*A8(OTBLOFF)
	MOVL	*A8(OIMGTBL),A2
	ADD	A2,A3

	;CHANGE IMG
	MOVL	*A3+,A1			;GET IMG
	MOVL	A1,*A8(OIMG)
	MOVL	*A1(ISIZE),*A8(OUSIZE)
	MOVL	*A1(IANIOFF),*A8(OUANIOFF)
	MOVL	*A1(ISAG),*A8(OSAG)
	MOVW	*A3,A2			;GET CTRL & FLIP
	MOVW	*A1(ICTRL),A14		;GET BPP
	OR	A2,A14	
	MOVW	A14,*A8(OCTRL)
	CALLA	SETOBJSCALE ;IN: A8 OBJ
	
	;
	;MOVE ALL ATTACHED MULTI-PARTS TO FOLLOW STATE/DIR CHANGE
	;

	;REG USE
	;  A4 DIR
	;  A5 CAR INDEX (ODIR << 24 >> SR_DIR2CAR)
	;  A6 STATE

	MOVL	*A8(OPARTS),A0
	JRZ	ACSAMEIMG
	
	;GET DIR
	MOVB	*A8(ODIR),A4

ACMLOOP
	;CHECK IF THIS IS ONE OF THOSE SPECIAL MOVING MULTIPARTS WITH DATA
	MOVL	*A0(OMDATA),A1		;GET MULTI-PART DATA
	JRZ	ACMNEXT
	
	;ADD IN DIR OFFSET & GET ANIM FOR THIS DIR
	MOVW	*A0(OMDIRADJ),A14
	ADD	A4,A14			;DIR+DIRADJ = ANIM DIR
	SLL	24,A14
	SRL	24+SR_DIR2CAR,A14	;DROP EXTRA ANGLE PRECISION
	SLL	DASIZEOF,A14		;SIZEOF ONE DIR ANIM
	ADD	A14,A1			;ADR OF ANIM
	MOVL	*A1,A1			;ANIM FOR THIS DIR

	;FIND CURRENT ANIM OFFSET
	MOVL	*A0(ANIMSCR),A2		;TOP
	MOVL	*A0(ANIMFRM),A3		;CUR
	SUB	A2,A3
	JRNN	ACMGOTOFF
	TLOCKUP ;HOWD CUR GET BELOW TOP?
	JRUC	ACMNEXT

ACMGOTOFF
	
	;SET NEW ANIM TOP & CUR
	MOVE	A1,A2			;DROP FLAG BITS
	SRL	4,A2
	SLL	4,A2
	MOVL	A2,*A0(ANIMSCR)		;NEW TOP
	ADD	A3,A2			;NEW CUR
	MOVL	A2,*A0(ANIMFRM)

	;SET FLIP BITS
	SETF	2,0,0
	MOVE	A1,*A0(OCTRL+B_FLIPH),0
	SETF	16,1,0

ACMNEXT
	;NEXT
	MOVL	*A0(OPARTS),A0
	JRNZ	ACMLOOP
	
ACSAMEIMG

	RETS

**
** ADDMOVINGPART
**
** IN
**   A2 DIR OFFSET
**   A3 OID (ALSO DETERMINES IMAGE / ANIM -- SEE DRA.I FOR CAR PART IDS)
**   A8 CAR
** SC:
**
** JFL 26 MAR 93
** JFL 06 APR 93
** JFL 14 APR 93; UNDER CAR GRAPHICS
**
ADDMOVINGPART
	MMTM	SP,A0,A1,A4,A5,A6,A7,A9,A10

	MOVE	A3,A9			;SAVE OID
	MOVE	A2,A10			;SAVE DIRADJ

	;LOOKUP MOVING PART
	SLL	SL_SUBTYPE,A3		;SUBTYPE FIELD HAS DIR ANIM ID
	SRL	SR_SUBTYPE,A3
	ADDI	MOVINGPARTTBL,A3
	.IF DEBUG
	CMPI	MOVINGPARTTBLX,A3
	TLOCKON	HS
	.ENDIF ;DEBUG
	MOVL	*A3,A3			;DIRECTIONAL ANIM BASE
	MOVE	A3,A6			;SAVE DIR ANIM BASE
	
	;INDEX INTO DIRECTIONAL ANIM TBL TO GET PROPER DIR
	MOVB	*A8(ODIR),A14
	ADD	A14,A2			;DIR+DIRADJ
	SLL	24,A2
	SRL	24+SR_DIR2CAR,A2	;DROP EXTRA ANGLE PRECISION
	SLL	DASIZEOF,A2		;SIZEOF ONE DIR ANIM
	
	ADD	A3,A2 			;ADD IN OFFSET TO THIS DIR
	MOVL	*A2,A2			;GET ANIMSCRIPT FOR THIS DIR
	
	CLR	A3		;INIT()
	CALLA	ANISPAWNFIX	;IN:A2,A3,A4,A5,A7,A8 ASCRIPT,INIT(),
				;SC,SC,SC,PARENTOBJ OUT:A0,A1 OBJ,IHDR

	;SET MOVING PART DATA
	MOVL	A6,*A0(OMDATA)		;DIR ANIM BASE
	MOVW	A9,*A0(OID)		;OID
	MOVW	A10,*A0(OMDIRADJ)	;DIRADJ

	;ADD AS THE FIRST MULTIPART
	MOVL	*A8(OPARTS),*A0(OPARTS)
	MOVL	A0,*A8(OPARTS)
	MOVL	A8,*A0(OPART1)
	MOVL	A8,*A8(OPART1)		;IN CASE THIS IS PARTLESS BEFORE NOW
	
	MMFM	SP,A0,A1,A4,A5,A6,A7,A9,A10
	RETS
	
	.END
* EOF
