***
*** FILE: DRWINSCR.ASM
*** PROCESSES AND FUNCTIONS FOR THE WIN MODE
***
*** JMS 14 APR 93; STARTED
*** 
	.MLIB	"APMACS.LIB"
	.FILE	"DRWINSCR.ASM"
	.TITLE	"<<< DERBY RACE -- WIN MODE >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**
** COMPILE FLAGS
**

**************************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"
	.INCLUDE	"IMGTBLB1.GLO"
	.INCLUDE	"IMGTBLM2.GLO"
	.INCLUDE	"DISPEQU.ASM"
	.INCLUDE	"DRB.I"
	.INCLUDE	"DRINP.I"
	.INCLUDE	"DRSND.I"
	.INCLUDE	"DRDISP.I"

** OTHERS USE
	.DEF	FLP_WIN_SCREEN	;DRWINSCR.ASM

** WE USE
	.REF	ANIMP		;APC.ASM
	.REF	DISPATCHPROC	;AP.ASM
	.REF	SET_IMAGE   	;DREQUIP.ASM
	.REF	INSANI		;APD.ASM
	.REF	CKPULLANIM	;APD.ASM
	.REF	INSOBJ		;APD.ASM
	.REF	INSERT_OBJ	;APD.ASM
	.REF	ZAP_OBJ		;APD.ASM
	.REF	STARTNEWATTRACT	;DRATT.ASM
	.REF	STARTPLANES	;DRB.ASM
	.REF	GAMEOVER	;DRATT.ASM
	.REF	GETINPDATA	;DRINP.ASM
	.REF	GETFPAL		;APPALL.ASM
	.REF	MAKESND		;DRSND.ASM
	.REF	GAME_STATE	;

** WE USE -- RAM


** LOCAL VARIABLES
	.BSS	ACTIVE_WINPANELS,10h

** ANIMATION SCRIPTS

ASFIRST
	.LONG	WINR_1
	.WORD	12
	.LONG	WINR_2
	.WORD	12
	.LONG	0

ASSECOND
	.LONG	PLAC2_1
	.WORD	12
	.LONG	PLAC2_2
	.WORD	12
	.LONG	0

ASTHIRD
	.LONG	PLAC3_1
	.WORD	12
	.LONG	PLAC3_2
	.WORD	12
	.LONG	0

ASINSERTCOIN
	.LONG	INST_COIN
	.WORD	24
	.LONG	TO
	.WORD	24
	.LONG	CONTNUE
	.WORD	24
	.LONG	0

ASNEXTFREE
	.LONG	NXT_GAME
	.WORD	24
	.LONG	IS_FREE
	.WORD	24
	.LONG	0

** DEFINES

;PLACE TABLE

PLACES
	.LONG	ASFIRST
	.LONG	ASSECOND
	.LONG	ASTHIRD


;CHARACTER TABLE

CT_WINNER1	EQU	0000h	;UHL hIMAGE WINNING PLAYER PART 1
CT_WINNER2	EQU	0020h	;UHL hIMAGE WINNING PLAYER PART 2
CT_WINNER3	EQU	0040h	;UHL hIMAGE WINNING PLAYER PART 3
CT_LOSER1	EQU	0060h	;UHL hIMAGE LOSING PLAYER PART 1
CT_LOSER2	EQU	0080h	;UHL hIMAGE LOSING PLAYER PART 2
CT_LOSER3	EQU	00A0h	;UHL hIMAGE LOSING PLAYER PART 3
CT_WINTRUCK1	EQU	00C0h	;UHL hIMAGE WINNER TRUCK PART 1
CT_WINTRUCK2	EQU	00E0h	;UHL hIMAGE WINNER TRUCK PART 2
CT_LOSETRUCK1	EQU	0100h	;UHL hIMAGE LOSER TRUCK PART 1
CT_LOSETRUCK2	EQU	0120h	;UHL hIMAGE LOSER TRUCK PART 2

CHAR_SIZE	EQU	0140h	;SIZE OF A CHARACTER ENTRY

CHAR1
	.LONG	CRASW1
	.LONG	CRASW2
	.LONG	CRASW3
	.LONG	CRASL1
	.LONG	CRASL2
	.LONG	CRASL3
	.LONG	G_BODY
	.LONG	ALLBODY
	.LONG	G_BODY2
	.LONG	ALLBODY2
CHAR2
	.LONG	OUTLW1
	.LONG	OUTLW2
	.LONG	OUTLW3
	.LONG	OUTLL1
	.LONG	OUTLL2
	.LONG	OUTLL3
	.LONG	B_BODY
	.LONG	ALLBODY
	.LONG	B_BODY2
	.LONG	ALLBODY2
CHAR3
	.LONG	KILRW1
	.LONG	KILRW2
	.LONG	0
	.LONG	KILRL1
	.LONG	KILRL2
	.LONG	0
	.LONG	R_BODY
	.LONG	ALLBODY
	.LONG	R_BODY2
	.LONG	ALLBODY2


;SCREEN POSITIONS
PLAYER_BOX
	.WORD	10,9

CAR_BOX
	.WORD	26,135

WIN_BOX				;WINNER NEEDS A DIFFERENT POSITION
	.WORD	10,119

PLACE_BOX
	.WORD	16,197

CREDIT_BOX
	.WORD	34,231


;PROCESS DATA OFFSETS

PD_CHAR1	EQU	PDATA+0000h	;UHL hCHARACTER PART 1
PD_CHAR2	EQU	PDATA+0020h	;UHL hCHARACTER PART 2
PD_CHAR3	EQU	PDATA+0040h	;UHL hCHARACTER PART 3
PD_TRUCK1	EQU	PDATA+0060h	;UHL hTRUCK PART 1
PD_TRUCK2	EQU	PDATA+0080h	;UHL hTRUCK PART 2
PD_PLACE	EQU	PDATA+00A0h	;UHL hPLACE ANIM
PD_CREDMESSAGE	EQU	PDATA+00C0h	;UHL hBOTTOM MESSAGE

;MISCELLANEOUS
WP_PANEL_WIDTH	EQU	128

WS_GENERIC_OBJECT
	.LONG	FONT_X		;IMAGE
	.LONG	0		;COLLISION VECTOR
	.WORD	OID_JUNK	;OID
	.WORD	DMAWNZ		;OCTRL
	.WORD	0		;OFLAGS
	.WORD	STYPNONE	;OSCALTYP
	.LONG	0		;CFUNC


**
** FLP_WIN_SCREEN - FLOW-LEVEL PROCESS
**
**  IN
**    NONE
**
**  OUT
**    NONE
**
**  PURPOSE
**    HANDLES THE WIN SCREEN
**
**  JMS 24 MAR 93
**

FLP_WIN_SCREEN

	;SET GAME_STATE
	MOVI	INWINMODE,A14
	MOVW	A14,@GAME_STATE

	;DRAW THE BACKGROUND
	MOVK	PLIDWIN,A2
	CALLA	STARTNEWATTRACT ;IN:A2 PLANEID

	;SET UP THE ANIMATION SCRIPT PROCESS
	CREATE	PID_DRAGONE,ANIMP

	;CLEAR THE ACTIVE PANELS COUNTER
	CLR	A14
	MOVW	A14,@ACTIVE_WINPANELS

	;CREATE THE THREE BOXES
	MOVK	1,A8
	CLR	A10
	CREATE	PID_DRAGONE,WIN_PANEL
	CLR	A8
	INC	A10
	CREATE	PID_DRAGONE,WIN_PANEL
	MOVK	2,A8
	INC	A10
	CREATE	PID_DRAGONE,WIN_PANEL

WS_WAITLOOP
	SLEEP	1
	MOVW	@ACTIVE_WINPANELS,A14
	JRNZ	WS_WAITLOOP

	;THEN WAIT AN EXTRA TWO SECONDS, JUST FOR FUN
	SLEEP	ONESECOND*2

	CREATE	PID_MAIN,DISPATCHPROC
	DIE


**
** WIN_PANEL - PROCESS
**
**  IN
**    A8  PLACE (0-2)
**    A10 PLAYER # (0-2)
**
**  OUT
**    NONE
**
**  PURPOSE
**    DRAWS THE WIN PANEL FOR THE PLAYER AND WAITS A BIT
**
**  JMS 14 APR 93
**

WIN_PANEL

	;REG USE
	; A0  SCRATCH
	; A1  SCRATCH
	; A2  SCRATCH
	; A3  SCRATCH
	; A4  PANEL OFFSET
	; A5  BUTTON 0 COUNT
	; A6  BUTTON 1 COUNT
	; A7  BUTTON 2 COUNT
	; A8  PLACE (0-2)
	; A9  INPUT ADDRESS
	; A10 PANEL NUMBER (0-2)

	;INCREMENT THE ACTIVE WINPANELS COUNTER
	MOVW	@ACTIVE_WINPANELS,A14
	INC	A14
	MOVW	A14,@ACTIVE_WINPANELS

	;GET THE INPUT ADDRESS
	MOVE	A10,A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A9

	;CLEAR THE BUTTON COUNTS
	MOVW	*A9(INPB0),A5
	MOVW	*A9(INPB1),A6
	MOVW	*A9(INPB2),A7

	;CALCULATE THE PANEL OFFSET
	MOVI	WP_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVE	A1,A4


	;DRAW THE GUY
	;BUILD, ACTIVATE, AND PLACE THE OBJECTS
	MOVI	PLAYER_BOX,A14
	MOVW	*A14+,A2
	MOVW	*A14,A3
	ADD	A4,A2

	MOVI	WS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0 hOBJECT
	MOVW	A2,*A0(OXPOS)
	MOVW	A3,*A0(OZPOS)
	MOVL	A0,*A13(PD_CHAR1)
	MOVI	WS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0 hOBJECT
	MOVW	A2,*A0(OXPOS)
	MOVW	A3,*A0(OZPOS)
	MOVL	A0,*A13(PD_CHAR2)
	MOVI	WS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0 hOBJECT
	MOVW	A2,*A0(OXPOS)
	MOVW	A3,*A0(OZPOS)
	MOVL	A0,*A13(PD_CHAR3)

	;SET THE GUY IMAGES
	MOVI	CHAR1,A2
	MOVI	CHAR_SIZE,A1
	MPYU	A10,A1
	ADD	A1,A2

	MOVE	A8,A8
	JRNZ	WP_DRAWLOSINGPLAYER

	;DRAW THE WINNER
	MOVL	*A13(PD_CHAR1),A0
	MOVL	*A2(CT_WINNER1),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	MOVL	*A13(PD_CHAR2),A0
	MOVL	*A2(CT_WINNER2),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	MOVL	*A13(PD_CHAR3),A0
	MOVL	*A2(CT_WINNER3),A1
	JRZ	WP_NO_THIRD_IMAGE
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	JRUC	WP_PLAYERDRAWN

WP_DRAWLOSINGPLAYER
	;DRAW THE LOSER
	MOVL	*A13(PD_CHAR1),A0
	MOVL	*A2(CT_LOSER1),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	MOVL	*A13(PD_CHAR2),A0
	MOVL	*A2(CT_LOSER2),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	MOVL	*A13(PD_CHAR3),A0
	MOVL	*A2(CT_LOSER3),A1
	JRZ	WP_NO_THIRD_IMAGE
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	JRUC	WP_PLAYERDRAWN

WP_NO_THIRD_IMAGE
	;THERE IS NO THIRD PART.  DEACTIVATE IT.
	CALLA	ZAPOBJ ;IN:A0 hOBJECT

WP_PLAYERDRAWN

	;DRAW THE TRUCK
	MOVI	CAR_BOX,A14
	MOVW	*A14+,A2
	MOVW	*A14,A3
	ADD	A4,A2

	;CREATE AND ACTIVATE
	MOVI	WS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0 hOBJECT
	MOVL	A0,*A13(PD_TRUCK1)
	MOVI	WS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0 hOBJECT
	MOVL	A0,*A13(PD_TRUCK2)

	;SET TRUCK IMAGES
	MOVI	CHAR1,A2
	MOVI	CHAR_SIZE,A1
	MPYU	A10,A1
	ADD	A1,A2

	MOVE	A8,A8
	JRNZ	WP_DRAWLOSINGTRUCK

	;DRAW WINNER TRUCK
	MOVL	*A13(PD_TRUCK1),A0
	MOVL	*A2(CT_WINTRUCK1),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	MOVL	*A13(PD_TRUCK2),A0
	MOVL	*A2(CT_WINTRUCK2),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;SET THE POSITION REGS
	MOVI	WIN_BOX,A14
	MOVW	*A14+,A2
	MOVW	*A14,A3
	ADD	A4,A2
	JRUC	WP_DONEDRAWINGTRUCK

WP_DRAWLOSINGTRUCK
	;DRAW LOSER TRUCK
	MOVL	*A13(PD_TRUCK1),A0
	MOVL	*A2(CT_LOSETRUCK1),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	MOVL	*A13(PD_TRUCK2),A0
	MOVL	*A2(CT_LOSETRUCK2),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;SET THE POSITION REGS
	MOVI	CAR_BOX,A14
	MOVW	*A14+,A2
	MOVW	*A14,A3
	ADD	A4,A2

WP_DONEDRAWINGTRUCK
	;POSITION IT
	MOVL	*A13(PD_TRUCK1),A0
	MOVW	A2,*A0(OXPOS)
	MOVW	A3,*A0(OZPOS)
	MOVL	*A13(PD_TRUCK2),A0
	MOVW	A2,*A0(OXPOS)
	MOVW	A3,*A0(OZPOS)


	;DRAW AND ANIMATE THE PLACE MARKER
	MOVI	PLACE_BOX,A14
	MOVW	*A14+,A2
	MOVW	*A14,A3
	ADD	A4,A2

	;CREATE, ACTIVATE, AND PLACE
	MOVI	WS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0 hOBJECT
	MOVW	A2,*A0(OXPOS)
	MOVW	A3,*A0(OYPOS)
	MOVL	A0,*A13(PD_PLACE)

	;ANIMATE IT
	MOVI	PLACES,A2
	MOVI	20h,A3
	MPYS	A8,A3
	ADD	A3,A2
	MOVL	*A2,A2
	MOVL	A2,*A0(ANIMFRM)			;SET NEXT ANIM FRAME
	MOVL	A2,*A0(ANIMSCR)			;SET TOP OF ANIM
	MOVK	1,A14
	MOVW	A14,*A0(ANIMSLPB)		;SET ANIM SLEEP TIME
	CALLA	INSANI ;IN:A0 OBJ

	;NOW SET INSERT COIN/NEXT FREE THANG
	MOVI	CREDIT_BOX,A14
	MOVW	*A14+,A2
	MOVW	*A14,A3
	ADD	A4,A2

	MOVI	WS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0 hOBJECT
	MOVW	A2,*A0(OXPOS)
	MOVW	A3,*A0(OYPOS)
	MOVL	A0,*A13(PD_CREDMESSAGE)

	MOVE	A8,A8
	JRZ	WP_NEXTFREE

	;ANIMATE THE INSERT COIN THANG
	MOVI	ASINSERTCOIN,A2
	JRUC	WP_CREDANIMSET
	
WP_NEXTFREE
	;SET THE NEXT FREE THANG
	MOVI	ASNEXTFREE,A2

WP_CREDANIMSET
	MOVL	A2,*A0(ANIMFRM)			;SET NEXT ANIM FRAME
	MOVL	A2,*A0(ANIMSCR)			;SET TOP OF ANIM
	MOVK	1,A14
	MOVW	A14,*A0(ANIMSLPB)		;SET ANIM SLEEP TIME
	CALLA	INSANI ;IN:A0 OBJ

	;INPUTLOOP
WP_INPUTLOOP
	MMTM	A12,A4,A5,A6,A7
	SLEEP	1
	MMFM	A12,A4,A5,A6,A7

	; B3 IS THE BUTTON PRESS ACCUMULATOR
	CLR	B3

	MOVW	*A9(INPB0),A14
	CMP	A14,A5
	JRZ	CHECK_BTN_1

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	CHECK_BTN_1

	;IT'S A PRESS
	INC	B3

CHECK_BTN_1
	MOVW	*A9(INPB1),A14
	CMP	A14,A6
	JRZ	CHECK_BTN_2

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	CHECK_BTN_2

	;IT'S A PRESS
	INC	B3

CHECK_BTN_2
	MOVW	*A9(INPB2),A14
	CMP	A14,A7
	JRZ	END_PRESSCHECK

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	END_PRESSCHECK

	;IT'S A PRESS
	INC	B3

END_PRESSCHECK
	;IN ANY CASE, UPDATE ALL THREE BUTTON COUNT REGS
	MOVW	*A9(INPB0),A5
	MOVW	*A2(INPB1),A6
	MOVW	*A2(INPB2),A7

	;NOW, IF THERE WERE ANY PRESSES, HANDLE THEM
	MOVE	B3,B3
	JRZ	WP_NO_PRESS

	;THIS IS A PRESS.  JUMP OUT OF THE WAITLOOP
	JRUC	WP_DONE

WP_NO_PRESS
	JRUC	WP_INPUTLOOP


WP_DONE
	;DECREMENT THE ACTIVE WINPANELS COUNTER
	MOVW	@ACTIVE_WINPANELS,A14
	DEC	A14
	MOVW	A14,@ACTIVE_WINPANELS
	DIE




* EOF








