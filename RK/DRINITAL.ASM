***
*** FILE: DRINITAL.ASM
*** PROCESSES AND FUNCTIONS FOR THE ENTER INITIALS PHASE
***
*** JMS 24 MAR 93; STARTED
*** 
	.MLIB	"APMACS.LIB"
	.FILE	"DRINITAL.ASM"
	.TITLE	"<<< DERBY RACE -- ENTER INITIALS >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**
** COMPILE FLAGS
**

**************************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"
	.INCLUDE	"IMGTBLB1.GLO"
	.INCLUDE	"IMGTBLM2.GLO"
	.INCLUDE	"DISPEQU.ASM"
	.INCLUDE	"DRB.I"
	.INCLUDE	"DRINP.I"
	.INCLUDE	"DRSND.I"
	.INCLUDE	"DRDISP.I"

** OTHERS USE
	.DEF	FLP_ENTER_INITIALS	;DRINITAL.ASM
	.DEF	DROP_FLAG		;DRINITAL.ASM
	.DEF	GET_BUTTON_CHECKSUM	;DRINITAL.ASM
	.DEF	GET_BUTTON_CHECKSUM	;DRINITAL.ASM

** WE USE
	.REF	DISPATCHPROC	;AP.ASM
	.REF	CLRGCOL		;APD.ASM
	.REF	SETGCOL		;APD.ASM
	.REF	FLP_SELECT_CHARACTER	;DRCHRSEL.ASM
	.REF	SET_IMAGE   	;DREQUIP.ASM
	.REF	INSANI		;APD.ASM
	.REF	INSOBJ		;APD.ASM
	.REF	INSERT_OBJ	;APD.ASM
	.REF	ZAP_OBJ		;APD.ASM
	.REF	STARTNEWATTRACT	;DRATT.ASM
	.REF	GAMEOVER	;DRATT.ASM
	.REF	GETINPDATA	;DRINP.ASM
	.REF	GETFPAL		;APPALL.ASM
	.REF	MAKESND		;DRSND.ASM
	.REF	GCOLWATCHER	;APD.ASM
	.REF	GAME_STATE	;


** WE USE -- RAM


** LOCAL VARIABLES
	.BSS	ACTIVE_INITPANELS,10h	;ACTIVE PANELS COUNTER
	.BSS	OBJECT_HANDLES,20h*71*3	;SPACE FOR 30 OBJECT HANDLES FOR EACH
					;INSTANCE OF ENTER_INITS

	.BSS	PERSONAL_DATA,50h*3	;HOLDS DATA FROM INPUT STUFF
	.BSS	DROP_FLAG,30h		;1 WORD/PANEL.  NONZERO IF STUFF IS
					;FALLING.
	.BSS	INITIAL_OVERTIME,10h	;TIMEOUT FLAG

** DEFINES

* INITIALIZATION OBJECTS

EI_GENERIC_OBJECT
	.LONG	FONT_A		;IMAGE
	.LONG	0		;COLLISION VECTOR
	.WORD	OID_JUNK+M_OIDFAUTOVEL	;OID
	.WORD	DMAWNZ		;OCTRL
	.WORD	0		;OFLAGS
	.WORD	STYPNONE	;OSCALTYP
	.LONG	0		;CFUNC

* PERSONAL_DATA OFFSETS

PER_SIZE	EQU	50h
PER_INITIAL1	EQU	0000h	;FIRST INITIAL (A=0, B=1, ...)
PER_INITIAL2	EQU	0010h	;SECOND INITIAL
PER_INITIAL3	EQU	0020h	;THIRD INITIAL
PER_BMONTH	EQU	0030h	;BIRTH MONTH (JAN=0, FEB=1, ...)
PER_BDATE	EQU	0040h	;BIRTH DATE


* OBJECT HANDLE OFFSETS

OH_SIZE		EQU	20h*71	;SIZE OF ONE FILE
OH_LETTERS	EQU	0000h
OH_MONTHS	EQU	OH_LETTERS+(20h*28)
OH_DAYS		EQU	OH_MONTHS+(20h*12)
OH_LASTINITIAL	EQU	20h*28	;SIZE OF ALPHABET SELECTION HANDLEFILE
OH_LASTMONTH	EQU	20h*12	;SIZE OF MONTH SELECTION HANDLEFILE
OH_LASTDATE	EQU	20h*31	;SIZE OF DATE SELECTION HANDLEFILE


* PDATA OFFSETS

PD_TITLE1	EQU	PDATA+0000h	;UHL HEADER OF TITLE BLOCK1
PD_TITLE2	EQU	PDATA+0020h	;UHL HEADER OF TITLE BLOCK2
PD_TITLE3	EQU	PDATA+0040h	;UHL HEADER OF TITLE BLOCK3
PD_INIT1	EQU	PDATA+0060h	;UHL HANDLE OF FIRST INITIAL
PD_SELMONTH	EQU	PD_INIT1	;A UNION
PD_SELDATE	EQU	PD_INIT1
PD_INIT2	EQU	PDATA+0080h	;UHL HANDLE OF SECOND INITIAL
PD_TOPDATE	EQU	PD_INIT2	;ANOTHER UNION
PD_INIT3	EQU	PDATA+00A0h	;UHL HANDLE OF THIRD INITIAL
PD_NUMINITS	EQU	PDATA+00C0h	;UHW NUMBER OF INITIALS SELECTED
PD_SELOBJ	EQU	PDATA+00D0h	;UHL HANDLE OF SELECTOR OBJECT
PD_BACKPANEL	EQU	PDATA+00F0h	;UHL HANDLE OF CURRENT/LOW BACKPANEL
					; NOTE THAT THE HANDLE OF A BACKPANEL
					; IS DISCARDED ONCE IT STARTS FALLING.

* OBJECT DATA OFFSETS

OBOUNCECOUNT	EQU	OVAR1		;UHW NUMBER OF BOUNCES LEFT
OPANEL		EQU	OVAR1+0010h	;UHW OWNER PANEL NUMBER

* SCREEN COORDINATES

EI_PANEL_WIDTH	EQU	128

EI_INITPOS	   		;INITIAL ENTRY TITLE BLOCK
	.WORD	9,12
EI_MONTHPOS			;MONTH ENTRY TITLE BLOCK
	.WORD	15,12
EI_DATEPOS			;DATE ENTRY TITLE BLOCK
	.WORD	20,12

EI_INITINIT			;X,Y OF TOPLEFT CHARACTER IN INITIAL GRID
	.WORD	18,36
EI_XINC				;X DISTANCE BETWEEN ADJACENT INIT CHARACTERS
	.WORD	24
EI_YINC				;Y DISTANCE BETWEEN ADJACENT INIT LINES
	.WORD	25

EI_PERLINE	EQU	4	;CHARACTERS PER LINE


EBM_TOPLEFT
	.WORD	16,36
EBM_XINC
	.WORD	50
EBM_YINC
	.WORD	25

EBM_PERLINE	EQU	2	;MONTHS PER LINE

EBM_SELPOS			;X,Y OF CURRENTLY SELECTED MONTH
	.WORD	43,214


EBD_TOPLEFT
	.WORD	7,36
EBD_XINC
	.WORD	28
EBD_YINC
	.WORD	22

EBD_PERLINE	EQU	4	;DAYS PER LINE


* FONTS

EI_FONT
	.LONG	ENTR_A
	.LONG	ENTR_B
	.LONG	ENTR_C
	.LONG	ENTR_D
	.LONG	ENTR_E
	.LONG	ENTR_F
	.LONG	ENTR_G
	.LONG	ENTR_H
	.LONG	ENTR_I
	.LONG	ENTR_J
	.LONG	ENTR_K
	.LONG	ENTR_L
	.LONG	ENTR_M
	.LONG	ENTR_N
	.LONG	ENTR_O
	.LONG	ENTR_P
	.LONG	ENTR_Q
	.LONG	ENTR_R
	.LONG	ENTR_S
	.LONG	ENTR_T
	.LONG	ENTR_U
	.LONG	ENTR_V
	.LONG	ENTR_W
	.LONG	ENTR_X
	.LONG	ENTR_Y
	.LONG	ENTR_Z
	.LONG	INT_SPC
	.LONG	BCKSPACE
EI_FONTX

EI_MFONT
	.LONG	ENTR_JAN
	.LONG	ENTR_FEB
	.LONG	ENTR_MAR
	.LONG	ENTR_APR
	.LONG	ENTR_MAY
	.LONG	ENTR_JUN
	.LONG	ENTR_JUL
	.LONG	ENTR_AUG
	.LONG	ENTR_SEP
	.LONG	ENTR_OCT
	.LONG	ENTR_NOV
	.LONG	ENTR_DEC
EI_MFONTX

EI_DFONT
	.LONG	ENTR_1
	.LONG	ENTR_2
	.LONG	ENTR_3
	.LONG	ENTR_4
	.LONG	ENTR_5
	.LONG	ENTR_6
	.LONG	ENTR_7
	.LONG	ENTR_8
	.LONG	ENTR_9
	.LONG	ENTR_10
	.LONG	ENTR_11
	.LONG	ENTR_12
	.LONG	ENTR_13
	.LONG	ENTR_14
	.LONG	ENTR_15
	.LONG	ENTR_16
	.LONG	ENTR_17
	.LONG	ENTR_18
	.LONG	ENTR_19
	.LONG	ENTR_20
	.LONG	ENTR_21
	.LONG	ENTR_22
	.LONG	ENTR_23
	.LONG	ENTR_24
	.LONG	ENTR_25
	.LONG	ENTR_26
	.LONG	ENTR_27
	.LONG	ENTR_28
	.LONG	ENTR_29
	.LONG	ENTR_30
	.LONG	ENTR_31
EI_DFONTX


;DROP SOUNTS
DROP_SOUND
	.LONG	SNDSELSHAKE1
	.LONG	SNDSELSHAKE2
	.LONG	SNDSELSHAKE3
DROP_SOUNDX

* FUNCTION CONTROL ARGUMENTS

LAD_STANDARD	EQU	0h
LAD_BOUNCE	EQU	1h


* MISCELLANEOUS

EI_THRESHHOLD	EQU	0400h

EI_FLASHRATE	EQU	10

EI_INITSPACING	EQU	2

EI_INITZ	EQU	214

EI_DAYS_IN_MONTH
	.WORD	31,29,31,30,31,30,31,31,30,31,30,31

ASCII_A		EQU	41h

SELECTOR_SIZEX	EQU	2	;HORIZONTAL EXPAND OF SELOBJ
SELECTOR_SIZEY	EQU	2	;VERTICAL

EI_INITFINY	EQU	100
EI_DATEFINY	EQU	130

**
** FLP_ENTER_INITIALS - FLOW-LEVEL PROCESS
**
**  IN
**    NONE
**
**  OUT
**    NONE
**
**  PURPOSE
**    HANDLES THE BIT WHERE PEOPLE ENTER THEIR INITIALS, BIRTHDATES,
**    CREDIT CARD NUMBERS, AND MAIDEN NAMES.
**
**  JMS 29 MAR 93
**

FLP_ENTER_INITIALS

	;SET GAME_STATE
	MOVI	INENTERINITS,A14
	MOVW	A14,@GAME_STATE

	;CREATE THE GROUND COLLISION WATCHER
	CREATE	PID_DRAGONE,GCOLWATCHER

	;CLEAR THE TIMEOUT FLAG
	CLR	A14
	MOVW	A14,@INITIAL_OVERTIME

	;CREATE THE TIMEOUT WATCHER
	CREATE	PID_DRAGONE,INITIAL_TIMER

	;CLEAR THE ACTIVE INITPANELS COUNTER
	CLR	A0
	MOVW	A0,@ACTIVE_INITPANELS

	;INVOKE THREE INSTANCES OF ENTER_INITIALS, ONE FOR EACH PLAYER
	CLR	A10
	CREATE	PID_DRAGONE,ENTER_INITS
	INC	A10
	CREATE	PID_DRAGONE,ENTER_INITS
	INC	A10
	CREATE	PID_DRAGONE,ENTER_INITS

	;WAIT FOR THEM TO ALL DIE OFF
FLPEI_WAITLOOP
	SLEEP	1
	MOVW	@ACTIVE_INITPANELS,A0
	JRNZ	FLPEI_WAITLOOP

	;WE'RE DONE.  MOVE ON TO THE GAME
	CREATE	PID_MAIN,DISPATCHPROC
	DIE


**
** ENTER_INITS
**
**  IN
**    A10 PLAYER NUMBER
**
**  OUT
**    NONE
**
**  PURPOSE
**    HANDLES PERSONAL INFORMATION ENTRY FOR ONE PLAYER
**
**  JMS 29 MAR 93
**  JMS 30 MAR 93
**

ENTER_INITS

	;REG USE
	;  A0 SCRATCH
	;  A1 SCRATCH
	;  A2 SCRATCH
	;  A3 SCRATCH
	;  A4 POINTER TO AN IMAGE IN THE FONT CORRESPONDING TO A11
	;  A5 CHARACTER FLASHCOUNT	;FINAL INIT1
	;  A6 START BUTTON COUNT	;FINAL INIT2
	;  A7 WHEEL COUNT		;FINAL INIT3
	;  A8 INPUT PORT ADDRESS	;FINAL MONTH
	;  A9 POINTER TO HANDLE DATA	;FINAL DATE
	; A10 PLAYER NUMBER
	; A11 POINTER TO HANDLE DATA FOR CURRENTLY SELECTED CHARACTER

	;  B0 # OF DAYS IN SELECTED MONTH ;STORE IN A0
	;  B1 BUTTON 0 COUNT	;STORE IN A1
	;  B2 BUTTON 2 COUNT	;STORE IN A2

	;INCREMENT THE ACTIVE_INITPANELS COUNTER
	MOVW	@ACTIVE_INITPANELS,A0
	INC	A0
	MOVW	A0,@ACTIVE_INITPANELS

	;CLEAR OUR DROP FLAG
	MOVI	10h,A1
	MPYS	A10,A1
	MOVI	DROP_FLAG,A0
	ADD	A1,A0
	CLR	A14
	MOVW	A14,*A0

	;SET THE POINTER TO THE OBJECT HANDLE TABLE
	MOVI	OH_SIZE,A1
	MPYS	A10,A1

	MOVI	OBJECT_HANDLES,A9
	ADD	A1,A9

	;GET THE INPUT ADDRESS
	MOVE	A10,A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A8

	;CREATE THE SELECT OBJECT
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_SELOBJ)

	;SET THE IMAGE ON IT
	MOVI	BIRTHMON,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;MESS WITH THE DMA CONTROLS
	MOVW	*A0(OCTRL),A1
	XORI	DMAWNZ,A1
	ORI	DMACAL,A1
	MOVW	A1,*A0(OCTRL)

	;SET THE PAL COLOR
	MOVI	0202h,A1
	MOVW	A1,*A0(OCONST)

	;ACTIVATE IT
	CALLA	INSOBJ ;IN:A0 hOBJECT

	;THREE SEGMENTS TO THIS SEQUENCE:

	;************************************************
	;*                                              *
	;*             ENTER INITIALS PHASE             *
	;*                                              *
	;************************************************
EI_INITALS
	;CREATE THE BACKPANEL
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_BACKPANEL)

	;ACTIVATE IT
	CALLR	INSOBJ ;IN:A0 hOBJECT

	;SET THE IMAGE ON THE BACKPANEL
	MOVI	ENTR_BCK1,A1
	CALLA	SET_IMAGE ;IN:A0,A1  hOBJECT,hIMAGE

	;PLACE IT
	CLR	A14
	MOVW	A14,*A0(OYPOS)
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVW	A1,*A0(OXPOS)

	;CREATE THE TITLE BLOCK
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_TITLE1)

	;ACTIVATE IT
	CALLR	INSOBJ ;IN:A0 hOBJECT

	;SET THE IMAGE ON THE TITLE BLOCK
	MOVL	*A13(PD_TITLE1),A0
	MOVI	INT_ENTR,A1
	CALLA	SET_IMAGE ;IN:A0,A1  hOBJECT,hIMAGE

	;SET THE OWNER BIT
	INC	A10
	MOVW	A10,*A0(OPANEL)
	DEC	A10

	;SET NUMINITS TO ZERO
	CLR	A14
	MOVW	A14,*A13(PD_NUMINITS)

	;POSITION THE TITLE BLOCK
	MOVL	*A13(PD_TITLE1),A2
	MOVI	EI_INITPOS,A14
	MOVW	*A14+,A0
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A0
	MOVW	A0,*A2(OXPOS)
	MOVW	*A14(0),*A2(OZPOS)

	;SET THE ACTIVE CHARACTER POINTER
	MOVE	A9,A11

	;SET THE FONT POINTER
	MOVI	EI_FONT,A4

	;CREATE THE SELECTED INITIALS OBJECTS, AND INSERT THEM
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_INIT1)
	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_INIT2)
	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_INIT3)
	CALLA	INSOBJ ;IN:A0 hOBJECT

	;TURN THE LAST TWO OFF, AND SET THE IMAGE ON THE FIRST
	MOVL	*A13(PD_INIT1),A0
	MOVL	*A4,A1
	CALLA	SET_IMAGE ;IN:A0,A1  hOBJECT,hIMAGE

	SETF	1,0,0
	CLR	A14
	MOVL	*A13(PD_INIT2),A0
	MOVE	A14,*A0(OCTRL+15),0
	MOVL	*A13(PD_INIT3),A0
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0

	;SET THEIR Z POSITIONS, AND CALL PLACE_INITIALS TO SET THEIR X'S
	MOVL	*A13(PD_INIT1),A0
	MOVI	EI_INITZ,A14
	MOVW	A14,*A0(OZPOS)

	MOVL	*A13(PD_INIT2),A0
	MOVI	EI_INITZ,A14
	MOVW	A14,*A0(OZPOS)

	MOVL	*A13(PD_INIT3),A0
	MOVI	EI_INITZ,A14
	MOVW	A14,*A0(OZPOS)

	CALLA	PLACE_INITIALS

	;PRE-LOOP SAVE
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7

	;DRAW THE ALPHABET
	;REG USE FOR THIS LOOP
	; A0  USED FOR IMAGE SETTING
	; A1  USED FOR IMAGE SETTING
	; A2  CURRENT X POSITION
	; A3  CURRENT Y POSITION
	; A4  FONT POSITION POINTER
	; A5  USED FOR OBJECT CREATION
	; A6  HANDLE TABLE POINTER
	; A7  LINE COUNTER

	;INITIALIZE THE REGISTERS
	MOVE	A9,A6
	MOVI	EI_FONT,A4
	MOVI	EI_INITINIT,A14
	MOVW	*A14+,A2
	MOVE	*A14,A3
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	CLR	A7

EI_DRAWALPHALOOP
	;CREATE A CHARACTER
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT

	;STORE IT IN THE HANDLE TABLE
	MOVL	A0,*A6+

	;SET THE IMAGE
	MOVL	*A4+,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;PLACE IT
	MOVW	A3,*A0(OZPOS)

	MOVW	*A0(OSIZEX),A1
	MOVW	@EI_XINC,A5
	SUB	A1,A5
	SRL	1,A5
	ADD	A2,A5
	MOVW	A5,*A0(OXPOS)

	;ACTIVATE IT
	CALLA	INSOBJ ;IN:A0 hOBJECT

	;SET THE OWNER BIT
	INC	A10
	MOVW	A10,*A0(OPANEL)
	DEC	A10

	;UPDATE THE POSITION REGISTERS
	INC	A7
	CMPI	EI_PERLINE,A7
	JRNE	EIL_SAME_LINE

	;THE NEXT CHARACTER WILL BE ON A NEW LINE
	CLR 	A7
	MOVI	EI_INITINIT,A14
	MOVW	*A14,A2
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	MOVI	EI_YINC,A14
	MOVW	*A14,A14
	ADD	A14,A3
	JRUC	EIL_PROCEED

EIL_SAME_LINE
	;THE NEXT CHARACTER WILL BE ON THE SAME LINE
	MOVI	EI_XINC,A14
	MOVW	*A14,A14
	ADD	A14,A2

EIL_PROCEED
	;NEXT
	CMPI	EI_FONTX,A4
	JRNE	EI_DRAWALPHALOOP

	;POST-LOOP RESTORE
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7

	;NOW DO THE ACTUAL ENTRY STUFF

	;SET THE WHEEL MOTION AND BUTTON COUNT REGISTERS
	MOVW	*A8(INPB0),A14
	MOVE	A14,B1
	MOVW	*A8(INPB1),A6
	MOVW	*A8(INPB2),A14
	MOVE	A14,B2
	CLR	A7

	;CLEAR THE FLASHCOUNT ACCUMULATOR
	MOVI	EI_FLASHRATE,A5

	;SET THE SELECTOR BOX
	MOVL	*A11,A0
	MOVL	*A13(PD_SELOBJ),A1
	CALLR	PLACE_SELECTOR ;IN:A0,A1 hOBJECT,hSHADOW

EIL_INPUTLOOP
	MOVE	B0,A0
	MOVE	B1,A1
	MOVE	B2,A2
	MMTM	A12,A0,A1,A2,A4,A5,A6,A7
	SLEEP	1
	MMFM	A12,A0,A1,A2,A4,A5,A6,A7
	MOVE	A2,B2
	MOVE	A1,B1
	MOVE	A0,B0

	;CHECK FOR A FLASH TOGGLE
	DEC	A5
	JRNZ	EIL_NO_TOGGLE

	;THERE'S A FLASH
	MOVI	EI_FLASHRATE,A5
	SETF	1,0,0
	CLR	A14
	MOVL	*A13(PD_SELOBJ),A0
	MOVE	*A0(OCTRL+15),A1,0
	INC	A1
	CMPI	2h,A1
	JRNE	EIL_FLASHON

	;THIS IS A FLASH OFF, NOT ON, SO MAKE IT NOT LAST AS LONG
	SRL	1,A5

EIL_FLASHON
	MOVE	A1,*A0(OCTRL+15),0
	SETF	16,1,0

EIL_NO_TOGGLE
	;UPDATE THE BUTTON COUNTS
	; B3 IS THE BUTTON PRESS ACCUMULATOR
	CLR	B3

	MOVW	*A8(INPB0),A14
	MOVE	A14,B14
	CMP	B14,B1
	JRZ	EIL_CHECK_BTN_1

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	EIL_CHECK_BTN_1

	;IT'S A PRESS
	INC	B3

EIL_CHECK_BTN_1
	MOVW	*A8(INPB1),A14
	CMP	A14,A6
	JRZ	EIL_CHECK_BTN_2

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	EIL_CHECK_BTN_2

	;IT'S A PRESS
	INC	B3

EIL_CHECK_BTN_2
	MOVW	*A8(INPB2),A14
	MOVE	A14,B14
	CMP	B14,B2
	JRZ	EIL_END_PRESSCHECK

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	EIL_END_PRESSCHECK

	;IT'S A PRESS
	INC	B3

EIL_END_PRESSCHECK
	;IN ANY CASE, UPDATE ALL THREE BUTTON COUNT REGS
	MOVW	*A8(INPB0),A14
	MOVE	A14,B1
	MOVW	*A8(INPB1),A6
	MOVW	*A8(INPB2),A14
	MOVE	A14,B2

	;TIMER HOTWIRE.  IF WE'RE OVERTIME, FORCE A PRESS
	MOVW	@INITIAL_OVERTIME,A14
	JRZ	EI_NOTOVER1
	INC	B3
	
EI_NOTOVER1

	;NOW, IF THERE WERE ANY PRESSES, HANDLE THEM
	MOVE	B3,B3
	JRZ	EI_NO_PRESS

	;IT'S A PRESS.  MAKE NOISE, THEN CHECK FOR A BACKSPACE CHARACTER
	MOVI	SNDSELSELECT,A14
	CALLA	MAKESND ;IN:A14 SOUND

	;IF THE SELECTED CHARACTER IS THE BACKSPACE, BACK UP
	MOVI	BCKSPACE,A14
	MOVL	*A4,A0
	CMP	A0,A14
	JRNE	EI_NORMALCHAR

	;THEY'VE HIT THE BACKSPACE.  DEACTIVATE THE CURRENT CHARACTER
	;  AND DECREMENT THE NUMBER OF SELECTED CHARACTERS.

	MOVW	*A13(PD_NUMINITS),A0
	;IGNORE THE BACKSPACE IF THERE ARE NO SELECTED CHARACTERS
	JRZ	EIL_INPUTLOOP

	;DEACTIVATE CURRENT CHARACTER
	MOVE	A13,A0
	ADDI	PD_INIT1,A0
	MOVI	20h,A1
	MOVW	*A13(PD_NUMINITS),A2
	MPYS	A2,A1
	ADD	A1,A0
	MOVL	*A0,A0
	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0

	;DECREMENT SELECTED CHARACTERS
	MOVW	*A13(PD_NUMINITS),A0
	DEC	A0
	MOVW	A0,*A13(PD_NUMINITS)

	;REALIGN THE INIT STRING
	CALLR	PLACE_INITIALS ;IN:A10,A13 PLAYER #,PDATA

	JRUC	EIL_INPUTLOOP

EI_NORMALCHAR
	;IT'S A PRESS AND !BACKSPACE.  IF WE'RE ON THE LAST CHARACTER,
	;  FINISH UP.  IF WE'RE NOT, MOVE TO THE NEXT ONE

	;BUT FIRST, LOAD THE CHARACTER INTO THE PERSONAL_DATA STRUCT
	MOVI	PERSONAL_DATA,A2

	MOVI	PER_SIZE,A1
	MPYS	A10,A1
	ADD	A1,A2

	MOVW	*A13(PD_NUMINITS),A14
	MOVI	10h,A1
	MPYS	A14,A1
	ADD	A1,A2

	MOVE	A11,A0
	SUB	A9,A0
	SRL	5,A0	;(DIVIDE BY 32 TO FIND THE OFFSET)
	ADDI	ASCII_A,A0

	MOVW	A0,*A2

	MOVW	*A13(PD_NUMINITS),A14
	CMPI	2h,A14
	JREQ	EIL_DONE

	;INCREMENT THE NUMBER OF ACTIVE CHARACTERS
	MOVW	*A13(PD_NUMINITS),A14
	INC	A14
	MOVW	A14,*A13(PD_NUMINITS)

	;THIS WASN'T THE LAST CHARACTER.  ACTIVATE THE CURRENT INITCHARACTER

	MOVE	A13,A0
	ADDI	PD_INIT1,A0
	MOVW	*A13(PD_NUMINITS),A14
	MOVI	20h,A1
	MPYS	A14,A1
	ADD	A1,A0
	MOVL	*A0,A0

	SETF	1,0,0
	MOVI	1h,A1
	MOVE	A1,*A0(OCTRL+15),0
	SETF	16,1,0

	;SET THE IMAGE
	MOVL	*A4,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;PLACE THE NEW STRING
	CALLA	PLACE_INITIALS ;IN:A10,A13 PLAYER #,PDATA

	JRUC	EIL_INPUTLOOP

EI_NO_PRESS
	;CHECK WHEEL MOTION
	MOVW	*A8(INPWHEELMAG),A14
	ADD	A14,A7

	CMPI	-EI_THRESHHOLD,A7
	JRGE	EI_NO_ACWISE

	;WE'RE ABOVE THE THRESHHOLD.  MOVE FORWARD A NOTCH

	;NOW MOVE FORWARD, WRAPPING AROUND IF NECCESARY
	ADDI	20h,A4
	ADDI	20h,A11	
	MOVE	A9,A14
	ADDI	OH_LASTINITIAL,A14
	CMP	A14,A11
	JRNE	EIAC_NOWRAP

	;WRAPAROUND.  RESET TO BOTTOM
	MOVI	EI_FONT,A4
	MOVE	A9,A11

EIAC_NOWRAP
	JRUC	EI_MOVEFOCUS
	
EI_NO_ACWISE
	CMPI	EI_THRESHHOLD,A7
	JRLE	EI_INPDONE

	;WE'RE BELOW THE THRESHHOLD.  MOVE BACKWARD A NOTCH

	;NOW MOVE BACKWARD, WRAPPING AROUND IF NECCEARY
	ADDI	-20h,A4
	ADDI	-20h,A11
	MOVE	A9,A14
	CMP	A11,A14
	JRLE	EICW_NOWRAP

	;WRAPAROUND LOW.  RESET TO TOP
	MOVI	EI_FONTX,A4
	ADDI	-20h,A4
	MOVE	A9,A11
	ADDI	OH_LASTINITIAL-20h,A11

EICW_NOWRAP
	JRUC	EI_MOVEFOCUS

EI_MOVEFOCUS
	;CLEAR THE WHEEL MOTION ACCUMULATOR
	CLR	A7

	;SET THE IMAGE ON THE CURRENTLY ACTIVE CHARACTER
	MOVE	A13,A0
	ADDI	PD_INIT1,A0
	MOVI	20h,A1
	MOVW	*A13(PD_NUMINITS),A2
	MPYS	A2,A1
	ADD	A1,A0
	MOVL	*A0,A0

	MOVL	*A4,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;TURN THE LITTLE GUY OFF IF HE'S A SPACE, OR ON OTHERWISE
	CMPI	INT_SPC,A1
	JRNE	EIL_NOT_SPACE

	;IT'S A SPACE.  TURN IT OFF
	CLR	A14
	SETF	1,0,0
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0
	JRUC	EIL_SPACE_CONTINUE

EIL_NOT_SPACE
	INC	A14
	SETF	1,0,0
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0

EIL_SPACE_CONTINUE
	;RESET THE INITIAL POSITIONS
	CALLR	PLACE_INITIALS ;IN:A10,A13 PLAYER #,PDATA

	;MOVE THE SELECTOR WIDGET
	MOVL	*A11,A0
	MOVL	*A13(PD_SELOBJ),A1
	CALLR	PLACE_SELECTOR ;IN:A0,A1 hOBJECT,hSHADOW

	;MAKE NOISE
	MOVI	SNDSELSCROLL,A14
	CALLA	MAKESND ;IN:A14

EI_INPDONE
	JRUC	EIL_INPUTLOOP

EIL_DONE
	;DROP THE ALPHABET
	MOVE 	A9,A3

	MOVE	A3,A4
	ADDI	OH_LASTINITIAL,A4

EI_MOVEALPHALOOP
	MOVL	*A3+,A0

	CALLA	DROP_OBJECT ;IN:A0 hOBJECT

	CMP	A3,A4
	JRNE	EI_MOVEALPHALOOP

	;NOW SET THE INITIAL OBJECTS IN MOTION
	MOVL	*A13(PD_INIT1),A0
	CALLA	DROP_OBJECT ;IN:A0 hOBJECT

	MOVL	*A13(PD_INIT2),A0
	CALLA	DROP_OBJECT ;IN:A0 hOBJECT

	MOVL	*A13(PD_INIT3),A0
	CALLA	DROP_OBJECT ;IN:A0 hOBJECT

	;DROP THE TITLE TOO
	MOVL	*A13(PD_TITLE1),A0
	CALLA	DROP_OBJECT ;IN:A0 hOBJECT

	;DROP THE BACK PANEL
	MOVL	*A13(PD_BACKPANEL),A0
	CALLA	DROP_OBJECT ;IN:A0 hOBJECT

	;************************************************
	;*                                              *
	;*            ENTER BIRTHMONTH PHASE            *
	;*                                              *
	;************************************************
EI_MONTH
	;CREATE THE BACKPANEL
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_BACKPANEL)

	;ACTIVATE IT
	CALLR	INSOBJ ;IN:A0 hOBJECT

	;SET THE IMAGE ON THE BACKPANEL
	MOVI	ENTR_BCK1,A1
	CALLA	SET_IMAGE ;IN:A0,A1  hOBJECT,hIMAGE

	;PLACE IT
	CLR	A14
	MOVW	A14,*A0(OYPOS)
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVW	A1,*A0(OXPOS)

	;AND THEN LIFT/DROP IT
	MOVI	LAD_BOUNCE,A1
	CALLA	LIFT_AND_DROP ;IN:A0,A1 hOBJECT,CONTROL

	;CREATE THE TITLE BLOCK
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_TITLE2)

	;ACTIVATE IT
	CALLR	INSOBJ ;IN:A0 hOBJECT

	;SET THE OWNER BIT
	INC	A10
	MOVW	A10,*A0(OPANEL)
	DEC	A10

	;SET THE IMAGE ON THE TITLE BLOCK
	MOVL	*A13(PD_TITLE2),A0
	MOVI	BIRTHMON,A1
	CALLA	SET_IMAGE ;IN:A0,A1  hOBJECT,hIMAGE

	;POSITION THE TITLE BLOCK
	MOVL	*A13(PD_TITLE2),A2
	MOVI	EI_MONTHPOS,A14
	MOVW	*A14+,A0
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A0
	MOVW	A0,*A2(OXPOS)
	MOVW	*A14(0),*A2(OZPOS)

	MOVE	A2,A0
	MOVI	LAD_BOUNCE,A1
	CALLA	LIFT_AND_DROP ;IN:A0,A1 hOBJECT,CONTROL

	;AND MAKE NOISE
	MOVI	DROP_SOUND,A14
	MOVI	20h,A1
	MPYS	A10,A1
	ADD	A1,A14
	MOVL	*A14,A14

	CALLA	MAKESND ;IN:A14

	;PRE-LOOP SAVE
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8

	;DRAW THE MONTHS
	;REG USE FOR THIS LOOP
	; A0  USED FOR IMAGE SETTING
	; A1  USED FOR IMAGE SETTING
	; A2  CURRENT X POSITION
	; A3  CURRENT Y POSITION
	; A4  FONT POSITION POINTER
	; A5  USED FOR OBJECT CREATION
	; A6  HANDLE TABLE POINTER
	; A7  LINE COUNTER

	;INITIALIZE THE REGISTERS
	MOVE	A9,A6
	ADDI	OH_MONTHS,A6
	MOVI	EI_MFONT,A4
	MOVI	EBM_TOPLEFT,A14
	MOVW	*A14+,A2
	MOVE	*A14,A3
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	CLR	A7

EBM_DRAWMONTHSLOOP
	;CREATE A CHARACTER
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT

	;STORE IT IN THE HANDLE TABLE
	MOVL	A0,*A6+

	;PLACE IT
	MOVW	A2,*A0(OXPOS)
	MOVW	A3,*A0(OZPOS)

	;SET THE IMAGE
	MOVL	*A4+,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;ACTIVATE IT
	CALLA	INSOBJ ;IN:A0 hOBJECT

	;SET THE OWNER BIT
	INC	A10
	MOVW	A10,*A0(OPANEL)
	DEC	A10

	MOVI	LAD_BOUNCE,A1
	CALLA	LIFT_AND_DROP ;IN:A0,A1 hOBJECT,CONTROL

	;UPDATE THE POSITION REGISTERS
	INC	A7
	CMPI	EBM_PERLINE,A7
	JRNE	EBM_SAME_LINE

	;THE NEXT CHARACTER WILL BE ON A NEW LINE
	CLR 	A7
	MOVI	EBM_TOPLEFT,A14
	MOVW	*A14,A2
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	MOVI	EBM_YINC,A14
	MOVW	*A14,A14
	ADD	A14,A3
	JRUC	EBM_PROCEED

EBM_SAME_LINE
	;THE NEXT CHARACTER WILL BE ON THE SAME LINE
	MOVI	EBM_XINC,A14
	MOVW	*A14,A14
	ADD	A14,A2

EBM_PROCEED
	;NEXT
	CMPI	EI_MFONTX,A4
	JRNE	EBM_DRAWMONTHSLOOP

	;POST-LOOP RESTORE
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8

	;CREATE THE CURRENT MONTH OBJECT
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_SELMONTH)
	CALLA	INSOBJ ;IN:A0 hOBJECT
	MOVI	EI_MFONT,A1
	MOVL	*A1,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;PLACE IT
	MOVI	EBM_SELPOS,A14
	MOVW	*A14+,A2

	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	
	MOVW	A2,*A0(OXPOS)
	MOVW	*A14(0),*A0(OZPOS)

	;SET IT MOVING
	MOVI	-100h,A14
	MOVW	A14,*A0(OYPOS)
	MOVI	00100000h,A14
	MOVL	A14,*A0(OYVEL)

	;TURN THE SELECT OBJECT OFF
	MOVL	*A13(PD_SELOBJ),A0
	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0
	
	;STUFF IS FALLING NOW.  WAIT UNTIL IT'S ALL DONE
EBMLOOPX
	MOVE	B0,A0
	MOVE	B1,A1
	MOVE	B2,A2
	MMTM	A12,A0,A1,A2,A4,A5,A6,A7
	SLEEP	1
	MMFM	A12,A0,A1,A2,A4,A5,A6,A7
	MOVE	A2,B2
	MOVE	A1,B1
	MOVE	A0,B0

	MOVI	10h,A1
	MPYS	A10,A1
	MOVI	DROP_FLAG,A0
	ADD	A1,A0
	MOVW	*A0,A0
	JRNZ	EBMLOOPX

	;TURN THE SELECT FRAME BACK ON
	MOVL	*A13(PD_SELOBJ),A0
	SETF	1,0,0
	MOVK	1,A14
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0

	;SET THE WHEEL MOTION AND BUTTON COUNT REGISTERS
	MOVW	*A8(INPB0),A14
	MOVE	A14,B1
	MOVW	*A8(INPB1),A6
	MOVW	*A8(INPB2),A14
	MOVE	A14,B2
	CLR	A7

	;CLEAR THE FLASHCOUNT ACCUMULATOR
	MOVI	EI_FLASHRATE,A5

	;SET THE FONT INDICES
	MOVI	EI_MFONT,A4
	MOVE	A9,A11
	ADDI	OH_MONTHS,A11

	;SET THE SELECTOR BOX
	MOVL	*A11,A0
	MOVL	*A13(PD_SELOBJ),A1
	CALLR	PLACE_SELECTOR ;IN:A0,A1 hOBJECT,hSHADOW

EBM_INPUTLOOP
	MOVE	B0,A0
	MOVE	B1,A1
	MOVE	B2,A2
	MMTM	A12,A0,A1,A2,A4,A5,A6,A7
	SLEEP	1
	MMFM	A12,A0,A1,A2,A4,A5,A6,A7
	MOVE	A2,B2
	MOVE	A1,B1
	MOVE	A0,B0

	;CHECK FOR A FLASH TOGGLE
	DEC	A5
	JRNZ	EBM_NO_TOGGLE

	;THERE'S A FLASH
	MOVI	EI_FLASHRATE,A5
	SETF	1,0,0
	CLR	A14
	MOVL	*A13(PD_SELOBJ),A0
	MOVE	*A0(OCTRL+15),A1,0
	INC	A1
	CMPI	2h,A1
	JRNE	EBM_FLASHON

	;THIS IS A FLASH OFF, NOT ON, SO MAKE IT NOT LAST AS LONG
	SRL	1,A5

EBM_FLASHON
	MOVE	A1,*A0(OCTRL+15),0
	SETF	16,1,0

EBM_NO_TOGGLE
	;UPDATE THE BUTTON COUNTS
	; B3 IS THE BUTTON PRESS ACCUMULATOR
	CLR	B3

	MOVW	*A8(INPB0),A14
	MOVE	A14,B14
	CMP	B14,B1
	JRZ	EBM_CHECK_BTN_1

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	EBM_CHECK_BTN_1

	;IT'S A PRESS
	INC	B3

EBM_CHECK_BTN_1
	MOVW	*A8(INPB1),A14
	CMP	A14,A6
	JRZ	EBM_CHECK_BTN_2

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	EBM_CHECK_BTN_2

	;IT'S A PRESS
	INC	B3

EBM_CHECK_BTN_2
	MOVW	*A8(INPB2),A14
	MOVE	A14,B14
	CMP	B14,B2
	JRZ	EBM_END_PRESSCHECK

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	EBM_END_PRESSCHECK

	;IT'S A PRESS
	INC	B3

EBM_END_PRESSCHECK
	;IN ANY CASE, UPDATE ALL THREE BUTTON COUNT REGS
	MOVW	*A8(INPB0),A14
	MOVE	A14,B1
	MOVW	*A8(INPB1),A6
	MOVW	*A8(INPB2),A14
	MOVE	A14,B2

	;TIMER HOTWIRE.  IF WE'RE OVERTIME, FORCE A PRESS
	MOVW	@INITIAL_OVERTIME,A14
	JRZ	EI_NOTOVER2
	INC	B3
	
EI_NOTOVER2

	;NOW, IF THERE WERE ANY PRESSES, HANDLE THEM
	MOVE	B3,B3
	JRZ	EBM_NO_PRESS

	;IT'S A PRESS.  WE'RE DONE
	;MAKE NOISE
	MOVI	SNDSELSELECT,A14
	CALLA	MAKESND ;IN:A14 SOUND

	JRUC	EBM_DONE

EBM_NO_PRESS
	;CHECK WHEEL MOTION
	MOVW	*A8(INPWHEELMAG),A14
	ADD	A14,A7

	CMPI	-EI_THRESHHOLD,A7
	JRGE	EBM_NO_ACWISE

	;WE'RE ABOVE THE THRESHHOLD.  MOVE FORWARD A NOTCH
	;FIRST, SET THE CURRENT LETTER ON
	MOVL	*A11,A0
	MOVI	1,A1
	SETF	1,0,0
	MOVE	A1,*A0(OCTRL+15),0
	SETF	16,1,0

	;NOW MOVE FORWARD, WRAPPING AROUND IF NECCESARY
	ADDI	20h,A4
	ADDI	20h,A11	
	MOVE	A9,A14
	ADDI	OH_MONTHS,A14
	ADDI	OH_LASTMONTH,A14
	CMP	A14,A11
	JRNE	EBM_NOWRAP

	;WRAPAROUND.  RESET TO BOTTOM
	MOVI	EI_MFONT,A4
	MOVE	A9,A11
	ADDI	OH_MONTHS,A11

EBM_NOWRAP
	JRUC	EBM_MOVEFOCUS
	
EBM_NO_ACWISE
	CMPI	EI_THRESHHOLD,A7
	JRLE	EBM_INPDONE

	;WE'RE BELOW THE THRESHHOLD.  MOVE BACKWARD A NOTCH
	;FIRST, SET THE CURRENT LETTER ON
	MOVL	*A11,A0
	MOVI	1,A1
	SETF	1,0,0
	MOVE	A1,*A0(OCTRL+15),0
	SETF	16,1,0

	;NOW MOVE BACKWARD, WRAPPING AROUND IF NECCEARY
	ADDI	-20h,A4
	ADDI	-20h,A11
	MOVE	A9,A14
	ADDI	OH_MONTHS,A14
	CMP	A11,A14
	JRLE	EBM_NOWRAP1

	;WRAPAROUND LOW.  RESET TO TOP
	MOVI	EI_MFONTX,A4
	ADDI	-20h,A4
	MOVE	A9,A11
	ADDI	OH_MONTHS,A11
	ADDI	OH_LASTMONTH-20h,A11

EBM_NOWRAP1
	JRUC	EBM_MOVEFOCUS

EBM_MOVEFOCUS
	;CLEAR THE WHEEL MOTION ACCUMULATOR
	CLR	A7

	;SET THE IMAGE ON THE CURRENTLY ACTIVE CHARACTER
	MOVL	*A13(PD_SELMONTH),A0
	MOVL	*A4,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;SET THE SELECTOR BOX
	MOVL	*A11,A0
	MOVL	*A13(PD_SELOBJ),A1
	CALLR	PLACE_SELECTOR ;IN:A0,A1 hOBJECT,hSHADOW

	;MAKE NOISE
	MOVI	SNDSELSCROLL,A14
	CALLA	MAKESND ;IN:A14

EBM_INPDONE
	JRUC	EBM_INPUTLOOP

EBM_DONE

	;STORE THE MONTH IN PERSONAL_DATA
	MOVE	A11,A0
	SUB	A9,A0
	SUBI	OH_MONTHS,A0
	SRL	5,A0

	MOVI	PER_SIZE,A1
	MPYS	A10,A1
	MOVI	PERSONAL_DATA,A2
	ADD	A1,A2
	ADDI	PER_BMONTH,A2
	MOVW	A0,*A2

	;KILL OFF THE MONTHS
	MOVE	A9,A2
	ADDI	OH_MONTHS,A2

	MOVE	A2,A3
	ADDI	OH_LASTMONTH,A3

	;A2 HOLDS A POINTER TO THE BEGINNING OF THE ALPHABET HANDLE
	;  TABLE.  START SCORCHING.  A3 HOLDS THE ADDRESS OF THE LAST
	;  OBJECT TO BE SCORCHED

EI_DROPMONTHSLOOP
	MOVL	*A2+,A0
	CALLA	DROP_OBJECT ;IN: A0 hOBJECT
	CMP	A2,A3
	JRNE	EI_DROPMONTHSLOOP

	;DROP THE CURRENT MONTH
	MOVL	*A13(PD_SELMONTH),A0
	CALLA	DROP_OBJECT ;IN: A0 hOBJECT

	;DROP THE TITLE
	MOVL	*A13(PD_TITLE2),A0
	CALLA	DROP_OBJECT ;IN: A0 hOBJECT

	;DROP THE BACKPANEL
	MOVL	*A13(PD_BACKPANEL),A0
	CALLA	DROP_OBJECT ;IN: A0 hOBJECT

	;************************************************
	;*                                              *
	;*             ENTER BIRTHDATE PHASE            *
	;*                                              *
	;************************************************
EI_DATE
	;CREATE THE BACKPANEL
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_BACKPANEL)

	;ACTIVATE IT
	CALLR	INSOBJ ;IN:A0 hOBJECT

	;SET THE IMAGE ON THE BACKPANEL
	MOVI	ENTR_BCK1,A1
	CALLA	SET_IMAGE ;IN:A0,A1  hOBJECT,hIMAGE

	;PLACE IT
	CLR	A14
	MOVW	A14,*A0(OYPOS)
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVW	A1,*A0(OXPOS)

	;AND THEN LIFT/DROP IT
	MOVI	LAD_BOUNCE,A1
	CALLA	LIFT_AND_DROP ;IN:A0,A1 hOBJECT,CONTROL

	;CREATE THE TITLE BLOCK
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_TITLE3)

	;ACTIVATE IT
	CALLR	INSOBJ ;IN:A0 hOBJECT

	;SET THE OWNER BIT
	INC	A10
	MOVW	A10,*A0(OPANEL)
	DEC	A10

	;SET THE IMAGE ON THE TITLE BLOCK
	MOVL	*A13(PD_TITLE3),A0
	MOVI	BIRTHDAT,A1
	CALLA	SET_IMAGE ;IN:A0,A1  hOBJECT,hIMAGE

	;POSITION THE TITLE BLOCK
	MOVL	*A13(PD_TITLE3),A2
	MOVI	EI_DATEPOS,A14
	MOVW	*A14+,A0
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A0
	MOVW	A0,*A2(OXPOS)
	MOVW	*A14(0),*A2(OZPOS)
	MOVE	A2,A0
	MOVI	LAD_BOUNCE,A1
	CALLA	LIFT_AND_DROP ;A0,A1: hOBJECT,CONTROL

	;AND MAKE NOISE
	MOVI	DROP_SOUND,A14
	MOVI	20h,A1
	MPYS	A10,A1
	ADD	A1,A14
	MOVL	*A14,A14

	CALLA	MAKESND ;IN:A14

	;PRE-LOOP SAVE
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7

	;DRAW THE MONTHS
	;REG USE FOR THIS LOOP
	; A0  USED FOR IMAGE SETTING
	; A1  USED FOR IMAGE SETTING
	; A2  CURRENT X POSITION
	; A3  CURRENT Y POSITION
	; A4  FONT POSITION POINTER
	; A5  USED FOR OBJECT CREATION
	; A6  HANDLE TABLE POINTER
	; A7  LINE COUNTER

	;SET THE DAYS_IN_MONTH BIT
	MOVI	PERSONAL_DATA,A0
	MOVI	PER_SIZE,A1
	MPYS	A10,A1
	ADD	A1,A0
	MOVW	*A0(PER_BMONTH),A1
	MOVI	10h,A0
	MPYS	A0,A1
	MOVI	EI_DAYS_IN_MONTH,A2
	ADD	A2,A1
	MOVW	*A1,A1

	;A1 NOW HOLDS THE NUMBER OF DAYS IN THE SELECTED MONTH
	; NOW SET IT AS A POINTER TO THE CORRESPONDING ENTRY IN EI_DFONT
	MOVI	EI_DFONT,A0
	MOVI	20h,A2
	DEC	A1
	MPYS	A2,A1
	ADD	A1,A0

	;A0 IS A POINTER TO THE TOP ALLOWED CHAR IN EI_DFONT.  SAVE IT.
	MOVE	A0,B0

	;INITIALIZE THE REGISTERS
	MOVE	A9,A6
	ADDI	OH_DAYS,A6
	MOVI	EI_DFONT,A4
	MOVI	EBD_TOPLEFT,A14
	MOVW	*A14+,A2
	MOVE	*A14,A3
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	CLR	A7

EBD_DRAWDAYSLOOP
	;CREATE A CHARACTER
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT

	;SAVE THE HANDLE LOCATION.  WE'LL LATER NEED THE ADDRESS OF THE
	;  TOP HANDLE IN THE TABLE WHEN WE DEALLOCATE THE DAYS.  RECALL THAT
	;  AT THAT POINT WE WON'T KNOW EXACTLY HOW MANY THERE ARE.
	MOVL	A6,*A13(PD_TOPDATE)

	;STORE IT IN THE HANDLE TABLE
	MOVL	A0,*A6+

	;SET THE OWNER BIT
	INC	A10
	MOVW	A10,*A0(OPANEL)
	DEC	A10

	;SET THE IMAGE
	MOVL	*A4+,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;PLACE IT
	MOVI	LAD_BOUNCE,A1
	CALLA	LIFT_AND_DROP ;A0,A1: hOBJECT,CONTROL

	MOVW	A3,*A0(OZPOS)

	MOVW	*A0(OSIZEX),A1
	MOVW	@EBD_XINC,A5
	SUB	A1,A5
	SRL	1,A5
	ADD	A2,A5
	MOVW	A5,*A0(OXPOS)

	;ACTIVATE IT
	CALLA	INSOBJ ;IN:A0 hOBJECT

	;UPDATE THE POSITION REGISTERS
	INC	A7
	CMPI	EBD_PERLINE,A7
	JRNE	EBD_SAME_LINE

	;THE NEXT CHARACTER WILL BE ON A NEW LINE
	CLR 	A7
	MOVI	EBD_TOPLEFT,A14
	MOVW	*A14,A2
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	MOVI	EBD_YINC,A14
	MOVW	*A14,A14
	ADD	A14,A3
	JRUC	EBD_PROCEED

EBD_SAME_LINE
	;THE NEXT CHARACTER WILL BE ON THE SAME LINE
	MOVI	EBD_XINC,A14
	MOVW	*A14,A14
	ADD	A14,A2

EBD_PROCEED
	;NEXT
	MOVE	B0,A0
	CMP	A0,A4
	JRLE	EBD_DRAWDAYSLOOP

	;POST-LOOP RESTORE
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7

	;CREATE THE CURRENT DATE OBJECT
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_SELDATE)
	CALLA	INSOBJ ;IN:A0 hOBJECT
	MOVI	EI_DFONT,A1
	MOVL	*A1,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;PLACE IT
	MOVI	EI_INITZ,A2
	MOVW	A2,*A0(OZPOS)

	;RECENTER IT
	MOVW	*A0(OSIZEX),A14
	MOVI	EI_PANEL_WIDTH,A1
	SUB	A14,A1
	SRL	1,A1
	MOVE	A1,A2
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	MOVW	A2,*A0(OXPOS)

	;SET IT IN MOTION
	MOVI	-100h,A14
	MOVW	A14,*A0(OYPOS)
	MOVI	00100000h,A14
	MOVL	A14,*A0(OYVEL)

	;TURN THE SELECT OBJECT OFF
	MOVL	*A13(PD_SELOBJ),A0
	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0
	
	;STUFF IS FALLING NOW.  WAIT UNTIL IT'S ALL DONE
EBDLOOPX
	MOVE	B0,A0
	MOVE	B1,A1
	MOVE	B2,A2
	MMTM	A12,A0,A1,A2,A4,A5,A6,A7
	SLEEP	1
	MMFM	A12,A0,A1,A2,A4,A5,A6,A7
	MOVE	A2,B2
	MOVE	A1,B1
	MOVE	A0,B0

	MOVI	10h,A1
	MPYS	A10,A1
	MOVI	DROP_FLAG,A0
	ADD	A1,A0
	MOVW	*A0,A0
	JRNZ	EBDLOOPX

	;TURN THE SELECT FRAME BACK ON
	MOVL	*A13(PD_SELOBJ),A0
	SETF	1,0,0
	MOVK	1,A14
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0

	;SET THE WHEEL MOTION AND BUTTON COUNT REGISTERS
	MOVW	*A8(INPB0),A14
	MOVE	A14,B1
	MOVW	*A8(INPB1),A6
	MOVW	*A8(INPB2),A14
	MOVE	A14,B2
	CLR	A7

	;CLEAR THE FLASHCOUNT ACCUMULATOR
	MOVI	EI_FLASHRATE,A5

	;SET THE FONT INDICES
	MOVI	EI_DFONT,A4
	MOVE	A9,A11
	ADDI	OH_DAYS,A11

	;SET THE SELECTOR BOX
	MOVL	*A11,A0
	MOVL	*A13(PD_SELOBJ),A1
	CALLR	PLACE_SELECTOR ;IN:A0,A1 hOBJECT,hSHADOW

EBD_INPUTLOOP
	MOVE	B0,A0
	MOVE	B1,A1
	MOVE	B2,A2
	MMTM	A12,A0,A1,A2,A4,A5,A6,A7
	SLEEP	1
	MMFM	A12,A0,A1,A2,A4,A5,A6,A7
	MOVE	A2,B2
	MOVE	A1,B1
	MOVE	A0,B0

	;CHECK FOR A FLASH TOGGLE
	DEC	A5
	JRNZ	EBD_NO_TOGGLE

	;THERE'S A FLASH
	MOVI	EI_FLASHRATE,A5
	SETF	1,0,0
	CLR	A14
	MOVL	*A13(PD_SELOBJ),A0
	MOVE	*A0(OCTRL+15),A1,0
	INC	A1
	CMPI	2h,A1
	JRNE	EBD_FLASHON

	;THIS IS A FLASH OFF, NOT ON, SO MAKE IT NOT LAST AS LONG
	SRL	1,A5

EBD_FLASHON
	MOVE	A1,*A0(OCTRL+15),0
	SETF	16,1,0

EBD_NO_TOGGLE
	;UPDATE THE BUTTON COUNTS
	; B3 IS THE BUTTON PRESS ACCUMULATOR
	CLR	B3

	MOVW	*A8(INPB0),A14
	MOVE	A14,B14
	CMP	B14,B1
	JRZ	EBD_CHECK_BTN_1

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	EBD_CHECK_BTN_1

	;IT'S A PRESS
	INC	B3

EBD_CHECK_BTN_1
	MOVW	*A8(INPB1),A14
	CMP	A14,A6
	JRZ	EBD_CHECK_BTN_2

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	EBD_CHECK_BTN_2

	;IT'S A PRESS
	INC	B3

EBD_CHECK_BTN_2
	MOVW	*A8(INPB2),A14
	MOVE	A14,B14
	CMP	B14,B2
	JRZ	EBD_END_PRESSCHECK

	SRL	1,A14
	JRNC	EBD_END_PRESSCHECK

	;IT'S A PRESS
	INC	B3

EBD_END_PRESSCHECK
	;IN ANY CASE, UPDATE ALL THREE BUTTON COUNT REGS
	MOVW	*A8(INPB0),A14
	MOVE	A14,B1
	MOVW	*A8(INPB1),A6
	MOVW	*A8(INPB2),A14
	MOVE	A14,B2

	;TIMER HOTWIRE.  IF WE'RE OVERTIME, FORCE A PRESS
	MOVW	@INITIAL_OVERTIME,A14
	JRZ	EI_NOTOVER3
	INC	B3
	
EI_NOTOVER3

	;NOW, IF THERE WERE ANY PRESSES, HANDLE THEM
	MOVE	B3,B3
	JRZ	EBD_NO_PRESS

	;IT'S A PRESS.  WE'RE DONE
	;MAKE NOISE
	MOVI	SNDSELSELECT,A14
	CALLA	MAKESND ;IN:A14 SOUND

	MOVE	A14,A6
	JRUC	EBD_DONE

EBD_NO_PRESS
	;CHECK WHEEL MOTION
	MOVW	*A8(INPWHEELMAG),A14
	ADD	A14,A7

	CMPI	-EI_THRESHHOLD,A7
	JRGE	EBD_NO_ACWISE

	;WE'RE ABOVE THE THRESHHOLD.  MOVE FORWARD A NOTCH
	;FIRST, SET THE CURRENT LETTER ON
	MOVL	*A11,A0
	MOVI	1,A1
	SETF	1,0,0
	MOVE	A1,*A0(OCTRL+15),0
	SETF	16,1,0

	;NOW MOVE FORWARD, WRAPPING AROUND IF NECCESARY
	ADDI	20h,A4
	ADDI	20h,A11	
	MOVE	B0,A0
	CMP	A0,A4
	JRLE	EBD_NOWRAP

	;WRAPAROUND.  RESET TO BOTTOM
	MOVI	EI_DFONT,A4
	MOVE	A9,A11
	ADDI	OH_DAYS,A11

EBD_NOWRAP
	JRUC	EBD_MOVEFOCUS
	
EBD_NO_ACWISE
	CMPI	EI_THRESHHOLD,A7
	JRLE	EBD_INPDONE

	;WE'RE BELOW THE THRESHHOLD.  MOVE BACKWARD A NOTCH
	;FIRST, SET THE CURRENT LETTER ON
	MOVL	*A11,A0
	MOVI	1,A1
	SETF	1,0,0
	MOVE	A1,*A0(OCTRL+15),0
	SETF	16,1,0

	;NOW MOVE BACKWARD, WRAPPING AROUND IF NECCEARY
	ADDI	-20h,A4
	ADDI	-20h,A11
	CMPI	EI_DFONT,A4
	JRGE	EBD_NOWRAP1

	;WRAPAROUND LOW.  RESET TO TOP
	MOVE	B0,A4
	MOVE	A9,A11
	MOVE	B0,A0
	MOVI	EI_DFONT,A1
	SUB	A1,A0
	ADD	A0,A11
	ADDI	OH_DAYS,A11

EBD_NOWRAP1
	JRUC	EBD_MOVEFOCUS

EBD_MOVEFOCUS
	;CLEAR THE WHEEL MOTION ACCUMULATOR
	CLR	A7

	;SET THE IMAGE ON THE CURRENTLY ACTIVE CHARACTER
	MOVL	*A13(PD_SELDATE),A0
	MOVL	*A4,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;RECENTER IT
	MOVW	*A0(OSIZEX),A14
	MOVI	EI_PANEL_WIDTH,A1
	SUB	A14,A1
	SRL	1,A1
	MOVE	A1,A2
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	MOVW	A2,*A0(OXPOS)

	;SET THE SELECTOR BOX
	MOVL	*A11,A0
	MOVL	*A13(PD_SELOBJ),A1
	CALLR	PLACE_SELECTOR ;IN:A0,A1 hOBJECT,hSHADOW

	;MAKE NOISE
	MOVI	SNDSELSCROLL,A14
	CALLA	MAKESND ;IN:A14

EBD_INPDONE
	JRUC	EBD_INPUTLOOP

EBD_DONE

	;STORE THE DATE IN PERSONAL_DATA
	MOVE	A11,A0
	SUB	A9,A0
	SUBI	OH_DAYS,A0
	SRL	5,A0
	INC	A0	;(ADD ONE SO THAT DAY 1 IS ONE, AND SO ON)

	MOVI	PER_SIZE,A1
	MPYS	A10,A1
	MOVI	PERSONAL_DATA,A2
	ADD	A1,A2
	ADDI	PER_BDATE,A2
	MOVW	A0,*A2

EI_DONE
	;KILL OFF THE DIGITS
	MOVE	A9,A2
	ADDI	OH_DAYS,A2
	MOVE	A2,A3

	MOVL	*A13(PD_TOPDATE),A3

	;A2 HOLDS A POINTER TO THE BEGINNING OF THE ALPHABET HANDLE
	;  TABLE.  START SCORCHING.  A3 HOLDS THE ADDRESS OF THE LAST
	;  OBJECT TO BE SCORCHED

EI_DROPDAYSLOOP
	MOVL	*A2+,A0
	CALLA	DROP_OBJECT ;IN: A0 hOBJECT
	CMP	A2,A3
	JRGE	EI_DROPDAYSLOOP

	;KILL OFF THE SELECT BOX
	MOVL	*A13(PD_SELOBJ),A0
	CALLA	ZAPOBJ ;IN:A0 hOBJECT

	;DROP THE FRAME TITLE
	MOVL	*A13(PD_TITLE3),A0
	CALLA	ZAPOBJ ;IN:A0 hOBJECT

	;DROP THE SELECTED DIGIT
	MOVL	*A13(PD_SELDATE),A0
	CALLA	DROP_OBJECT ;IN:A0 hOBJECT

	;DROP THE BACKPANEL
	MOVL	*A13(PD_BACKPANEL),A0
	CALLA	DROP_OBJECT ;IN: A0 hOBJECT

	;CREATE THE NEW BACKPANEL
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_BACKPANEL)

	;ACTIVATE IT
	CALLR	INSOBJ ;IN:A0 hOBJECT

	;SET THE IMAGE ON THE BACKPANEL
	MOVI	ENTR_BCK1,A1
	CALLA	SET_IMAGE ;IN:A0,A1  hOBJECT,hIMAGE

	;PLACE IT
	CLR	A14
	MOVW	A14,*A0(OYPOS)
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVW	A1,*A0(OXPOS)

	;AND THEN LIFT/DROP IT
	MOVI	LAD_BOUNCE,A1
	CALLA	LIFT_AND_DROP ;IN:A0,A1 hOBJECT,CONTROL

	;CREATE THE FINAL DISPLAY DATA
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVE	A0,A6
	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVE	A0,A7
	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVE	A0,A8
	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVE	A0,A9
	CALLA	INSOBJ ;IN:A0 hOBJECT

	;THIS ONE COMES LAST BECAUSE IT USES A5...
	MOVI	EI_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVE	A0,A5
	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVI	PERSONAL_DATA,A2
	MOVI	PER_SIZE,A1
	MPYS	A10,A1
	ADD	A1,A2

	MOVW	*A2+,A1
	SUBI	41h,A1	;ASCII ADJUST
	SLL	5,A1	;MULTIPLY BY 20h
	MOVI	EI_FONT,A0
	ADD	A0,A1
	MOVL	*A1,A1
	MOVE	A5,A0
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;IF IT'S A SPACE, TURN IT OFF
	CMPI	INT_SPC,A1
	JRNE	CHECK_INIT2
	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0
	
CHECK_INIT2
	MOVW	*A2+,A1
	SUBI	41h,A1	;ASCII ADJUST
	SLL	5,A1	;MULTIPLY BY 20h
	MOVI	EI_FONT,A0
	ADD	A0,A1
	MOVL	*A1,A1
	MOVE	A6,A0
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;IF IT'S A SPACE, TURN IT OFF
	CMPI	INT_SPC,A1
	JRNE	CHECK_INIT3
	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0
	
CHECK_INIT3
	MOVW	*A2+,A1
	SUBI	41h,A1	;ASCII ADJUST
	SLL	5,A1	;MULTIPLY BY 20h
	MOVI	EI_FONT,A0
	ADD	A0,A1
	MOVL	*A1,A1
	MOVE	A7,A0
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;IF IT'S A SPACE, TURN IT OFF
	CMPI	INT_SPC,A1
	JRNE	LAST_CHECK
	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A0(OCTRL+15),0
	SETF	16,1,0
	
LAST_CHECK
	MOVW	*A2+,A1
	SLL	5,A1	;MULTIPLY BY 20h
	MOVI	EI_MFONT,A0
	ADD	A0,A1
	MOVL	*A1,A1
	MOVE	A8,A0
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVW	*A2+,A1
	DEC	A1
	SLL	5,A1	;MULTIPLY BY 20h
	MOVI	EI_DFONT,A0
	ADD	A0,A1
	MOVL	*A1,A1
	MOVE	A9,A0
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;PLACE THEM.  CENTER INITS ON ONE LINE, AND MONTH/DAY ON NEXT
	CLR	A0
	MOVW	*A5(OUSIZEX),A0
	MOVW	*A6(OUSIZEX),A14
	ADD	A14,A0
	MOVW	*A7(OUSIZEX),A14
	ADD	A14,A0
	ADDI	4h,A0

	MOVI	EI_PANEL_WIDTH,A1
	SUB	A0,A1
	SRL	1,A1
	MOVE	A1,A0
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A0

	MOVW	A0,*A5(OXPOS)
	MOVW	*A5(OUSIZEX),A14
	ADD	A14,A0
	ADDI	2h,A0
	MOVW	A0,*A6(OXPOS)
	MOVW	*A6(OUSIZEX),A14
	ADD	A14,A0
	ADDI	2h,A0
	MOVW	A0,*A7(OXPOS)

	MOVI	EI_INITFINY,A14
	MOVW	A14,*A5(OZPOS)
	MOVW	A14,*A6(OZPOS)
	MOVW	A14,*A7(OZPOS)

	CLR	A0
	MOVW	*A8(OUSIZEX),A0
	MOVW	*A9(OUSIZEX),A14
	ADD	A14,A0
	ADDI	2h,A0

	MOVI	EI_PANEL_WIDTH,A1
	SUB	A0,A1
	SRL	1,A1
	MOVE	A1,A0
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A0

	MOVW	A0,*A8(OXPOS)
	MOVW	*A8(OUSIZEX),A14
	ADD	A14,A0
	ADDI	2h,A0
	MOVW	A0,*A9(OXPOS)

	MOVI	EI_DATEFINY,A14
	MOVW	A14,*A8(OZPOS)
	MOVW	A14,*A9(OZPOS)

	;LIFT AND DROP THEM
	MOVI	LAD_BOUNCE,A1
	MOVE	A5,A0
	CALLA	LIFT_AND_DROP ;IN:A0 hOBJECT
	MOVE	A6,A0
	CALLA	LIFT_AND_DROP ;IN:A0 hOBJECT
	MOVE	A7,A0
	CALLA	LIFT_AND_DROP ;IN:A0 hOBJECT
	MOVE	A8,A0
	CALLA	LIFT_AND_DROP ;IN:A0 hOBJECT
	MOVE	A9,A0
	CALLA	LIFT_AND_DROP ;IN:A0 hOBJECT

	;AND MAKE NOISE
	MOVI	DROP_SOUND,A14
	MOVI	20h,A1
	MPYS	A10,A1
	ADD	A1,A14
	MOVL	*A14,A14

	CALLA	MAKESND ;IN:A14

	;WAIT A BIT
	SLEEP	ONESECOND*2

	;DECREMENT THE ACTIVE_INITPANELS COUNTER
	MOVW	@ACTIVE_INITPANELS,A0
	DEC	A0
	MOVW	A0,@ACTIVE_INITPANELS

	;GO HOME
	DIE
	

**
** PLACE_INITIALS
**
**  IN
**    A10  PLAYER NUMBER
**    A13  PDATA POINTER
**
**  OUT
**    NONE
**
**  PURPOSE
**    PLACES THE INITIALS IN THE DISPLAY AT THE BOTTOM OF THE SCREEN
**
**  JMS 29 MAR 93
**

PLACE_INITIALS

	;REG USE
	; A0  HORIZONTAL SIZE ACCUMULATOR
	; A1  SCRATCH
	; A2  SCRATCH
	; A3  NUMBER OF SELECTED INITIALS

	;SAVE REGS
	MMTM	SP,A0,A1,A2,A3

	;SET THE INITIAL COUNT
	MOVW	*A13(PD_NUMINITS),A3

	;CALCULATE THE TOTAL WIDTH OF THE STRING
	CLR	A0

	MOVL	*A13(PD_INIT1),A1
	MOVW	*A1(OSIZEX),A2
	ADD	A2,A0

	CMPI	0h,A3
	JREQ	PI_WIDTHDONE

	MOVL	*A13(PD_INIT2),A1
	MOVW	*A1(OSIZEX),A2
	ADD	A2,A0
	ADDI	EI_INITSPACING,A0

	CMPI	1h,A3
	JREQ	PI_WIDTHDONE

	MOVL	*A13(PD_INIT3),A1
	MOVW	*A1(OSIZEX),A2
	ADD	A2,A0
	ADDI	EI_INITSPACING,A0

PI_WIDTHDONE
	;A0 NOW HOLDS THE WIDTH OF ALL ACTIVE CHARACTERS, PLUS
	;  SPACE IN BETWEEN.  NOW CALCULATE THE CENTERING.
	MOVI	EI_PANEL_WIDTH,A2
	SUB	A0,A2
	SRL	1,A2

	;A2 NOW HOLDS AN X OFFSET FOR THE STRING WITHIN THE BOX.
	;  NOW ADJUST FOR PLAYER OFFSET
	MOVI	EI_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2

	;A2 NOW HOLDS THE X POSITION FOR THE FIRST CHARACTER.
	;  PLACE THEM ALL.  NOTE THAT THIS FUNCTION PLACES ALL
	;  THREE CHARACTERS, ACTIVE OR NOT. IT'S UP TO THE CALLING
	;  PROCESS TO KEEP THE PROPER CHARACTER ACTIVATED.

	;PLACE THE FIRST
	MOVL	*A13(PD_INIT1),A0
	MOVW	A2,*A0(OXPOS)

	;ADD THE WIDTH OF FIRST PLUS SPACING
	MOVW	*A0(OSIZEX),A1
	ADD	A1,A2
	ADDI	EI_INITSPACING,A2

	;PLACE THE SECOND
	MOVL	*A13(PD_INIT2),A0
	MOVW	A2,*A0(OXPOS)

	;ADD WITDH OF SECOND PLUS SPACING
	MOVW	*A0(OSIZEX),A1
	ADD	A1,A2
	ADDI	EI_INITSPACING,A2

	;PLACE THE THIRD
	MOVL	*A13(PD_INIT3),A0
	MOVW	A2,*A0(OXPOS)

	;ALL DONE
	MMFM	SP,A0,A1,A2,A3
	RETS


**
** PLACE_SELECTOR
**
**  IN
**    A0  HANDLE OF SELECTED OBJECT
**    A1  HANDLE OF SELECT BOX
**
**  OUT
**    NONE
**
**  PURPOSE
**    MOVES AND RESIZES THE SELECTOR WIDGET
**
** JMS 31 MAR 91
**

PLACE_SELECTOR
	;REG USE
	;  A2  TEMP XREG
	;  A3  TEMP YREG

	MMTM	SP,A2,A3

	;SET THE POSITION
	MOVW	*A0(OXPOS),A2
	MOVW	*A0(OZPOS),A3

	SUBI	SELECTOR_SIZEX,A2
	SUBI	SELECTOR_SIZEY,A3

	MOVW	A2,*A1(OXPOS)
	MOVW	A3,*A1(OZPOS)

	MOVW	*A0(OUANIOFFY),A14
	NEG	A14
	MOVW	A14,*A1(OYPOS)

	;SET THE SIZE
	MOVW	*A0(OUSIZEX),A2
	ADDI	SELECTOR_SIZEX,A2
	ADDI	SELECTOR_SIZEX,A2

	MOVW	*A0(OUSIZEY),A3
	ADDI	SELECTOR_SIZEY,A3
	ADDI	SELECTOR_SIZEY,A3

	MOVW	A2,*A1(OUSIZEX)
	MOVW	A3,*A1(OUSIZEY)

	MMFM	SP,A2,A3
	RETS

**
** DROP_OBJECT
**
**  IN
**    A0 hOBJECT
**
**  PURPOSE
**    SETS THE OBJECT MOVING DOWNWARD OFF THE SCREEN.  OBJECT WILL DIE
**    ONCE IT HITS THE BOTTOM.
**
**  JMS 06 APR 93
**

DROP_OBJECT

	MOVE	B8,A14
	MMTM	SP,A2,A3,A4,A8,A10,A14

	;ADD 256 TO Z POSITION AND SET A Y OF -256.
	MOVW	*A0(OZPOS),A14
	ADDI	100h,A14
	MOVW	A14,*A0(OZPOS)
	MOVI	-100h,A14
	MOVW	A14,*A0(OYPOS)
	MOVI	00100000h,A14
	MOVL	A14,*A0(OYVEL)
	MOVK	1,A14
	MOVL	A14,*A0(OYACC)

	;SET UP FOR WHEN IT LANDS
	MOVE	A0,A8
	MOVI	ZAP_ON_LANDING,A2
	MOVI	SETGCOL,B8 ;IN:A2,A8,B8 GCOL(),OBJ,PC
	EXGPC	B8

	;INCREMENT THE DROP FLAG IF THIS OBJECT HAS AN OPANEL SET
	CLR	A10
	MOVW	*A8(OPANEL),A10
	JRZ	DO_DONE

	DEC	A10
	MOVI	10h,A3
	MPYS	A10,A3
	MOVI	DROP_FLAG,A4
	ADD	A3,A4
	MOVW	*A4,A14
	INC	A14
	MOVW	A14,*A4

DO_DONE
	MMFM	SP,A2,A3,A4,A8,A10,A14
	MOVE	A14,B8

	RETS

**
** ZAP_ON_LANDING
**
**  IN
**    A8 OBJ
**
** JMS 06 APR 93
**

ZAP_ON_LANDING

	MMTM	SP,A3,A4,A10

	MOVE	A8,A0
	CALLA	ZAPOBJ ;IN:A0 hOBJECT

	;DECREMENT THE DROP FLAG IF THERE'S AN OPANEL
	CLR	A10
	MOVW	*A8(OPANEL),A10
	JRZ	ZOL_NOPANEL

	DEC	A10
	MOVI	10h,A3
	MPYS	A10,A3
	MOVI	DROP_FLAG,A4
	ADD	A3,A4
	MOVW	*A4,A14
	DEC	A14
	MOVW	A14,*A4

ZOL_NOPANEL
	MMFM	SP,A3,A4,A10
	RETS

**
** LIFT_AND_DROP
**
**  IN
**    A0 hOBJECT
**    A1 CONTROL     -- LAD_STANDARD: STOP AT BOTTOM
**                      LAD_BOUNCE:   BOUNCE UPON HITTING
**
**  PURPOSE
**    LIFTS AN OBJECT 256 PIXELS AND THEN DROPS IT BACK TO IT'S ORIGINAL
**    POSITION
**
**  JMS 07 APR 93
**

LIFT_AND_DROP
	MOVE	B8,A14
	MMTM	SP,A2,A3,A4,A8,A10,A14

	;SET THE Y STUFF
	MOVI	-100h,A14
	MOVW	A14,*A0(OYPOS)
	MOVI	00100000h,A14
	MOVL	A14,*A0(OYVEL)
	MOVK	1,A14
	MOVL	A14,*A0(OYACC)

	;SET UP FOR LANDING
	CMPI	LAD_STANDARD,A1
	JREQ	LD_STD

	CMPI	LAD_BOUNCE,A1
	JREQ	LD_BOUNCE

	JRUC	LD_BADCONTROL

LD_STD
	JRUC	LD_DONE

LD_BOUNCE
	;SET UP THE BOUNCE DATA
	MOVI	00040000h,A14
	MOVL	A14,*A0(OBOUNCEYACC)
	MOVI	-00040000h,A14
	MOVL	A14,*A0(OBOUNCEYVEL)
	MOVI	BOUNCE_ON_LANDING,A2
	MOVI	4h,A14
	MOVW	A14,*A0(OBOUNCECOUNT)
	JRUC	LD_ENDSWITCH

LD_BADCONTROL
	NOP
	TLOCKUP

LD_ENDSWITCH
	MOVE	A0,A8
	MOVI	SETGCOL,B8 ;IN:A2,A8,B8 GCOL(),OBJ,PC
	EXGPC	B8

LD_DONE
	;INCREMENT THE DROP FLAG IF THIS OBJECT HAS AN OPANEL SET
	CLR	A10
	MOVW	*A8(OPANEL),A10
	JRZ	LD_NOPANEL

	;INCREMENT THE DROP FLAG
	DEC	A10
	MOVI	10h,A3
	MPYS	A10,A3
	MOVI	DROP_FLAG,A4
	ADD	A3,A4
	MOVW	*A4,A14
	INC	A14
	MOVW	A14,*A4

LD_NOPANEL
	MMFM	SP,A2,A3,A4,A8,A10,A14
	MOVE	A14,B8
	RETS

**
** BOUNCE_ON_LANDING
**
**  IN
**    A8 hOBJECT
**
**  PURPOSE
**    MAKES AN OBJECT BOUNCE JUST A WIDDLE BIT WHEN IT HITS.
**
**  JMS 07 APR 93
**

BOUNCE_ON_LANDING

	MOVE	B8,A14
	MMTM	SP,A2,A3,A4,A8,A10,A14

	;CHECK THE COUNT
	MOVW	*A8(OBOUNCECOUNT),A14
	JRZ	BOL_NOMOREBOUNCE
	DEC	A14
	MOVW	A14,*A8(OBOUNCECOUNT)

	;SET NEW Y STUFF
	MOVL	*A8(OBOUNCEYACC),*A8(OYACC)
	MOVL	*A8(OBOUNCEYVEL),A14
	MOVL	A14,*A8(OYVEL)
	SRA	1,A14
	MOVL	A14,*A8(OBOUNCEYVEL)

	;RESET THE GROUND COLLISION VECTOR
	MOVI	BOUNCE_ON_LANDING,A2
	MOVI	SETGCOL,B8 ;IN:A2,A8 GCOL(),hOBJECT,PC
	EXGPC	B8
	JRUC	BOL_DONE

BOL_NOMOREBOUNCE
	;DECREMENT THE DROP FLAG IF THERE'S AN OPANEL AND THIS IS THE LAST
	CLR	A10
	MOVW	*A8(OPANEL),A10
	JRZ	BOL_DONE

	DEC	A10
	MOVI	10h,A3
	MPYS	A10,A3
	MOVI	DROP_FLAG,A4
	ADD	A3,A4
	MOVW	*A4,A14
	DEC	A14
	MOVW	A14,*A4

BOL_DONE
	MMFM	SP,A2,A3,A4,A8,A10,A14
	MOVE	A14,B8
	RETS


**
** INITIAL_TIMER - PROCESS
**
**  IN
**    NONE
**
**  OUT
**    NONE
**
**  PURPOSE
**    KEEPS AN EYE ON THE INPUT WIDGETS.  AFTER TEN SECONDS WITH NO INPUT
**    OR THIRTY SECONDS TOTAL, IT HOTWIRES YOU THROUGH THE ENTER INITIALS
**    PROCESS.  MOVE ALONG, SON.  THAT'S IT.  KEEP RIIIIIGHT ON GOIN...
**
**  JMS 15 APR 93
**

INITIAL_TIMER

	;REG USE
	; A4  PLAYER 0 INPUT PORT
	; A5  PLAYER 1 INPUT PORT
	; A6  PLAYER 2 INPUT PORT
	; A7  TOTAL TIME ELAPSED
	; A8  TIME SINCE LAST INPUT
	; A9  BUTTON CHECKSUM

	;GET THE INPUT ADDRESSES
	CLR	A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A4
	INC	A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A5
	INC	A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A6

	;SET INITIAL CHECKSUM
	CALLR	GET_BUTTON_CHECKSUM ;IN:A4,A5,A6 PORT ADDRESSES  OUT:A0 SUM
	MOVE	A0,A9

	;CLEAR THE TIMERS
	CLR	A7
	CLR	A8

IT_MAINLOOP
	MMTM	A12,A4,A5,A6,A7
	SLEEP	1
	MMFM	A12,A4,A5,A6,A7

	;INCREMENT THE TIMERS
	INC	A7
	INC	A8

	;IF OVER THIRTY SECONDS, SET INITIAL_OVERTIME FLAG
	CMPI	ONESECOND*30,A7
	JRGT	IT_TIMEOUT

	;UPDATE CHECKSUM
	CALLR	GET_BUTTON_CHECKSUM ;IN:A4,A5,A6 PORT ADDRESSES  OUT:A0 SUM

	;COMPARE TO OLD
	CMP	A0,A9

	;IF NO CHANGE, MOVE ALONG
	JRZ	IT_NONEWINPUT

	;NEW PRESS.  UPDATE THE CHECKSUM AND CLEAR THE INPUT TIMER
	MOVE	A0,A9
	CLR	A8
	JRUC	IT_MAINLOOP

IT_NONEWINPUT
	CMPI	ONESECOND*10,A8
	JRLE	IT_MAINLOOP

	;TIME OUT BY NO INPUT
IT_TIMEOUT
	MOVK	1,A14
	MOVW	A14,@INITIAL_OVERTIME

	DIE


**
** GET_BUTTON_CHECKSUM
**
**  IN
**    A4,A5,A6 - INPUT PORT ADDRESSES
**
**  OUT
**    A0 - CHECKSUM
**
**  SCRATCH
**    A1-A3
**
** JMS 15 APR 93
**

GET_BUTTON_CHECKSUM

	CLR	A0
	MOVW	*A4(INPB0),A14
	ADD	A14,A0
	MOVW	*A4(INPB1),A14
	ADD	A14,A0
	MOVW	*A4(INPB2),A14
	ADD	A14,A0
	MOVW	*A5(INPB0),A14
	ADD	A14,A0
	MOVW	*A5(INPB1),A14
	ADD	A14,A0
	MOVW	*A5(INPB2),A14
	ADD	A14,A0
	MOVW	*A6(INPB0),A14
	ADD	A14,A0
	MOVW	*A6(INPB1),A14
	ADD	A14,A0
	MOVW	*A6(INPB2),A14
	ADD	A14,A0
	MOVW	*A4(INPWHEELMAG),A14
	CMPI	5h,A14
	JRLE	NOINC1
	ADD	A14,A0
NOINC1
	MOVW	*A5(INPWHEELMAG),A14
	CMPI	5h,A14
	JRLE	NOINC2
	ADD	A14,A0
NOINC2
	MOVW	*A6(INPWHEELMAG),A14
	CMPI	5h,A14
	JRLE	NOINC3
	ADD	A14,A0
NOINC3

	RETS




*EOF
