***
*** FILE: DRCHRSEL.ASM
*** PROCESSES AND FUNCTIONS FOR THE CHARACTER SELECTION PHASE
***
*** JMS 24 MAR 93; STARTED
*** 
	.MLIB	"APMACS.LIB"
	.FILE	"DRCHRSEL.ASM"
	.TITLE	"<<< DERBY RACE -- SELECT CHARACTER >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**
** COMPILE FLAGS
**

**************************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"
	.INCLUDE	"IMGTBLB1.GLO"
	.INCLUDE	"IMGTBLM2.GLO"
	.INCLUDE	"DISPEQU.ASM"
	.INCLUDE	"DRB.I"
	.INCLUDE	"DRINP.I"
	.INCLUDE	"DRSND.I"
	.INCLUDE	"DRDISP.I"

** OTHERS USE
	.DEF	FLP_SELECT_CHARACTER	;DRCHRSEL.ASM

** WE USE
	.REF	GET_BUTTON_CHECKSUM	;DRINITAL.ASM
	.REF	DISPATCHPROC	;AP.ASM
	.REF	FLP_BUY_EQUIPMENT	;DREQUIP.ASM
	.REF	SET_IMAGE   	;DREQUIP.ASM
	.REF	INSANI		;APD.ASM
	.REF	INSOBJ		;APD.ASM
	.REF	INSERT_OBJ	;APD.ASM
	.REF	ZAP_OBJ		;APD.ASM
	.REF	STARTNEWATTRACT	;DRATT.ASM
	.REF	GAMEOVER	;DRATT.ASM
	.REF	GETINPDATA	;DRINP.ASM
	.REF	GETFPAL		;APPALL.ASM
	.REF	MAKESND		;DRSND.ASM
	.REF	GAME_STATE	;

** WE USE -- RAM


** LOCAL VARIABLES
	.BSS	ACTIVE_SELPANELS,10h
	.BSS	CHARSEL_OVERTIME,10h


** DEFINES

CS_THRESHHOLD	EQU	0400h	;WHEEL MOTION THRESHHOLD
CS_MINVEL	EQU	000Fh	;MINIMUM VELOCITY

CS_BIGDISP	   	;LARGE DISPLAY COORDS
	.WORD	11,9

CS_BIGDISPHEIGHT EQU	83	;HEIGHT OF WINDOW FOR CROPPING

CS_BIGINFO
	.WORD	16,96	;LARGE INFO BOX

CS_SMALLDISP
	.WORD	26,134

CS_SMALLINFO
	.WORD	16,197

CS_STARTBOX
	.WORD	35,232

* CDATA HOLDS ALL THE SCREEN INFORMATION FOR ONE DISPLAY
CD_LGCAR1	EQU	0000h	;UHL ihLARGE CAR PART 1
CD_LGCAR2	EQU	0020h	;UHL ihLARGE CAR PART 2
CD_SMCAR1	EQU	0040h	;UHL ihSMALL CAR PART 1
CD_SMCAR2	EQU	0060h	;UHL ihSMALL CAR PART 2
CD_LGPLYR1	EQU	0080h	;UHL ihLARGE PLAYER PART 1
CD_LGPLYR2	EQU	00A0h	;UHL ihLARGE PLAYER PART 2
CD_LGPLYR3	EQU	00C0h	;UHL ihLARGE PLAYER PART 3
CD_SMPLYR	EQU	00E0h	;UHL ihSMALL PLAYER
CD_CARINFO	EQU	0100h	;UHL ihCAR INFO
CD_PLYRINFO	EQU	0120h	;UHL ihPLAYER INFO
CD_SELSOUND	EQU	0140h	;UHL hSOUND UPON SELECTION

CD_RECORDSIZE	EQU	0160h

CD_TOOLOW
	.LONG	0,0,0,0,0,0,0,0,0,0,0
CD_BOTTOM
CDATA1
	.LONG	G_BODY
	.LONG	ALLBODY
	.LONG	G_BODY2
	.LONG	ALLBODY2
	.LONG	CRASW1
	.LONG	CRASW2
	.LONG	CRASW3
	.LONG	SMCRASH
	.LONG	FX4G_INFO
	.LONG	PLYR1_INFO
	.LONG	SNDCHOOSEFONZ1
CDATA2
	.LONG	B_BODY
	.LONG	ALLBODY
	.LONG	B_BODY2
	.LONG	ALLBODY2
	.LONG	OUTLW1
	.LONG	OUTLW2
	.LONG	OUTLW3
	.LONG	SMOUTLAW
	.LONG	FX4B_INFO
	.LONG	PLYR2_INFO
	.LONG	SNDCHOOSEDUDE1
CD_TOP
CDATA3
	.LONG	R_BODY
	.LONG	ALLBODY
	.LONG	R_BODY2
	.LONG	ALLBODY2
	.LONG	KILRW1
	.LONG	KILRW2
	.LONG	0
	.LONG	SMKILLER
	.LONG	FX4R_INFO
	.LONG	PLYR3_INFO
	.LONG	SNDCHOOSECHIP1
CD_TOOHIGH


;BACKGROUND TABLE OFFSETS
BKG_LGCAR	EQU	0000h	;LARGE CAR BACKGROUND
BKG_SMCAR	EQU	0020h	;SMALL CAR BACKGROUND
BKG_LGPLYR	EQU	0040h	;LARGE PLAYER BACKGROUND
BKG_SMPLYR	EQU	0060h	;SMALL PLAYER BACKGROUND

CBACK_SIZE	EQU	80h	;SIZE OF A TABLE ENTRY


;BACKGROUND DATA TABLE

CBACK1
	.LONG	LG_GBACK
	.LONG	SM_GBACK
	.LONG	SEL_BACK
	.LONG	SM_BACK
CBACK2
	.LONG	LG_BBACK
	.LONG	SM_BBACK
	.LONG	SEL_BACK
	.LONG	SM_BACK
CBACK3
	.LONG	LG_RBACK
	.LONG	SM_RBACK
	.LONG	SEL_BACK
	.LONG	SM_BACK


CS_GENERIC_OBJECT
	.LONG	FONT_A		;IMAGE
	.LONG	0		;COLLISION VECTOR
	.WORD	OID_JUNK	;OID
	.WORD	DMAWNZ		;OCTRL
	.WORD	0		;OFLAGS
	.WORD	STYPNONE	;OSCALTYP
	.LONG	0		;CFUNC

CS_PANEL_WIDTH	EQU	128


* PROCESS DATA DEFINES
PD_DONE		EQU	PDATA+0000h	;UHW DONE FLAG
PD_THRESHHOLD	EQU	PDATA+0010h	;UHW MOTION THRESHHOLD
PD_LGBACK	EQU	PDATA+0020h	;UHL hLARGE BOX BACKGROUND
PD_SMBACK	EQU	PDATA+0040h	;UHL hSMALL BOX BACKGROUND
PD_TRUCK1	EQU	PDATA+0060h	;UHL hTRUCK PART 1
PD_TRUCK2	EQU	PDATA+0080h	;UHL hTRUCK PART 2
PD_CHAR1	EQU	PDATA+00A0h	;UHL hCHARACTER PART 1
PD_CHAR2	EQU	PDATA+00C0h	;UHL hCHARACTER PART 2
PD_CHAR3	EQU	PDATA+00E0h	;UHL hCHARACTER PART 3
PD_BIGINFO	EQU	PDATA+0100h	;UHL hLARGE INFO BOX
PD_SMALLINFO	EQU	PDATA+0120h	;UHL hSMALL INFO BOX
PD_LGFLASH	EQU	PDATA+0140h	;UHL hLARGE FLASH
PD_SMFLASH	EQU	PDATA+0160h	;UHL hSMALL FLASH


**
** FLP_SELECT_CHARACTER - FLOW-LEVEL PROCESS
**
**  IN
**    NONE
**
**  OUT
**    NONE
**
**  PURPOSE
**    HANDLES THE SELECTION OF CHARACTERS
**
**  JMS 24 MAR 93
**

FLP_SELECT_CHARACTER

	;SET GAME_STATE
	MOVI	INSELECTCHAR,A14
	MOVW	A14,@GAME_STATE

	;CLEAR THE OVERTIME FLAG
	CLR	A14
	MOVW	A14,@CHARSEL_OVERTIME

	;CREATE THE TIMEOUT WATCHER
	CREATE	PID_DRAGONE,CHARSEL_TIMER

	;DRAW THE BACKGROUND
	MOVK	PLIDPLYRSEL,A2
	CALLA	STARTNEWATTRACT ;IN:A2 PLANEID

	;CLEAR THE ACTIVE PANELS COUNTER
	CLR	A14
	MOVW	A14,@ACTIVE_SELPANELS

	;CREATE THE THREE BOXES
	CLR	A8
	CREATE	PID_DRAGONE,CHAR_SELECT
	INC	A8
	CREATE	PID_DRAGONE,CHAR_SELECT
	INC	A8
	CREATE	PID_DRAGONE,CHAR_SELECT

SC_MAINLOOP	 
	SLEEP	1
	MOVW	@ACTIVE_SELPANELS,A1
	JRNZ	SC_MAINLOOP

	;NOW A PAUSE
	SLEEP	ONESECOND*2

	CREATE	PID_MAIN,DISPATCHPROC
	DIE


**
** CHAR_SELECT - PROCESS
**
**  IN
**    A8  PLAYER # (0-2)
**
**  OUT
**    NONE
**
**  PURPOSE
**    HANDLES THE CHARACTER SELECTION ROUTINES.
**
**  JMS 24 MAR 93
**

CHAR_SELECT

	;REG USE
	;  A0  SCRATCH
	;  A1  SCRATCH
	;  A2  SCRATCH
	;  A3  SCRATCH
	;  A4  SCRATCH (OFTEN USED TO HOLD THE X OFFSET FOR A PANEL)
	;  A5  BUTTON 0 COUNT
	;  A6  BUTTON 1 COUNT
	;  A7  BUTTON 2 COUNT
	;  A8  WHEEL MOTION ACCUMULATOR
	;  A9  INPUT ADDRESS
	; A10  PLAYER NUMBER (0-2)
	; A11  CURRENT CDATA POINTER

	;INCREMENT THE ACTIVE BUYPANELS COUNTER
	MOVW	@ACTIVE_SELPANELS,A14
	INC	A14
	MOVW	A14,@ACTIVE_SELPANELS

	;SAVE THE PLAYER NUMBER
	MOVE	A8,A10

	;GET THE INPUT ADDRESS
	MOVE	A10,A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A9

	;SET THE CDATA POINTER
	MOVI	CD_RECORDSIZE,A1
	MPYS	A10,A1
	MOVI	CDATA1,A11
	ADD	A1,A11

	;CLEAR THE PDATA DONE FLAG
	CLR	A14
	MOVW	A14,*A13(PD_DONE)

	;SET THE INITIAL MOTION THRESHHOLD DOUBLE-HIGH
	MOVI	CS_THRESHHOLD,A14
	SLL	1,A14
	MOVW	A14,*A13(PD_THRESHHOLD)

	;SET THE X OFFSET FOR USE IN THE NEXT SEVERAL CALCULATIONS
	MOVI	CS_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVE	A1,A4

	;CREATE, ACTIVATE, PLACE, AND STORE THE BACKGROUND OBJECTS
	;FIRST THE LARGE ONE
	MOVI	CS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT

	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVI	CBACK_SIZE,A1
	MPYS	A10,A1
	MOVI	CBACK1,A2
	ADDI	BKG_LGCAR,A2
	ADD	A1,A2
	MOVL	*A2+,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVI	CS_BIGDISP,A3
	MOVW	*A3+,A1
	ADD	A4,A1
	MOVW	A1,*A0(OXPOS)
	MOVW	*A3(0),*A0(OYPOS)	;NOTE THE USE OF OYPOS.  THIS IS BACKGROUND.

	MOVL	A0,*A13(PD_LGBACK)

	;NOW THE SMALL ONE
	MOVI	CS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT

	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVI	CBACK_SIZE,A1
	MPYS	A10,A1
	MOVI	CBACK1,A2
	ADDI	BKG_SMPLYR,A2
	ADD	A1,A2
	MOVL	*A2+,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVI	CS_SMALLDISP,A3
	MOVW	*A3+,A1
	ADD	A4,A1
	MOVW	A1,*A0(OXPOS)
	MOVW	*A3(0),*A0(OYPOS)	;NOTE THE USE OF OYPOS.  THIS IS BACKGROUND.

	MOVL	A0,*A13(PD_SMBACK)

	;DRAW THE VEHICLE
	;PART 1
	MOVI	CS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT

	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVL	*A11(CD_LGCAR1),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVI	CS_BIGDISP,A3
	MOVW	*A3+,A1
	ADD	A4,A1
	MOVW	A1,*A0(OXPOS)
	MOVW	*A3(0),*A0(OZPOS)

	MOVL	A0,*A13(PD_TRUCK1)

	;PART 2
	MOVI	CS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT

	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVL	*A11(CD_LGCAR2),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVI	CS_BIGDISP,A3
	MOVW	*A3+,A1
	ADD	A4,A1
	MOVW	A1,*A0(OXPOS)
	MOVW	*A3(0),*A0(OZPOS)

	MOVL	A0,*A13(PD_TRUCK2)

	;DRAW THE GUY
	MOVI	CS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT

	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVL	*A11(CD_SMPLYR),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVI	CS_SMALLDISP,A3
	MOVW	*A3+,A1
	ADD	A4,A1
	MOVW	A1,*A0(OXPOS)
	MOVW	*A3(0),*A0(OZPOS)

	MOVL	A0,*A13(PD_CHAR1)

	;DRAW THE INFO BOXES
	;TOP ONE
	MOVI	CS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT

	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVL	*A11(CD_CARINFO),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVI	CS_BIGINFO,A3
	MOVW	*A3+,A1
	ADD	A4,A1
	MOVW	A1,*A0(OXPOS)
	MOVW	*A3(0),*A0(OZPOS)

	MOVL	A0,*A13(PD_BIGINFO)

	;BOTTOM ONE
	MOVI	CS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT

	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVL	*A11(CD_PLYRINFO),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVI	CS_SMALLINFO,A3
	MOVW	*A3+,A1
	ADD	A4,A1
	MOVW	A1,*A0(OXPOS)
	MOVW	*A3(0),*A0(OZPOS)

	MOVL	A0,*A13(PD_SMALLINFO)

	;PLACE THE LITTLE CREDITS THINGIE
	MOVI	CS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0 hOBJECT
	MOVI	PRSS_STRT,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVI	CS_STARTBOX,A14
	MOVW	*A14+,A2
	MOVI	CS_PANEL_WIDTH,A1
	MPYU	A10,A1
	ADD	A2,A1
	MOVW	A1,*A0(OXPOS)
	MOVW	*A14(0),*A0(OZPOS)

	;CLEAR THE WHEEL COUNT AND SET THE BUTTON COUNTS
	CLR	A8
	MOVW	*A9(INPB0),A5
	MOVW	*A9(INPB1),A6
	MOVW	*A9(INPB2),A7

	;JUMP AHEAD TO THE MAIN LOOP
	JRUC	CS_MAIN_LOOP

CS_MOVE_FOCUS

	;MAKE NOISE
	MOVI	SNDSELSCROLL,A14
	CALLA	MAKESND ;IN:A14 hSOUND

	;JUST IN CASE THIS IS THE FIRST MOVE, RESET THE THRESHHOLD
	MOVI	CS_THRESHHOLD,A14
	MOVW	A14,*A13(PD_THRESHHOLD)

	;MAKE A LITTLE NOISE
	MOVI	SNDSELSCROLL,A14
	CALLA	MAKESND ;IN:A14 SOUND ID

	;CLEAR THE WHEEL MOTION ACCUMULATOR
	CLR	A8

	;CHECK FOR OVERFLOW
	CMPI	CD_TOOHIGH,A11
	JRNZ	CS_NOT_HIGH

	;TOO HIGH.  RESET TO BOTTOM
	MOVI	CD_BOTTOM,A11
	JRUC	CS_NOT_LOW

CS_NOT_HIGH
	CMPI	CD_TOOLOW,A11
	JRNZ	CS_NOT_LOW

	;TOO LOW.  RESET TO TOP
	MOVI	CD_TOP,A11
	;JRUC	CD_NOT_LOW

CS_NOT_LOW
	;RESET ALL THE IMAGES
	;TRUCK PART 1
	MOVL	*A13(PD_TRUCK1),A0
	MOVL	*A11(CD_LGCAR1),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;TRUCK PART 2
	MOVL	*A13(PD_TRUCK2),A0
	MOVL	*A11(CD_LGCAR2),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;CHARACTER
	MOVL	*A13(PD_CHAR1),A0
	MOVL	*A11(CD_SMPLYR),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	

	;SWITCH THE INFO BOXES
	MOVL	*A13(PD_BIGINFO),A0
	MOVL	*A11(CD_CARINFO),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVL	*A13(PD_SMALLINFO),A0
	MOVL	*A11(CD_PLYRINFO),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

CS_MAIN_LOOP
CS_GO_BACK_TO_SLEEP
	MMTM	A12,A2,A3,A4,A5,A6,A7
	SLEEP	1
	MMFM	A12,A2,A3,A4,A5,A6,A7

	;UPDATE THE WHEEL MOTION ACCUMULATOR
	MOVW	*A9(INPWHEELMAG),A14
;	ADD	A14,A8

	;CHECK THE LOW VELOCITY THRESHHOLD
	ABS	A14
	CMPI	CS_MINVEL,A14
	JRGT	CS_ABOVE_MINVEL

	;WE'RE BELOW THE MINIMUM VELOCITY THRESHHOLD.  ZERO THE COUNT
	CLR	A8

CS_ABOVE_MINVEL
	;UPDATE THE START BUTTON COUNT
	; B3 IS THE BUTTON PRESS ACCUMULATOR
	CLR	B3

	MOVW	*A9(INPB0),A14
	CMP	A14,A5
	JRZ	CHECK_BTN_1

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	CHECK_BTN_1

	;IT'S A PRESS
	INC	B3

CHECK_BTN_1
	MOVW	*A9(INPB1),A14
	CMP	A14,A6
	JRZ	CHECK_BTN_2

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	CHECK_BTN_2

	;IT'S A PRESS
	INC	B3

CHECK_BTN_2
	MOVW	*A9(INPB2),A14
	CMP	A14,A7
	JRZ	END_PRESSCHECK

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	END_PRESSCHECK

	;IT'S A PRESS
	INC	B3

END_PRESSCHECK
	;IN ANY CASE, UPDATE ALL THREE BUTTON COUNT REGS
	MOVW	*A9(INPB0),A5
	MOVW	*A9(INPB1),A6
	MOVW	*A9(INPB2),A7

	;TIMER HOTWIRE.  IF WE'RE OVERTIME, FORCE A PRESS
	MOVW	@CHARSEL_OVERTIME,A14
	JRZ	CS_NOTOVER
	INC	B3
	
CS_NOTOVER
	;NOW, IF THERE WERE ANY PRESSES, HANDLE THEM
	MOVE	B3,B3
	JRZ	CS_NO_PRESS

	;THIS IS A PRESS.  SET THE DONE FLAG
	MOVK	1,A14
	MOVW	A14,*A13(PD_DONE)

	;NOW JUMP TO THE SWITCH AND ANIMATE SEQUENCE
	JRUC	CS_SWITCH_AND_ANIMATE

CS_NO_PRESS
	;CHECK FOR WHEEL MOTION
	MOVW	*A13(PD_THRESHHOLD),A14
	CMP	A14,A8
	JRLE	CS_NO_ACWISE

	;WE'RE ABOVE THE THRESHHOLD.  MOVE ANTICLOCKWISE
	ADDI	-CD_RECORDSIZE,A11
	JRUC	CS_MOVE_FOCUS

CS_NO_ACWISE
	MOVW	*A13(PD_THRESHHOLD),A14
	NEG	A14
	CMP	A14,A8
	JRGE	CS_NO_MOTION

	;WE'RE BELOW -THRESHHOLD.  MOVE CLOCKWISE
	ADDI	CD_RECORDSIZE,A11
	JRUC	CS_MOVE_FOCUS
	
CS_NO_MOTION
	;CHECK AND SEE IF WE'RE DONE
	MOVW	*A13(PD_DONE),A14
	JRZ	CS_GO_BACK_TO_SLEEP

CS_SWITCH_AND_ANIMATE
	;SET THE X OFFSET FIRST, JUST FOR FUN
	MOVI	CS_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVE	A1,A4

	;SWAP THE BACKGROUNDS
	MOVI	CBACK_SIZE,A1
	MPYS	A10,A1
	MOVI	CBACK1,A2
	ADD	A1,A2
	MOVL	*A13(PD_LGBACK),A0
	MOVL	*A2(BKG_LGPLYR),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVL	*A13(PD_SMBACK),A0
	MOVL	*A2(BKG_SMCAR),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;CHANGE THE DISPLAY IMAGES
	;FIRST THE TRUCK
	MOVL	*A13(PD_TRUCK1),A0
	MOVI	CS_SMALLDISP,A2
	MOVW	*A2+,A3
	ADD	A4,A3
	MOVW	A3,*A0(OXPOS)
	MOVW	*A2(0),*A0(OZPOS)
	MOVL	*A11(CD_SMCAR1),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MOVL	*A13(PD_TRUCK2),A0
	MOVI	CS_SMALLDISP,A2
	MOVW	*A2+,A3
	ADD	A4,A3
	MOVW	A3,*A0(OXPOS)
	MOVW	*A2(0),*A0(OZPOS)
	MOVL	*A11(CD_SMCAR2),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;THEN THE GUY
	;MOVE AND CONVERT PART 1
	MOVL	*A13(PD_CHAR1),A0
	MOVL	*A11(CD_LGPLYR1),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	MOVI	CS_BIGDISP,A2
	MOVW	*A2+,A3
	ADD	A4,A3
	MOVW	A3,*A0(OXPOS)
	MOVW	*A2(0),*A0(OZPOS)
	MOVW	*A2,A4

	;NOW CREATE AND SET PARTS 2 AND 3
	MOVI	CS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0 hOBJECT

	MOVL	*A11(CD_LGPLYR2),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	MOVW	A3,*A0(OXPOS)
	MOVW	A4,*A0(OZPOS)
	MOVL	A0,*A13(PD_CHAR2)
	
	MOVL	*A11(CD_LGPLYR3),A1
	JRZ	CS_NOPART3

	MOVI	CS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0 hOBJECT

	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	MOVW	A3,*A0(OXPOS)
	MOVW	A4,*A0(OZPOS)
	MOVL	A0,*A13(PD_CHAR3)

CS_NOPART3
	;CROP ALL THREE PARTS
	;IF OUSIZEY+OUANIMY > BOX HEIGHT, SUBTRACT THE DIFFERENCE FROM OUSIZEY
	MOVL	*A13(PD_CHAR1),A0
	MOVW	*A0(OUSIZEY),A1
	MOVW	*A0(OUANIOFFY),A2
	SUB	A2,A1
	CMPI	CS_BIGDISPHEIGHT,A1
	JRLE	NO_CROP1

	;SUBTRACT THE DIFFERENCE FROM OUSIZEY
	MOVI	CS_BIGDISPHEIGHT,A3
	SUB	A3,A1
	MOVW	*A0(OUSIZEY),A2
	SUB	A1,A2
	MOVW	A2,*A0(OUSIZEY)

NO_CROP1
	MOVL	*A13(PD_CHAR2),A0
	MOVW	*A0(OUSIZEY),A1
	MOVW	*A0(OUANIOFFY),A2
	SUB	A2,A1
	CMPI	CS_BIGDISPHEIGHT,A1
	JRLE	NO_CROP2

	;SUBTRACT THE DIFFERENCE FROM OUSIZEY
	MOVI	CS_BIGDISPHEIGHT,A3
	SUB	A3,A1
	MOVW	*A0(OUSIZEY),A2
	SUB	A1,A2
	MOVW	A2,*A0(OUSIZEY)

NO_CROP2
	MOVL	*A13(PD_CHAR3),A0
	JRZ	NO_CROP3
	MOVW	*A0(OUSIZEY),A1
	MOVW	*A0(OUANIOFFY),A2
	SUB	A2,A1
	CMPI	CS_BIGDISPHEIGHT,A1
	JRLE	NO_CROP3

	;SUBTRACT THE DIFFERENCE FROM OUSIZEY
	MOVI	CS_BIGDISPHEIGHT,A3
	SUB	A3,A1
	MOVW	*A0(OUSIZEY),A2
	SUB	A1,A2
	MOVW	A2,*A0(OUSIZEY)

NO_CROP3
	;MAKE A LITTLE NOISE
	MOVL	*A11(CD_SELSOUND),A14
	CALLA	MAKESND ;IN:A14 SOUND ID

	MOVI	SNDSELSELECT,A14
	CALLA	MAKESND ;IN:A14 SOUND

CS_DONE
	;DECREMENT THE ACTIVE SELPANELS COUNTER
	MOVW	@ACTIVE_SELPANELS,A14
	DEC	A14
	MOVW	A14,@ACTIVE_SELPANELS

	DIE


**
** CHARSEL_TIMER - PROCESS
**
**  IN
**    NONE
**
**  OUT
**    NONE
**
**  PURPOSE
**    KEEPS AN EYE ON THE INPUT WIDGETS.  AFTER TEN SECONDS WITH NO INPUT
**    OR TWENTY SECONDS TOTAL, IT HOTWIRES YOU THROUGH THE ENTER INITIALS
**    PROCESS.  MOVE ALONG, SON.  THAT'S IT.  KEEP RIIIIIGHT ON GOIN...
**
**  JMS 15 APR 93
**

CHARSEL_TIMER

	;REG USE
	; A4  PLAYER 0 INPUT PORT
	; A5  PLAYER 1 INPUT PORT
	; A6  PLAYER 2 INPUT PORT
	; A7  TOTAL TIME ELAPSED
	; A8  TIME SINCE LAST INPUT
	; A9  BUTTON CHECKSUM

	;GET THE INPUT ADDRESSES
	CLR	A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A4
	INC	A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A5
	INC	A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A6

	;SET INITIAL CHECKSUM
	CALLR	GET_BUTTON_CHECKSUM ;IN:A4,A5,A6 PORT ADDRESSES  OUT:A0 SUM
	MOVE	A0,A9

	;CLEAR THE TIMERS
	CLR	A7
	CLR	A8

CS_MAINLOOP
	MMTM	A12,A4,A5,A6,A7
	SLEEP	1
	MMFM	A12,A4,A5,A6,A7

	;INCREMENT THE TIMERS
	INC	A7
	INC	A8

	;IF OVER THIRTY SECONDS, SET CHARSEL_OVERTIME FLAG
	CMPI	ONESECOND*20,A7
	JRGT	CS_TIMEOUT

	;UPDATE CHECKSUM
	CALLR	GET_BUTTON_CHECKSUM ;IN:A4,A5,A6 PORT ADDRESSES  OUT:A0 SUM

	;COMPARE TO OLD
	CMP	A0,A9

	;IF NO CHANGE, MOVE ALONG
	JRZ	CS_NONEWINPUT

	;NEW PRESS.  UPDATE THE CHECKSUM AND CLEAR THE INPUT TIMER
	MOVE	A0,A9
	CLR	A8
	JRUC	CS_MAINLOOP

CS_NONEWINPUT
	CMPI	ONESECOND*10,A8
	JRLE	CS_MAINLOOP

	;TIME OUT BY NO INPUT
CS_TIMEOUT
	MOVK	1,A14
	MOVW	A14,@CHARSEL_OVERTIME

	DIE
