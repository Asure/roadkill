***
*** FILE: DRD.ASM
*** DERBY RACE DRONE ROUTINES
***
*** JFL 27 OCT 92
*** JFL 15 JAN 93
*** JFL 17 JAN 93
*** JFL 20 JAN 93; STRATEGY REWORKED
*** JFL 22 JAN 93
*** JFL 02 FEB 93
***
	.MLIB	"APMACS.LIB"
	.FILE	"DRD.ASM"
	.TITLE	" <<< DERBY RACE -- DRONE ROUTINES >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**
** COMPILE FLAGS
**
CHICKEN	EQU	0	;DRONE IS CHICKEN

***********************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
*************************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"
	.INCLUDE	"DR.I"
	.INCLUDE	"DRD.I"
	.INCLUDE	"DRINP.I"
	.INCLUDE	"DRM.I"
	.INCLUDE	"DRV.I"

** OTHERS USE
	.DEF	HANDLEDRONE	;DRD.ASM

** WE USE
	.REF	TOPOXZ		;DRT.ASM
	.REF	DRONEAVOIDTBL	;DRT.ASM
	.REF	DRONEAVOIDTBLX	;DRT.ASM
	.REF	FINDPOWERUP	;DR.ASM
	.REF	RANDOMA2	;APUTIL.ASM
	.REF	OBJOBJDIR32	;DRH.ASM
	.REF	MISFINDLOCKCLOSEST ;DRMIS.ASM
	.REF	OBJ2OBJDIR	;DRH.ASM
	.REF	POINT2POINTDIR16 ;DRH.ASM
   	.REF	SINCOS		;DRSINCOS.ASM
	.REF	WAVEIRQS

** WE USE -- RAM
	.REF	SCRATCH2K	;DRRAM.ASM
	.REF	DRG		;DRRAM.ASM

	.BSS	DDDPTR,32,0
	.BSS	DDD,32*100
	.BSS	DDDX,0

**
** DEFINES
**

PVMIN		EQU	1
PVMAX		EQU	16
SL_SLRL		EQU	16		;SHIFT LEFT FIRST
SR_SLRL		EQU	24
SL_SLRR		EQU	24		;SHIFT LEFT FIRST
SR_SLRR		EQU	24
PVAWAY		EQU	PVMAX
PVHARD		EQU	PVMAX+PVMAX/2

REVTOREVIRQS	EQU	55*4		;MIN TIME BETWEEN
TURBOTOTURBOIRQS EQU	55*1		;MIN TIME BETWEEN
WEAPONTOWEAPONIRQS EQU	55*2		;MIN TIME BETWEEN
SLIDETOSLIDEIRQS EQU	55*1		;MIN TIME BETWEEN
DEFTODEFIRQS	EQU	55*1		;MIN TIME BETWEEN
BTNTIME		EQU	HONDUR+1

SOFTTURN	EQU	STEERA2DMAX/4
HARDTURN	EQU	STEERA2DMAX/2
MAXTURN		EQU	STEERA2DMAX
DRIVECLEANTIME	EQU	15		;LEAVE AT 15!!

TARGETCLOSEDIST	EQU	80H	;CLOSE
TARGETZERODIST	EQU	50H	;REALLY CLOSE

SAVETHINGS	EQU	2	;NUM OF MISSILES/TURBOS TO SAVE NORMALLY
PANICDAMAGE	EQU	32	;PANIC WITH LESS THAN THIS

WEAPCOSTDEFENSE	EQU	2		;HOW MANY WEAPONS THIS COSTS

**
** VAR FLAG CODES
**
** TOP HALF IS CLEARED EACH FRAME, BOTTOM HALF IS SAVED & RESTORED EACH FRAME
**
** JFL 29 JAN 93
** JFL 18 FEB 93
**
M_VFPANIC	EQU	0001H		;ALMOST DEAD
M_VFINT		EQU	0002H		;INTERRUPT STATE
M_VFCLOSE	EQU	0004H		;TARGET IS CLOSE
B_VFPANIC	EQU	0
B_VFINT		EQU	1
B_VFCLOSE	EQU	2
M_VFSIGNAL	EQU	00010000H	;SIGNAL TO OTHER ROUTINES
B_VFSIGNAL	EQU	16

**
** BTN CODES
**
** PPPP0000 XXXXSSWW 00000XXX XXXX XXXXDBBB
**
** PPPP PEDAL 0..F 0=FASTEST, F=BRAKE
** SS WHEEL SPIN STRENGTH 0=SOFT,1=HARD,2=MAX,3=UNDEFINED
** WW WHEEL SPIN DIR 0=STRAIGHT,1=LEFT,2=RIGHT,3=KEEP TURNING
** BBB BUTTON BITS BIT0=REV,BIT1=WEAPON,BIT2=TURBO
** D DANGER BIT -- CAR IS IN DANGER...
**
** THE 0 BITS ARE ASSUMED TO BE ZERO!
**
** JFL 20 JAN 93
** JFL 22 JAN 93
**
M_BTNREV	EQU	000000001H	;REVERSE
M_BTNWEAPON	EQU	000000002H	;WEAPON
M_BTNTURBO	EQU	000000004H	;TURBO
M_BTNDANGER	EQU	000000008H	;DANGER BIT
M_WHLSTRAIGHT	EQU	0		;STRAIGHT AHEAD
M_WHLLEFT	EQU	000010000H	;TURN LEFT
M_WHLRIGHT	EQU	000020000H	;TURN RIGHT
M_WHLKEEP	EQU	000030000H	;KEEP TURNING
M_WHLSOFT	EQU	0		;SOFT TURN
M_WHLHARD	EQU	000040000H	;HARD TURN
M_WHLMAX	EQU	0000C0000H	;MAX TURN (PROBABLY SLIDES)
M_PDLMAX	EQU	0		;MAX PEDAL
M_PDLMED	EQU	040000000H	;MEDIUM PEDAL
M_PDLSTOP	EQU	0F0000000H	;STOP
B_BTNDANGER	EQU	3		;DANGER BIT

SLR_BTN		EQU	28		;BITS OF PURE BUTTON DATA
SLR_BTNNODANGER	EQU	29     		;W/O DANGER BIT
SR_PDL		EQU	28		;ISOLATE PDL BITS
SL_WHL		EQU	12		;ISOLATE WHL BITS (LEFT FIRST)
SR_WHL		EQU	28


**
** PRIORITIES
**
** VALUES 0..F WHERE F IS HIGHEST
** VALUES >= CUR VALUES INTERRUPT
**
** JFL 20 JAN 93
**
PRI_POWERUP	EQU	2
PRI_MISLOCK	EQU	3

	.TEXT
	.EVEN

***
*** MISC -----------------------------------------------------------------
***

**
** FINDTARGETCAR
**
** IN
**   A0-A4,A10-A11 SC
**   A6 DD
**   A7 CD
**   A8 OBJ
**   B0 SCRATCH
**   B2 AR
**   B3 DLEVEL
**   B4 RANDOM
**   B5 WAVEIRQS
** OUT
**  A10 TARGET OBJ OR ZERO (DOESNT SET Z FLAG)
**  A11 TARGETVAL
**
** JFL 10 JAN 93
** JFL 22 JAN 93; REWRITTEN FROM CLOSEST PLAYER
** JFL 18 FEB 93; FIXED DRONE VS PLAYER CHECK
**
FINDTARGETCAR

	CLR	B0			;CHECK EVERY CAR

	;ARE WE SMART ENOUGH TO AVOID TARGETTING OTHER DRONES?
	MOVE	B3,A14			;DLEVEL
	SRL	2,A14
	JRZ	FTCSETUP

	;ARE THERE PLAYERS
	MOVW	@DRG+DRGALIVEPLAYERS,A14
	JRZ	FTCSETUP
	TLOCKON	N
	JRN	FTCSETUP

	INC	B0			;CHECK ONLY PLAYER CARS

FTCSETUP
	;GET SUPL
	CLR	A10				;NO TARGET YET
	MOVL	@SUPPLSTS+SUPL_CAR,A0
	JRZ	FTCX

	;SETUP
	MOVI	32767,A11			;MAX DIST
	MOVW	*A8(OXPOS),A1
	MOVW	*A8(OZPOS),A4

FTCLOOP
	;DONT CHECK OURSELVES
	CMP	A8,A0
	JREQ	FTCNEXT

	;SHOULD WE CHECK PLAYER CARS?
	MOVE	B0,B0
	JRZ	FTCEVERYCAR

	;ONLY CHECK PLAYER CAR OBJS
	MOVL	*A0(OCAR),A14
	MOVB	*A14(CDFLAGS+B_CDFDRONE-7),A14
	JRN	FTCNEXT

FTCEVERYCAR
	;REG USE
	;  A0 OBJ
	;  A1 SRCX
	;  A2-A3 SCRATCH
	;  A4 SRCY
	;  A6 DD
	;  A7 CD
	;  A8 OBJ
	; A10 CUR TARGET
	; A11 BEST TARGET DIST/VALUE

	;GET OBJ XY
	MOVW	*A0(OXPOS),A2		;X2
	MOVW	*A0(OZPOS),A3		;Y2

	;GET DISTANCE
	QDISTXY	A1,A4,A2,A3 ;X1,Y1,X2,Y2 OUT:Y2 SC:X2
	
	;TAKE INTO ACCOUNT HOW AGGRESSIVE THE PLAYER IS
	MOVL	*A0(OCAR),A2
	MOVW	*A2(CDAGG),A2
	SLL	1,A2
	
	MOVE	B3,A14			;DLEVEL
	SRL	1,A14
	JRZ 	FTCDULL

	;GO FOR THE AGGRESSOR
	SUB	A2,A3
	JRUC	FTCCHECK
FTCDULL
	;GO FOR THE DULLARD
	ADD	A2,A3
FTCCHECK

	;CHECK IF THIS IS BETTER
	CMP	A11,A3
	JRGE	FTCNEXT

	;ITS A KEEPER
	MOVE	A0,A10			;BETTER OBJ
	MOVE	A3,A11			;BETTER DIST

FTCNEXT
	;NEXT
	MOVL	*A0(OSLINK),A0
	JRNZ	FTCLOOP

FTCX
	RETS

**
** FINDCLOSESTCAR
**
** IN
**   A0-A4,A10-A11 SC
**   A6 DD
**   A7 CD
**   A8 OBJ
**   B0 SCRATCH
**   B2 VAR
**   B3 DLEVEL
**   B4 RANDOM
**   B5 WAVEIRQS
** OUT
**  A10 TARGET OBJ OR ZERO (DOESNT SET Z FLAG)
**  A11 DIST
**
** JFL 10 JAN 93
** JFL 22 JAN 93; REWRITTEN FROM CLOSEST PLAYER
** JFL 02 FEB 93; CLOSEST CAR
** JFL 18 FEB 93; FIXED DRONE VS PLAYER CHECK
**
FINDCLOSESTCAR

	CLR	B0			;CHECK EVERY CAR

	;ARE WE SMART ENOUGH TO AVOID TARGETTING OTHER DRONES?
	MOVE	B3,A14			;DLEVEL
	SRL	2,A14
	JRZ	FCCSETUP

	;ARE THERE PLAYERS
	MOVW	@DRG+DRGALIVEPLAYERS,A14
	JRZ	FCCSETUP
	TLOCKON	N
	JRN	FCCSETUP

	INC	B0			;CHECK ONLY PLAYER CARS

FCCSETUP
	;GET SUPL
	CLR	A10				;NO TARGET YET
	MOVL	@SUPPLSTS+SUPL_CAR,A0
	JRZ	FCCX

	;SETUP
	MOVI	32767,A11			;MAX DIST
	MOVW	*A8(OXPOS),A1
	MOVW	*A8(OZPOS),A4

FCCLOOP
	;DONT CHECK OURSELVES
	CMP	A8,A0
	JREQ	FCCNEXT

	;SHOULD WE CHECK PLAYER CARS?
	MOVE	B0,B0
	JRZ	FCCEVERYCAR

	;ONLY CHECK PLAYER CAR OBJS
	MOVL	*A0(OCAR),A14
	MOVB	*A14(CDFLAGS+B_CDFDRONE-7),A14
	JRN	FCCNEXT

FCCEVERYCAR
	;REG USE
	;  A0 OBJ
	;  A1 SRCX
	;  A2-A3 SCRATCH
	;  A4 SRCY
	;  A6 DD
	;  A7 CD
	;  A8 OBJ
	; A10 CUR TARGET
	; A11 BEST TARGET DIST/VALUE

	;GET OBJ XY
	MOVW	*A0(OXPOS),A2		;X2
	MOVW	*A0(OZPOS),A3		;Y2

	;GET DISTANCE
	QDISTXY	A1,A4,A2,A3 ;X1,Y1,X2,Y2 OUT:Y2 SC:X2
	
	;CHECK IF THIS IS BETTER
	CMP	A11,A3
	JRGE	FCCNEXT

	;ITS A KEEPER
	MOVE	A0,A10			;BETTER OBJ
	MOVE	A3,A11			;BETTER DIST

FCCNEXT
	;NEXT
	MOVL	*A0(OSLINK),A0
	JRNZ	FCCLOOP

FCCX
	RETS


***
*** DRONE BUTTON SCRIPTS --------------------------------------------------
***

**
** BUTTON DEFINES
**
BTNR	EQU	1
BTNW	EQU	2
BTNT	EQU	4

**
** PRIORITIES
**
** JFL 17 JAN 93
**
PRIREV		EQU	1
PRITURBO	EQU	1
PRITURBOREV	EQU	1
PRIWEAPON	EQU	2
PRIDEFENSE	EQU	3
	
**
** DRONE BUTTONS SCRIPTS
**
** .WORD 0000 PPPP TTTT 0BBB
** PPPP PRI, MUST BE > CUR PRI TO TAKE OVER
** TTTT	TIME TO HOLD THIS
** BBB	BUTTON STATE, RIGHTMOST BIT IS BUTTON 0, 1==ON
**
** .WORD 0	<- TERM SCRIPT
**
** ALL BUTTONS ARE RELEASED AT SCRIPT END
** OR WHEN ONE SCRIPT OVERRIDES ANOTHER
**
** BUTTON VALUES
** 1 = TURBO
** 2 = WEAPON
** 4 = REVERSE
**
** JFL 17 JAN 93
**
DBSREVERSE
	.WORD	PRIREV*256+HOFFDUR*16+0 ;ALL SCRIPTS START WITH HANDS OFF
	.WORD	PRIREV*256+BTNTIME*16+BTNR
	.WORD	0

DBSTURBO
	.WORD	PRITURBO*256+HOFFDUR*16+0 ;ALL SCRIPTS START WITH HANDS OFF
	.WORD	PRITURBO*256+BTNTIME*16+BTNT
	.WORD	0

DBSTURBOREVERSE
	.WORD	PRITURBOREV*256+HOFFDUR*16+0 ;ALL SCRIPTS START WITH HANDS OFF
	.WORD	PRITURBOREV*256+BTNTIME*16+BTNR
	.WORD	PRITURBOREV*256+HOFFDUR*16+0
	.WORD	PRITURBOREV*256+BTNTIME*16+BTNT
	.WORD	0

DBSWEAPON
	.WORD	PRIWEAPON*256+HOFFDUR*16+0 ;ALL SCRIPTS START WITH HANDS OFF
	.WORD	PRIWEAPON*256+BTNTIME*16+BTNW
	.WORD	0

DBSTURBOWEAPON
	.WORD	PRIWEAPON*256+HOFFDUR*16+0 ;ALL SCRIPTS START WITH HANDS OFF
	.WORD	PRIWEAPON*256+BTNTIME*16+BTNW
	.WORD	PRITURBOREV*256+HOFFDUR*16+0
	.WORD	PRIWEAPON*256+BTNTIME*16+BTNT
	.WORD	0

DBSWEAPONREVERSE
	.WORD	PRIWEAPON*256+HOFFDUR*16+0 ;ALL SCRIPTS START WITH HANDS OFF
	.WORD	PRIWEAPON*256+BTNTIME*16+BTNR
	.WORD	PRITURBOREV*256+HOFFDUR*16+0
	.WORD	PRIWEAPON*256+BTNTIME*16+BTNW
	.WORD	0

DBSTURBOWEAPONREVERSE
	.WORD	PRIWEAPON*256+HOFFDUR*16+0 ;ALL SCRIPTS START WITH HANDS OFF
	.WORD	PRIWEAPON*256+BTNTIME*16+BTNR
	.WORD	PRITURBOREV*256+HOFFDUR*16+0
	.WORD	PRIWEAPON*256+BTNTIME*16+BTNT
	.WORD	PRITURBOREV*256+HOFFDUR*16+0
	.WORD	PRIWEAPON*256+BTNTIME*16+BTNW
	.WORD	0

DBSDEFENSE
	.WORD	PRIDEFENSE*256+HOFFDUR*16+0 ;ALL SCRIPTS START WITH HANDS OFF
	.WORD	PRIDEFENSE*256+BTNTIME*16+BTNR+BTNW
	.WORD	0


DBSSIZE		EQU	10H		; SIZE FOR ONE ENTRY
SL_DBSTIME	EQU	24		;SHIFT LEFT FIRST
SR_DBSTIME	EQU	28
SL_DBSPRI	EQU	20		;SHIFT LEFT FIRST
SR_DBSPRI	EQU	28

**
** SETDBS
**
** IN
**   A0 INPDATA
**   A2 DBS
**   A3 SCRATCH
**   A6 DD
**   A7 CD
**   A8 CAR OBJ
**  A10 WHEEL
**  A11 PEDAL
** OUT
**    C IF NOT SET
**  
** JFL 17 JAN 93
**
SETDBS
	MMTM	SP,A1

	;CHEK FOR CURRENT SCRIPT
	MOVL	*A6(DDBS),A3
	JRZ	SDBSNEW
       	
	;CHECK ON PRI OF CURRENT SCRIPT
	MOVW	*A3,A1
	SLL	SL_DBSPRI,A1		;ISOLATE PRI
	SRL	SR_DBSPRI,A1

	;GET PRI OF NEW SCRIPT
	MOVW	*A2,A14
	SLL	SL_DBSPRI,A14		;ISOLATE PRI
	SRL	SR_DBSPRI,A14

	;CHECK PRI
	CMP	A1,A14	
	JRLE	SDBSBADX
	
	;REPLACE DBS
	;SET TO DO HANDS OFF FIRST
	MOVL	A2,*A6(DDBS)
	MOVK	1,A14			;NEXT CHECK
	MOVW	A14,*A6(DDBSTIME)
	JRUC	SDBSX
	

SDBSNEW
	;SET TO DO FIRST CODE AFTER HANDS OFF FIRST
	ADDK	DBSSIZE,A2
	MOVL	A2,*A6(DDBS)
	MOVK	1,A14	       		;NEXT CHECK
	MOVW	A14,*A6(DDBSTIME)

SDBSX
	CLRC
	MMFM	SP,A1
	RETS
SDBSBADX
	SETC
	MMFM	SP,A1
	RETS

**
** HANDLEDBS
**
** IN
**   A0 DBS, SCRATCH
**   A1-A5 SCRATCH
**   A6 DD
**   A7 CD
**   A8 CAR OBJ
**  A10 WHEEL
**  A11 PEDAL
**  
** JFL 17 JAN 93
**
HANDLEDBS
	;TIME FOR BUTTON CHANGE
	MOVW	*A6(DDBSTIME),A2		
	DEC	A2
	MOVW	A2,*A6(DDBSTIME)
	JRP	HDBSX			;KEEP DOING IT

	;NEXT SCRIPT ENTRY
	MOVW	*A0+,A2			;SCRIPT CODE
	JRZ	HDBSOFF			;SCRIPT END

	;SET NEXT SCRIPT & TIME
	MOVL	A0,*A6(DDBS)
	MOVE	A2,A14			;SCRIPT CODE
	SLL	SL_DBSTIME,A14		;ISOLATE PRI
	SRL	SR_DBSTIME,A14
	MOVW	A14,*A6(DDBSTIME)

	;SET BUTTONS
	MOVL	*A7(CDINPDATA),A0	
	ADDI	INPB0,A0
	MOVK	NUMBUTTONS,A3
	MOVK	1,A4
	
HDBSLOOP	
	SRL	1,A2			;TEST DESIRED BUTTON STATE
	JRC	HDBSLSET

	;CLEAR BUTTON
	MOVW	*A0,A14
	ADD	A4,A14
	ANDN	A4,A14
	MOVW	A14,*A0+
	JRUC	HDBSNEXT
	
HDBSLSET
	;SET BUTTON
	MOVW	*A0,A14
	OR	A4,A14
	MOVW	A14,*A0+

HDBSNEXT
	;NEXT BUTTON
	DSJ	A3,HDBSLOOP
	JRUC	HDBSX
	
	
HDBSOFF
	;CLEAR SCRIPT
	MOVL	A2,*A6(DDBS)

	;GET INPDATA
	MOVL	*A7(CDINPDATA),A0

	;HANDS OFF BUTTONS
	;IF BUTTON WAS OFF, THEN DONT AFFECT
	;IF BUTTON WAS ON, THEN BUMP UP TO NEXT OFF POSITION

	;B0
	MOVK	1,A2
	MOVW	*A0(INPB0),A14
	ADD	A2,A14
	ANDN	A2,A14
	MOVW	A14,*A0(INPB0)

	;B1 & B2
	MOVI	[1,1],A2
	MOVL	*A0(INPB1),A14		;B2:B1
	ADDXY	A2,A14
	ANDN	A2,A14
	MOVL	A14,*A0(INPB1)
	
HDBSX
	RETS


***
*** LOOK AHEAD --------------------------------------------------------------
***

**
** THE PLAN
**
** LAPRIMEDIRTBL
** DEFINES ANGLES FROM THE DIR THE CAR IS DRIVING
** THESE ANGLE ARE ADDED TO THE CARS AND THE SIN & COS VALUES ARE PULLED
** FOR THESE ANGLES
**
** LAPDIRFIXTBL
** USES THE PULLED SIN & COS VALUES AS INDEXED BY LAPSIZE*N WHERE N IS THE
** ANGLE AS DEFINED BY LAPRIMEDIR TBL
** A PIXEL OFFSET IS FIGURED BY MULTIPLYING THE FIXED DISTANCE DEFINED IN
** LAPDIRFIXTBL BY A SCALE FACTOR TO ACCOUNT FOR Z SCALING OF IMAGES,
** AND THEN THIS DISTANCE IS BROKEN INTO X & Z PARTS USING THE COS & SIN
**
** LAPDIRVELTBL
** WORKS THE SAME WAY AS LAPDIRFIXTBL EXCEPT THE VEL OF THE CAR IS USED
** INSTEAD OF A FIXED DISTANCE
**
** THE OFFSETS FROM LAPDIRFIXTBL & LAPDIRVELTBL ARE THEN ADDED TO THE
** CARS POSITION AND THESE ARE LOOKED UP IN THE GHOST MAP
**
** IF THE TERRAIN TYPE SIGNALS THIS IS AN OBSTACLE TO BE AVOIDED
** (DRONEAVOIDTBL IN DRT.ASM) THEN THE POINT VALUE IS LOOKED UP
** IN POINTVALTBL AND ADDED INTO THE SLR CODE
**
** POINTVALTBL MUST BE IN ORDER OF POINTS ADDED DUE TO LAPDIRFIXTBL AND
** THEN LAPDIRVELTBL
**
** THE SLR CODE IS HOW BLOCKED THE WAY IS STRAIGHT AHEAD, LEFT, AND RIGHT
** OF THE CAR
**
** JFL 03 FEB 93
**

**
** LAPRIMEDIRTBL
** 
** .WORD DIR
**
** JFL 22 JAN 93
** JFL 03 FEB 93
**
LAPRIMEDIRTBL
	.WORD	0			;   0 DEGREES
	.WORD	DIR180/8		;22.5 DEGREES LEFT
	.WORD	2*DIR180-DIR180/8	;22.5 DEGREES RIGHT
	.WORD	DIR180/4		;  45 DEGREES LEFT
	.WORD	2*DIR180-DIR180/4	;  45 DEGREES RIGHT
	.WORD	-1		;TERMINATE
	
LAFIXDIST	EQU	60	;DOTS TO LOOK AHEAD

LAPSIZE		EQU	20H	;SIZE OF POINT DATA IN RAM TBL

**
** LADIRFIXTBL
**
** .WORD DIST,OFFSET
** OFFSET INTO SIN&COS TBL FROM LAPRIMEDIRTBL
** DISTANCE TOWARD THE POINT
**
** JFL 22 JAN 93
** JFL 03 FEB 93
**
LADIRFIXTBL
	.WORD	LAFIXDIST,LAPSIZE*0
	.WORD	LAFIXDIST,LAPSIZE*3
	.WORD	LAFIXDIST,LAPSIZE*4
	.LONG	-1			;TERMINATE

**
** LADIRVELTBL
**
** .WORD DISTSHIFT,OFFSET
** OFFSET INTO SIN&COS TBL FROM LAPRIMEDIRTBL
** DISTSHIFT VEL OF CAR IS USED FOR DIST AND SHIFTED LEFT BY THIS COUNT
**
** JFL 22 JAN 93
** JFL 03 FEB 93
**
LADIRVELTBL
	.WORD	1,LAPSIZE*0
	.WORD	2,LAPSIZE*0
	.WORD	2,LAPSIZE*1
	.WORD	2,LAPSIZE*2
	.LONG	-1			;TERMINATE



SLR	.MACRO	SV,LV,RV
	.LONG	(:SV:<<16)+(:LV:<<8)+:RV:
	.ENDM
**
** POINTVALTBL
**
** .LONG 00SSLLRR
** A VALUE IN THE SLOT INDICATES AN OBSTACLE IN THAT DIR
**
** ENTRIES ARE IN ORDER OF APPEARANE IN LADIRFIXTBL THEN LADIRVELTBL
**
** IF SS IS ZERO THEN VALUE IS ADDED TO SLR CODE, BUT TURN IS NOT
** INITIATED
** PUT PVMIN IN SS POSITION FOR POINT TO TURN CAR AT ALL
**
** JFL 17 JAN 93
** JFL 22 JAN 93
** JFL 03 FEB 93
**
POINTVALTBL
	;FIXED DISTANCES
	SLR	PVMAX,0,0			;   0 DEG
	SLR	PVMIN,PVMAX/2,0			;  45 DEG LEFT
	SLR	PVMIN,0,PVMAX/2			;  45 DEG RIGHT
	;VEL BASED DISTANCES
	SLR	PVMAX/2,0,0			;   0 DEG
	SLR	PVMAX/2,0,0			;   0 DEG
	SLR	PVMIN,PVMAX/2,0			;22.5 DEG LEFT
	SLR	PVMIN,0,PVMAX/2			;22.5 DEG RIGHT
	.LONG	0				;DEBUG



**
** LOOKAHEAD
**
** IN
**   A0-A4 SCRATCH
**   A6 DD
**   A7 CD
**   A8 CAR OBJ
**   A9-A11 SCRATCH
** OUT
**   A9 SCRATCH2K BUFFER COUNT (FOR FORCECOURSE)
**   SCRATCH2K SETUP FOR FORCECOURSE
**
** JFL 15 JAN 93
** JFL 17 JAN 93
** JFL 22 JAN 93
**
LOOKAHEAD

	;SETUP
	MOVB	*A8(ODIR),A10
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	LASUFWD
	ADDI	DIR180,A10
LASUFWD

	;
	;FILL BUF WITH PRIME DIRS SIN&COS
	;

	;GET SIN&COS FOR ALL OUR PRIME ANGLES
	MOVI	LAPRIMEDIRTBL,A0	;SRC
	MOVI	SCRATCH2K,A1		;DST
	MOVE	A1,A11			;SAVE
	MOVI	SINCOS,A4
	
	;FIRST
	MOVW	*A0+,A2			;GET NEXT PRIME DIR
	JRN	LAPDDONE

LAPDLOOP
	;ADD IN DIR OF CAR TRAVEL & GET COS:SIN
	ADD	A10,A2
	SLL	24,A2
	SRL	24-SL_DIR2TRIG,A2	
	ADD	A4,A2
	MOVL	*A2,*A1			;COS:SIN
	ADDK	32,A1
		      
	;NEXT
	MOVW	*A0+,A2			;GET NEXT PRIME DIR
	JRNN	LAPDLOOP
	
LAPDDONE

	;SET UP FOR BOTH FIXED AND VEL BASED POINTS
	MOVW	*A8(OSCALEMUL),A10

	;
	;FIGURE XY OFFSET OF FIXED DISTANCE POINTS
	;

	MOVE	A1,B0			;FIRST OFFSET ENTRY
	MOVI	LADIRFIXTBL,A0		;SRC

	;FIRST
	MOVL	*A0+,A2			;OFF:DIST
	JRN	LADFDONE

LADFLOOP
	;GET DIST & PULL COS:SIN
	MOVE	A2,A9			;OFF:DIST
	ZEXT	A9,W			;ISOLATE DIST
	SRL	16,A2			;ISOLATE OFF
	ADD	A11,A2			;COS:SIN TBL
	MOVL	*A2,A3			;COS:SIN

	;DO MUL
	SETF	12,1,1			;SETF-----------------
	
	;SCALE DIST BASED ON Z
	MPYU	A10,A9			;SCALEMUL*DIST
	SRL	MPYSCALE,A9		;BACK INTO DOTS
	MOVE	A9,A2			;COPY DIST
	
	;DO TRIG THING TO FIND OFFSETS IN Z & X DIR
	MOVE	A3,A9			;COS:SIN
	SEXT	A3,W			;SIN
	SRA	16,A9			;COS
	MPYS	A2,A3			;DIST*SIN=OFFZ
	MPYS	A2,A9			;DIST*COS=OFFX

	SETF	32,1,1			;SETF------------------

	;SAVE RESULT
	SRA	TRIGSHIFT,A9	
	MOVW	A9,*A1+	
	SRA	TRIGSHIFT,A3
	NEG	A3			;Z IS UP SCREEN
	MOVW	A3,*A1+	
	
	;NEXT
	MOVL	*A0+,A2			;OFF:DIST
	JRNN	LADFLOOP
	
LADFDONE

	;
	;FIGURE XY OFFSET OF VELOCITY BASED POINTS
	;

	MOVW	*A7(CDDRIVEMAG),A4	;VELOCITY
	ABS	A4
	SRL	VELSHIFT-2,A4		;VEL INTO DOTS * 16
	JRZ	LADVDONE		;SKIP VEL BASED POINTS

	MOVI	LADIRVELTBL,A0		;SRC

	;FIRST
	MOVL	*A0+,A2			;OFF:DISTSHIFT
	JRN	LADVDONE

LADVLOOP
	;PULL COS:SIN
	MOVE	A2,A14
	SRL	16,A14
	ADD	A11,A14			;COS:SIN TBL
	MOVL	*A14,A3			;COS:SIN
	
	;MULS
	SETF	12,1,1			;SETF-------------------

	;SCALE DIST BASED ON Z
	MOVE	A4,A9			;VEL
	MPYU	A10,A9			;SCALEMUL*DIST
	SRL	MPYSCALE,A9		;BACK INTO DOTS
	MOVE	A9,A14			;COPY DIST

	;SHIFT DIST
	ZEXT	A2,W			;ISOLATE DISTSHIFT
	SLL	A2,A14			;DISTSHIFT MULTIPLIER

	;DO TRIG THING TO FIND OFFSETS IN Z & X DIR
	MOVE	A3,A9			;COS:SIN
	SEXT	A3,W			;SIN
	SRA	16,A9			;COS
	MPYS	A14,A3			;DIST*SIN=OFFZ
	MPYS	A14,A9			;DIST*COS=OFFX

	SETF	32,1,1			;SETF-------------------

	;SAVE RESULT
	SRA	TRIGSHIFT,A9
	MOVW	A9,*A1+	
	SRA	TRIGSHIFT,A3
	NEG	A3			;Z IS UP SCREEN
	MOVW	A3,*A1+	
	
	;NEXT
	MOVL	*A0+,A2			;OFF:DIST
	JRNN	LADVLOOP
	
LADVDONE

	;
	;FIND TOPO AT THESE POINTS
	;

	;REG USE
	;  A0,A2,A3,A4 SCRATCH
	;  A1 LAST ENTRY IN OFFSET TBL
	;  A11 SCRATCH2K
	;  A6,A7,A8 DD,CD,OBJ
	;  B0 FIRST OFFSET ENTRY

	MOVE	A11,A0			;DST
	MOVE	B0,A11			;FIRST ENTRY IN OFFSET TBL
	.IF DEBUG
	CMPI	SCRATCH2K,A0
	TLOCKON	NE
	.ENDIF ;DEBUG
	CLR	A9			;COUNT

	;GET XY OF OBJ
	MOVW	*A8(OXPOS),A4		
	MOVW	*A8(OZPOS),A14
	SLL	16,A14
	MOVY	A14,A4
LATLOOP
	;GET XY OF POINT & THEN TOPO
	MOVL	*A11+,A2			;OFFY:OFFX
	ADDXY	A4,A2
	CALLA	TOPOXZ ;IN:A2 Z:X OUT:A2,A3 TOPOC,TOPOBA
	MOVW	A3,*A0+			;STORE

	;NEXT
	INC	A9			;COUNT
	CMP	A1,A11			;CHECK FOR END OF BUFFER
	JRLO	LATLOOP

	RETS

**
** FORCECOURSE
**
** IN
**   SCRATCH2K SETUP FROM LOOKAHEAD
**   A0-A1 A4 SCRATCH
**   A6 DD
**   A7 CD
**   A8 CAR OBJ
**   A9	SCRATCH2K BUFFER COUNT (FROM LOOKAHEAD)
**   A10-A11 SCRATCH
**   B2 VAR
**   B3 DLEVEL
**   B4 RANDOM
**   B5 WAVEIRQS
** OUT
**    C IF COURSE WAS FORCED
**      A5 BTN CODE
**   NC COURSE WASNT FORCED
**      A5 HAS NOT CHANGED
**
** JFL 17 JAN 93
** JFL 20 JAN 93
** JFL 21 JAN 93
**
FORCECOURSE
	
	;REG USE	
	;  A0 SRC
	;  A1 POINTVALTBL
	;  A2
	;  A3 POINTCOUNT
	;  A4 SLR CODE
	;  A5
	;  A6 DD
	;  A7 CD
	;  A8 OBJ
	;  A9 
	; A10
	; A11

	;SET UP
	MOVI	SCRATCH2K,A0 			;SRC
	MOVI	POINTVALTBL,A1			;WHAT EACH POINT IS WORTH
	MOVE	A9,A3				;COUNT
	MOVI	DRONEAVOIDTBL,A9		;TOPO TO AVOID
	CLR	A4				;SLR CODE
	
FCLOOP
	;GET TOPO DATA FOR THIS POINT
	MOVW	*A0+,A2			;GET TOPOB:A
	SLL	24,A2
	SRL	24-3,A2			;SIZEOF TBL
	ADD	A9,A2
	.IF DEBUG
	CMPI	DRONEAVOIDTBLX,A2
	TLOCKON	HS
	.ENDIF ;DEBUG
	MOVB	*A2,A14
	JRZ	FCNEXT
	
	;ADD IN TURN VALUE FOR THIS POINT
	MOVL	*A1,A14
	TLOCKON	Z
	ADD	A14,A4			;00SSLLRR

FCNEXT
	;NEXT
	ADDK	32,A1			;POINTVALTBL
	DSJ	A3,FCLOOP
	MOVE	A4,A1			;CHANGE REG USE

	;DDD ---------------------------
	MOVL	@DDDPTR,A14
	CMPI	DDD,A14
	JRLO	FCDDDSET
	CMPI	DDDX,A14
	JRLO	FCDDDDO
FCDDDSET
	MOVI	DDD,A14
FCDDDDO
	MOVL	A1,*A14+
	MOVL	A14,@DDDPTR
	;DDD ---------------------------

	;EVALUATE THE SLR CODE
	SRL	16,A4
	JRZ	FCSTRAIGHT

	;REG USE
	;  A0 INPDATA
	;  A1 SLR RIGHT
	;  A2
	;  A3 SLR LEFT
	;  A4 SLR STRAIGHT
	;  A5 TARGET/BTN
	;  A6 DD
	;  A7 CD
	;  A8 OBJ
	;  A9
	; A10
	; A11
	
	;SPLIT L & R
	MOVE	A1,A3
	SLL	SL_SLRL,A3		;ISOLATE L
	SRL	SR_SLRL,A3
	SLL	SL_SLRR,A1		;ISOLATE R
	SRL	SR_SLRR,A1
	
	;SEE WHICH WAY IS LESS BLOCKED
	CMP	A3,A1			;AVOIDLEFT,AVOIDRIGHT
	JRGT	FCTHINKLEFT
	JRLT	FCTHINKRIGHT
	
	;JUST AS BLOCKED IN EITHER DIR, SEE IF WE CAN CHOOSE EITHER
	CMPI	PVAWAY,A3
	JRLT	FCTURNANY		;DOESNT MATTER WHICH DIR WE CHOOSE

FCDEADEND
	;
	;HANDLE DRIVING INTO A DEAD END
	;

	;EITHER HIT REVERSE OR STOP & TURN
	RL	1,B4			;RANDOM
	MOVE	B4,A14
	SLL	32-5,A14		;1 OUT OF 32 CHANCE OF REVERSING
	JRZ	FCDEREV

FCDESPIN
	;OFF GAS & KEEP TURNING
	MOVI	M_PDLSTOP+M_WHLKEEP+M_WHLMAX,A5
	JRUC	FCFORCED

FCDEREV
	;REVERSE WITH PEDAL SLAMMED DOWN
	MOVK	M_PDLMAX+M_BTNREV,A5
	JRUC	FCFORCED

FCTHINKLEFT	
	;
	;THINK ABOUT TURNING LEFT
	;
	
	;CHECK HOW BAD IT IS STRAIGHT AHEAD
	CMPI	PVAWAY,A4
	JRGE	FCTLMUST		;MUST TURN

	;MAYBE WE DONT WANT TO TURN
	RL	1,B4			;RANDOM
	JRNC	FCTLSLOW

	;GO STRAIGHT IF NOTHING TOO CLOSE TO EDGE
	CMPI	PVAWAY,A3
	JRLT	FCSTRAIGHT

FCTLSLOW
	;TURN SLOW
	MOVI	M_WHLSOFT,A5
	JRUC	FCTURNLEFT

FCTLMUST
	;TURN HARD
	MOVI	M_WHLHARD,A5

	;SEE HOW BLOCKED THIS WAY IS
	CMPI	PVAWAY,A3
	JRLT	FCTURNLEFT
	JRUC	FCDEADEND

FCTHINKRIGHT
	;
	;THINK ABOUT TURNING RIGHT
	;

	;CHECK HOW BAD IT IS STRAIGHT AHEAD
	CMPI	PVAWAY,A4
	JRGE	FCTRMUST		;MUST TURN

	;MAYBE WE DONT WANT TO TURN
	RL	1,B4			;RANDOM
	JRNC	FCTRSLOW

	;GO STRAIGHT IF NOTHING TOO CLOSE TO EDGE
	CMPI	PVAWAY,A1
	JRLT	FCSTRAIGHT

FCTRSLOW
	;TURN SLOW
	MOVI	M_WHLSOFT,A5
	JRUC	FCTURNRIGHT

FCTRMUST
	;TURN HARD
	MOVI	M_WHLHARD,A5

	;SEE HOW BLOCKED THIS WAY IS
	CMPI	PVAWAY,A1
	JRLT	FCTURNRIGHT
	JRUC	FCDEADEND

FCTURNANY	
	;
	;TURN EITHER WAY
	;

	;TURN WHEEL SOFT
	MOVI	M_WHLSOFT,A5

	;CHECK IF WHEEL IS ALREADY TURNING
	MOVL	*A7(CDINPDATA),A0
	MOVW	*A0(INPWHEELMAG),A14
	JRZ	FCTACHOOSE
	JRN	FCTURNRIGHT
	JRUC	FCTURNLEFT
	
FCTACHOOSE
	;EITHER DIR IS CLEAR, TURN EITHER DIR
	RL	1,B4			;RANDOM
	JRC	FCTURNRIGHT

FCTURNLEFT
	;
	;TURN LEFT
	;

	;A5 HAS WHEEL TURN SPEED
	;MEDIUM PRESSURE ON PEDAL, TURN WHEEL
	MOVI	M_PDLMED+M_WHLLEFT,A14
	OR	A14,A5
	JRUC	FCFORCED

FCSTRAIGHT
	;
	;CONTINUE STRAIGHT
	;

	;A5 MUST BE THE SAME AS ENTRY TO THIS ROUTINE
	;HAS THE CAR BEEN DRIVING CLEAN LONG ENOUGH
	MOVL	*A6(DDCLEANIRQ),A14
	MOVE	B5,A2			;WAVEIRQS
	CMP	A14,A2
	JRHS	FCCLEARAHEADX		;CLEAR & FREE

	;CAR IS CLEAR, BUT HASNT BEEN CLEAR LONG ENOUGH
	CLR	A5			;BTNCLEAR
	JRUC	FCX			;NOT LONG ENOUGH YET

FCTURNRIGHT
	;
	;TURN RIGHT
	;

	;A5 HAS WHEEL TURN SPEED
	;MEDIUM PRESSURE ON PEDAL, TURN WHEEL
	MOVI	M_PDLMED+M_WHLRIGHT,A14
	OR	A14,A5
	
FCFORCED
	;
	;OUR COURSE IF FORCED DUE TO TERRAIN
	;

	;SET TIME OF TURN TO AVOID OBSTACLE
	;THE BIGGER THIS VALUE THE SLOWER THE CAR WILL BE AT RECOVERING
	;AFTER A HIT WITH THE WALLS
	MOVE	B3,A2			;DLEVEL
	MOVK	DRIVECLEANTIME,A14
	SUB	A2,A14			;HOPEFULLY FROM 0..F
	JRP	FCSCLEANTIME
	CLR	A14
FCSCLEANTIME
	MOVE	B5,A2			;CURRENT WAVEIRQS
	ADD	A14,A2
	MOVL	A2,*A6(DDCLEANIRQ)

FCX
	;A5 MUST BE SET TO BTN CODES AS WE WILL SKIP TARGETTING
	SETC			;SIGNAL WE ARE TRYING TO AVOID TERRAIN
	RETS

FCCLEARAHEADX
	;A5 MUST BE AS IT WAS ON ENTRY, AS WE FALL THROUGH TO TARGETTING
	CLRC			;SIGNAL THE WAY AHEAD IS CLEAR
	RETS

***
*** TARGET EVALUATION -----------------------------------------------------
***

**
** TARGETDISTDIR
** SUBROUTINE FOR SEEKTARGET
**
** IN
**   A0	DSTOBJ
**   A8 SRCOBJ
**   B2 VAR
**   B3 DLEVEL
**   B4 RANDOM
**   B5 WAVEIRQS
** OUT
**  A10 DIR
**  A11 DIST
** SCRATCH: A1-A4
**  
**
** JFL 22 JAN 93
**
TARGETDISTDIR
	QDIST	A8,A0,A1,A2,A11 ;OBJ0,OBJ1,SC1,SC1,RESULT

	;DST XY
	MOVW	*A0(OXPOS),A1		;DX
	MOVW	*A0(OZPOS),A3		;DY

	;CHECK IF WE ARE SMART ENOUGH TO TARGET AHEAD OF OBJ
	MOVE	B3,A5		;DLEVEL
	SRL	2,A5		;LEVEL / 4
	JRZ	STGRDIR		;NOT TOO SMART

	;ONLY DO THIS WE ARE CLOSE, BUT NOT TOO CLOSE
	CMPI	TARGETCLOSEDIST+TARGETZERODIST,A11
	JRHI	STGRDIR
	CMPI	TARGETZERODIST,A11
	JRLS	STGRDIR

	;GET VELS
	MOVW	*A0(OXVEL+10H),A2
	MOVW	*A0(OZVEL+10H),A14
	
	;DO A QUICK VEL ADD
	SLL	1,A5		;DO A 2,4,6,8 LOOKAHEAD
STGRAHEADLOOP
	ADD	A2,A1
	ADD	A14,A3
	DSJ	A5,STGRAHEADLOOP

STGRDIR
	;FIND DIR TO POINT
	MOVE	A0,A5			;SAVE
	MOVW	*A8(OXPOS),A0		;SRC X
	MOVW	*A8(OZPOS),A2		;SRC Y
	CALLR	POINT2POINTDIR16 ;IN:A0,A1,A2,A3,A4 SX,DX,SY,DY,SC OUT:A3 DIR
	MOVE	A5,A0			;RESTORE
	MOVE	A3,A10			;DIR
	RETS

**
** SEEKTARGET
**
** IN
**   A5 TARGET
**   A6 DD
**   A7 CD
**   A8 OBJ
**   B2 VAR
**   B3 DLEVEL
**   B4 RANDOM
**   B5 WAVEIRQS
** OUT
**   A4 PDL (PEDAL CODE)
**   A5 BTN (BUTTON CODE)
**
** SCRATCH: A0-A4,A10-A11
**
** JFL 20 JAN 93
** JFL 18 FEB 93
**
SEEKTARGET
	;IS THERE A TARGET?
	MOVE	A5,A5
	JRZ	STSWANDER
	
	;JUMP TO PROPER HANDLING CODE
	MOVL	*A6(DDSEEKJUMP),A14
	.IF DEBUG
	CMPI	SEEKTARGET,A14
	TLOCKON	LO
	.ENDIF ;DEBUG
	JUMP	A14

	;VALID SEEK JUMPS
	;
	;MOVI	STAVOIDOBJ,
	;MOVI	STAVOIDCAR,
	;MOVI	STGOTOPICKUP,
	;MOVI	STGOTORAM,
	;MOVI	STGOTOPOINT,
	
STAVOIDOBJ
	;
	;AVOID AN OBJ
	;

	;FIND TARGET
	MOVE	A5,A0		;COPY OF TARGET
	CALLR	TARGETDISTDIR ;IN:A0,A8 DSTOBJ,SRCOBJ OUT:A10,A11 DIR,DIST
			      ;SC:A1-A5

	CLR	A5

	;CHECK IF WE SHOULD USE OUR DEFENSIVE WEAPON
	BTST	B_VFSIGNAL,B2
	JRZ	STAONOD

	;USE DEFNESIVE WEAPON
	MOVK	M_BTNWEAPON+M_BTNREV,A5	
STAONOD

	;CHECK IF TARGET IS FAR
	CMPI	TARGETCLOSEDIST,A11
	JRGT	STSWANDER 		;FAR AWAY, WANDER AIMLESSLY

	;HEAD AWAY FROM TARGET
	ADDI	DIR180,A10

	;CHECK IF TARGET IS ON TOP OF US
	CMPI	TARGETZERODIST,A11
	JRLT	STAOZERO

	;NEAR, DRIVE FAST, SLIDE
	ORI	M_PDLMAX+M_WHLMAX,A5

	;TURBO SOME OF THE TIME
	RL	1,B4			;RANDOM
	JRNC	STSTEER
	
	;TURBO IF NOTHING ELSE
	MOVE	A5,A14
	SLL	SLR_BTNNODANGER,A14
	JRNZ	STSTEER	     		;ALREADY DOING SOMETHING W/BTNS
	MOVK	M_BTNTURBO,A14
	OR	A14,A5
	JRUC	STSTEER

STAOZERO
	;CHECK IF WE ARE DOING ANYTHING WITH THE BTNS
	ORI	M_PDLMAX+M_WHLMAX+M_BTNDANGER,A5
	MOVE	A5,A14
	SLL	SLR_BTNNODANGER,A14
	JRNZ	STSTEER	     		;ALREADY DOING SOMETHING W/BTNS

	;TARGET IS ON US, DANGER, DRIVE FAST, SLIDE OUT, AND TURBO
	MOVK	M_BTNTURBO,A14
	OR	A14,A5
	JRUC	STSTEER
	

STAVOIDCAR
	;
	;AVOID CAR
	;

	;FIND TARGET
	MOVE	A5,A0		;COPY OF TARGET
	CALLR	TARGETDISTDIR ;IN:A0,A8 DSTOBJ,SRCOBJ OUT:A10,A11 DIR,DIST

	;CHECK IF TARGET IS FAR
	CMPI	TARGETCLOSEDIST,A11
	JRGT	STSWANDER		;TARGET IS MILES AWAY, WANDER

	;HEAD AWAY FROM TARGET
	ADDI	DIR180,A10

	;CHECK IF WE HAVE ANY LEFT
	MOVW	*A7(CDMISSILES),A1
	JRZ	STACNOLAUNCH

	;CHECK IF WE SHOULD LAUNCH FOR THE RANDOMNESS OF IT
	MOVE	B4,A14			;RANDOM
	SLL	32-3,A14		;1 OUT OF 8 CHANCE
	JRZ	STACLAUNCH

	;CHECK IF WE ARE ALMOST DEAD
	BTST	B_VFPANIC,B2
	JRNZ	STACLAUNCH

	;CHECK IF TARGET IS IN THE AIR FROM A PENALTY
	MOVL	*A0(OCAR),A2
	MOVB	*A2(CDFLAGS+B_CDFAIRPENALTY-7),A14
	JRNN	STACNOLAUNCH
	
STACLAUNCH

	;LAUNCH MISSILE
	MOVK	M_BTNWEAPON,A5

STACNOLAUNCH

	;CHECK IF TARGET IS CLOSE
	CMPI	TARGETZERODIST,A11
	JRLO	STACZERO

	;NEAR, DRIVE FAST, SLIDE, TURBO
	MOVI	M_PDLMAX+M_WHLMAX+M_BTNTURBO,A5
	JRUC	STSTEER

STACZERO
	;TARGET IS ON US, DANGER, DRIVE FAST, SLIDE OUT, TURBO
	MOVI	M_PDLMAX+M_WHLMAX+M_BTNDANGER+M_BTNTURBO,A5
	JRUC	STSTEER

STGOTOPICKUP
	;	
	;PICKUP AN OBJ
	;

	;FIND DIR TO OBJ
	MOVE	A8,A2
	MOVE	A5,A3	
	CALLR	OBJ2OBJDIR ;IN:A2,A3 SRCOBJ,DSTOBJ OUT:A3 DIR SC:A0-A4
	MOVE	A3,A10		;DIR

	;FIND ABOUT HOW FAR IT IS
	QDIST	A8,A5,A3,A4,A14 ;OBJ0,OBJ1,SC1,SC1,RESULT
	CMPI	TARGETCLOSEDIST,A14
	JRHI	STGPFAR

	;DRIVE SLOWER IF ITS NEAR
	MOVI	M_PDLMED,A5
	JRUC	STSTEER

STGPFAR
	;DRIVE FAST IF ITS FAR
	CLR	A5		;M_PDLMAX
	JRUC	STSTEER

STGOTORAM
	;	
	;RAM AN OBJ
	;

	;FIND TARGET
	MOVE	A5,A0		;COPY OF TARGET
	CALLR	TARGETDISTDIR ;IN:A0,A8 DSTOBJ,SRCOBJ OUT:A10,A11 DIR,DIST
			      ;SC:A1-A5

	;CHECK RESULT OF QDIST
	CMPI	TARGETCLOSEDIST,A11
	JRLE	STGRCLOSE

	;TARGET IS PRETTY FAR
	MOVI	M_PDLMED,A5		;DRIVE MED
	JRGT	STSTEER			;PRETTY FAR, JUST DRIVE

STGRCLOSE
	;CHECK IF WE HAVE ANY MISSILES
	MOVW	*A7(CDMISSILES),A1
	JRZ	STGRNOLAUNCH

	;CHECK IF WE WANT TO FIRE FOR THE RANDOMNESS OF IT
	RL	1,B4  		;RANDOM
	MOVE	B4,A14
	SLL	32-3,A14	;1 OUT OF 8 CHANCE OF LAUNCH
	JRZ	STGRLAUNCH

	;CHECK IF TARGET IS IN THE AIR FROM A PENALTY
	MOVL	*A0(OCAR),A2
	MOVB	*A2(CDFLAGS+B_CDFAIRPENALTY-7),A14
	JRN	STGRLAUNCH

	;CHECK IF WE ARE DYING
	BTST	B_VFPANIC,B2
	JRZ	STGRNOLAUNCH
	
STGRLAUNCH
	;LAUNCH MISSILE
	MOVK	M_BTNWEAPON,A5
	JRUC	STSTEER

STGRNOLAUNCH
	;CHECK HOW CLOSE WE ARE
	CMPI	TARGETZERODIST,A11
	JRLE	STGRZERO

	;DO WE WANT TO TURBO?
	CLR	A5
	RL	1,B4		;RANDOM
	JRNC	STSTEER

	;TURBO
	MOVK	M_BTNTURBO,A5
	JRUC	STSTEER

STGRZERO
	;TARGET IS REALLY CLOSE, TARGET IS IN DANGER
	MOVK	M_BTNTURBO+M_BTNDANGER,A5
	JRUC	STSTEER

	;
	;DRIVE TO A POINT
	;
STGOTOPOINT
	TLOCKUP ;NOT IN YET

	;
	;STEER
	;

STSTEER
	;
	;STEER TOWARD DIR IN A10
	;

	;FIND OUR DIR
	MOVW	*A7(CDDRIVEDIR),A11
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	STSNN
	ADDI	DIR180,A11
STSNN
	;FIGURE WHICH WAY TO TURN THE WHEEL
	SUB	A11,A10
	SLL	24,A10
	SRL	24,A10

	;CHECK IF WE ARE IN LINE
	CMPI	DIR180/16,A10
	JRLT	STSONTARGET
	CMPI	2*DIR180-DIR180/16,A10
	JRGT	STSONTARGET

	;FIGURE WHICH WAY WE NEED TO TURN
	CMPI	DIR180/4,A10
	JRLT	STSSOFTLEFT
	CMPI	2*DIR180-DIR180/4,A10
	JRGT	STSSOFTRIGHT
	CMPI	DIR180/2,A10
	JRLE	STSHARDLEFT
	CMPI	2*DIR180-DIR180/2,A10
	JRLT	STSONTARGETREVERSE

STSHARDRIGHT
	ORI	M_WHLHARD+M_WHLRIGHT,A5
	JRUC	STX
STSHARDLEFT
	ORI	M_WHLHARD+M_WHLLEFT,A5
	JRUC	STX
STSSOFTLEFT
	ORI	M_WHLSOFT+M_WHLLEFT,A5
	JRUC	STX
STSSOFTRIGHT
	ORI	M_WHLSOFT+M_WHLRIGHT,A5
	JRUC	STX

STSONTARGETREVERSE
	;BEHIND US, REVERSE
	;IF WE ARE NOT DOING SOMETHING ELSE WITH THE BTNS THEN REVERSE
	MOVE	A5,A14
	SLL	SLR_BTNNODANGER,A14
	JRNZ	STX
	MOVK	M_BTNREV,A14
	OR	A14,A5
	JRUC	STX
	
STSWANDER
	;KEEP GOING STRAIGHT
	;MAYBE TURN RANDOMLY ONCE IN A WHILE
	CLR	A5
	JRUC	STX
	
STSONTARGET
	;ON TARGET

STX
	RETS

**
** PICKTARGET
** MUST ALSO SET DDSEEKJUMP!
**
** IN
**   A0-A4 SCRATCH
**   A5 TARGET
**   A6 DD
**   A7 CD
**   A8 OBJ
**   B0 SCRATCH
**   B2 VAR
**   B3 DLEVEL
**   B4 RANDOM
**   B5 WAVEIRQS
** OUT
**   A5 TARGET
**
** JFL 20 JAN 93
**
PICKTARGET
	;
	;LOOK FOR A TARGET CAR
	;
	CALLR	FINDTARGETCAR ;IN:A0-A4,A6,A7,A8,B0 SC,DD,CD,OBJ,SC
			      ;OUT:A10,A11 TARGET OR 0,TARGETVAL

	MOVE	A10,A5		;A5 IS TARGET OR 0
	JRZ	PTX

	.IF CHICKEN
	MOVI	STAVOIDOBJ,A14
	MOVL	A14,*A6(DDSEEKJUMP)
	JRUC	PTX
	.ENDIF ;CHICKEN

	;SET TARGET ETC
	MOVL	A5,*A6(DDTARGET)

	;PICK A METHOD OF ATTACK
	MOVI	STGOTORAM,A2		;DEFAULT
	MOVW	*A7(CDMISSILES),A14
	SUBK	SAVETHINGS+1,A14	;DONT BLOW EM ALL
	JRN	PTSET

	;RANDOMLY CHOOSE
	RL	1,B4			;RANDOM
	JRC	PTSET
	MOVI	STAVOIDCAR,A2
PTSET
	MOVL	A2,*A6(DDSEEKJUMP)

	;FIGURE RE-TARGETTING TIME BASED ON LEVEL
	MOVE	B3,A2			;DLEVEL
	SUBK	DLEVELBEST,A2
	NEG	A2
	INC	A2
	SLL	4,A14
	MOVE	B5,A2			;WAVEIRQS
	ADD	A14,A2
	MOVL	A2,*A6(DDTARGETIRQ)

PTX
	RETS



**
** WHLJUMPTBL
**
** JFL 21 JAN 93
**
WHLJUMPTBL
	.LONG	PBSTRAIGHT
	.LONG	PBSOFTLEFT
	.LONG	PBSOFTRIGHT
	.LONG	PBSOFTKEEP
	.LONG	PBSTRAIGHT
	.LONG	PBHARDLEFT
	.LONG	PBHARDRIGHT
	.LONG	PBHARDKEEP
	.LONG	PBUNDEF
	.LONG	PBUNDEF
	.LONG	PBUNDEF
	.LONG	PBUNDEF
	.LONG	PBSTRAIGHT
	.LONG	PBMAXLEFT
	.LONG	PBMAXRIGHT
	.LONG	PBMAXKEEP
WHLJUMPTBLX

**
** PDLTBL
**
** JFL 21 JAN 93
**
PDLTBL
	.WORD	PEDALA2DMAX			;FASTEST
	.WORD	PEDALA2DMAX-PEDALA2DMAX/10
	.WORD	PEDALA2DMAX-PEDALA2DMAX/9
	.WORD	PEDALA2DMAX-PEDALA2DMAX/8
	.WORD	PEDALA2DMAX-PEDALA2DMAX/7
	.WORD	PEDALA2DMAX-PEDALA2DMAX/6
	.WORD	PEDALA2DMAX-PEDALA2DMAX/5
	.WORD	PEDALA2DMAX-PEDALA2DMAX/4
	.WORD	PEDALA2DMAX-PEDALA2DMAX/3
	.WORD	PEDALA2DMAX-PEDALA2DMAX/2
	.WORD	PEDALA2DMAX-PEDALA2DMAX/2-PEDALA2DMAX/10
	.WORD	PEDALA2DMAX-PEDALA2DMAX/2-PEDALA2DMAX/8
	.WORD	PEDALA2DMAX-PEDALA2DMAX/2-PEDALA2DMAX/6
	.WORD	PEDALA2DMAX-PEDALA2DMAX/2-PEDALA2DMAX/5
	.WORD	PEDALA2DMAX-PEDALA2DMAX/2-PEDALA2DMAX/4
	.WORD	0				;BRAKES
PDLTBLX

**
** BTNTBL
**
** JFL 20 JAN 93
**
BTNTBL

**
** BTNDBSTBL
**
** JFL 02 FEB 93
** JFL 18 FEB 93
**
BTNDBSTBL
	.LONG	0
	.LONG	DBSREVERSE
	.LONG	DBSWEAPON
	.LONG	DBSDEFENSE
	.LONG	DBSTURBO
	.LONG	0
	.LONG	0
	.LONG	0

**
** PUSHBUTTONS
**
** IN
**   A5 BTN (PDL,WHL)
**   A6 DD
**   A7 CD
**   A8 OBJ
**   B2 VAR
**   B3 DLEVEL
**   B4 RANDOM
**   B5 WAVEIRQS
** OUT
**
** JFL 20 JAN 93
** JFL 02 FEB 93
**
PUSHBUTTONS

	;
	;BUTTONS
	;

	;FIND OFFSET
	MOVE	A5,A0
	SLL	SLR_BTNNODANGER,A0	;ISOLATE BTN BITS
	JRZ	PBBTNDONE
	JRC	PBDANGER		;IF DANGER BIT, DO IT
	
	;IF PANIC BIT IS SET DO IT
	BTST	B_VFPANIC,B2
	JRNZ	PBDANGER

	;
	;CHECK CONDITIONS FOR EXECUTION
	;

	;CHECK TIME VALUES ONE AT A TIME
	MOVE	A6,A3
	ADDI	DDBSREVERSEIRQ,A3	;LAST IRQ STORE
	MOVK	1,A4			;MASK
	MOVE	A5,A2			;BUTTON BITS
	MOVK	3,A1			;COUNT
	MOVE	A7,A9
	ADDI	CDMISSILES,A9

	;REG USE
	;  A0 SCRATCH
	;  A1 COUNT
	;  A2 BTN BITS
	;  A3 DDXXXIRQ
	;  A4 MASK
	;  A5 BTN
	;  A9 CDMISSILES
	
PBCLOOP
	;CHECK 
	SRL	1,A2			;TEST BOTTOM BIT
	JRNC	PBCNEXT

	;CHECK IF WAIT HAS BEEN LONG ENOUGH
	MOVE	B5,A0			;WAVEIRQS
	MOVL	*A3,A14			;WAIT TILL THIS
	CMP	A14,A0
	JRLO	PBCNOTYET

	;CHECK IF THIS IS A CONSERVED THING (WEAPON OR TURBO)
	CMPI	2,A4			;CHECK WHERE MASK BIT IS
	JRLT	PBCNOTCONSERVED

	;CONSERVED, CHECK THE COUNT
	MOVW	*A9+,A14
	SUBK	SAVETHINGS+1,A14	;DONT BLOW EM ALL
	JRN	PBCNOTYET

PBCNOTCONSERVED
	;LEAVE BIT ON & SET WHEN THIS CAN NEXT HAPPEN 
	MOVE	B3,A14			;DLEVEL
	SUBK	DLEVELBEST,A14		;LVL-LVLMAX
	NEG	A14  			;0..15 BASED ON LEVEL
	INC	A14			;AT LEAST ONE FRAME
	SLL	4,A14			;MULTIPLY
	ADD	A14,A0			;ADD INTO CURRENT IRQ
	MOVL	A0,*A3			;SAVE
	JRUC	PBCNEXT
PBCNOTYET
	;TURN OFF BIT REQUESTING THIS BUTTON
	ANDN	A4,A5
PBCNEXT
	;NEXT BIT
	SLL	1,A4			;SHIFT MASK
	ADDK	32,A3			;NEXT IRQ STORE
	DSJ	A1,PBCLOOP

	;FIGURE NEW OFFSET INTO TBL
	MOVE	A5,A0
	SLL	SLR_BTNNODANGER,A0	;SIZEOF BTNTBL
	JRZ	PBBTNDONE

PBDANGER
	;
	;PROCESS
	;
	SRL	SLR_BTNNODANGER-5,A0	;SIZEOF BTNTBL
	.IF DEBUG
	MOVE	A0,A14
	SRL	3+5,A14
	TLOCKON	NZ
	.ENDIF ;DEBUG
PBPROCESS
	
	;
	;SET PUSH BUTTON SCRIPT
	;
	ADDI	BTNDBSTBL,A0
	MOVL	*A0,A2
	CALLA	SETDBS ;IN:A0,A2,A3,A6,A7,A8,A10,A11 INPDATA,DBS,SC
		       ; DD,CD,OBJ,WHEEL,PEDAL OUT:C IF NOT

PBBTNDONE
	
	;LOAD UP
	MOVL	*A7(CDINPDATA),A0

	;
	;PEDAL
	;
	MOVE	A5,A2
	SRL	SR_PDL-4,A2		;SIZEOF PDLTBL
	ADDI	PDLTBL,A2
	.IF DEBUG
	CMPI	PDLTBLX,A2
	TLOCKON	HS
	.ENDIF ;DEBUG
	MOVW	*A2(0),*A0(INPPEDAL)

	;
	;WHEEL
	;
	MOVW	*A0(INPWHEELMAG),A2
	SLL	SL_WHL,A5
	SRL	SR_WHL-5,A5		;SIZEOF WHLJUMPTBL
	ADDI	WHLJUMPTBL,A5
	.IF DEBUG
	CMPI	WHLJUMPTBLX,A5
	TLOCKON	HS
	.ENDIF ;DEBUG
	MOVL	*A5,A14
	JUMP	A14

	;
	;STRAIGHT AHEAD
	;
PBSTRAIGHT
	MOVE	A2,A2
	JRZ	PBX
	JRN	PBSNEG

	;DECAY TO ZERO
	SUBI	SOFTTURN,A2
	JRNN	PBWHLSET
	CLR	A2
	JRUC	PBWHLSET

PBSNEG
	;DECAY TO ZERO
	ADDI	SOFTTURN,A2
	JRN	PBWHLSET
	CLR	A2
	JRUC	PBWHLSET

	;	
	;LEFT
	;
PBSOFTLEFT
	ADDI	SOFTTURN,A2
	JRUC	PBWHLCHECKADD
PBHARDLEFT
	ADDI	HARDTURN,A2
	JRUC	PBWHLCHECKADD
PBMAXLEFT
	ADDI	MAXTURN,A2
	JRUC	PBWHLCHECKADD

	;
	;RIGHT
	;
PBSOFTRIGHT
	SUBI	SOFTTURN,A2
	JRUC	PBWHLCHECKSUB
PBHARDRIGHT
	SUBI	HARDTURN,A2
	JRUC	PBWHLCHECKSUB
PBMAXRIGHT
	SUBI	MAXTURN,A2
	JRUC	PBWHLCHECKSUB

	;
	;KEEP TURNING
	;
PBSOFTKEEP
	MOVE	A2,A2
	JRZ	PBX
	JRN	PBSKNEG
	MOVI	SOFTTURN,A2
	JRUC	PBWHLSET
PBSKNEG
	MOVI	-SOFTTURN,A2
	JRUC	PBWHLSET

PBHARDKEEP
	MOVE	A2,A2
	JRZ	PBX
	JRN	PBHKNEG
	MOVI	HARDTURN,A2
	JRUC	PBWHLSET
PBHKNEG
	MOVI	-HARDTURN,A2
	JRUC	PBWHLSET

PBMAXKEEP
	MOVE	A2,A2
	JRNZ	PBMKNZ

	;CHOOSE A DIR
	RL	1,B4		;RANDOM
	JRC	PBMAXLEFT
	JRUC	PBMAXRIGHT
PBMKNZ
	JRN	PBMKNEG
	MOVI	MAXTURN,A2
	JRUC	PBWHLSET
PBMKNEG
	MOVI	-MAXTURN,A2
	JRUC	PBWHLSET


PBUNDEF
	;UNDEFINED
	TLOCKUP
	NOP

PBWHLCHECKADD
	MOVI	STEERA2DMAX,A14
	CMP	A14,A2
	JRLE	PBWHLSET
	MOVE	A14,A2
	JRUC	PBWHLSET
PBWHLCHECKSUB
	MOVI	-STEERA2DMAX,A14
	CMP	A14,A2
	JRGE	PBWHLSET
	MOVE	A14,A2
PBWHLSET
	MOVW	A2,*A0(INPWHEELMAG)
PBX
	RETS


***
*** INTERRUPTS ------------------------------------------------------------
***

**
** TACINTERRUPTS
**
** IN
**   A0-A4 SCRATCH
**   A6 DD
**   A7 CD
**   A8 OBJ
**   B2 VAR
**   B3 DLEVEL
**   B4 RANDOM
**   B5 WAVEIRQS
** OUT
**    C TO HANDLE
**	A5 TARGET
**
** JFL 20 JAN 93
** JFL 18 FEB 93
**
TACINTERRUPTS

	;TIME TO EVAL INTERRUPT
	MOVE	B5,A14		;WAVEIRQS
	SLL	32-3,A14
	JRNZ	TINTKEEPOLD

	;
	;MISSILE LOCK
	;

	;CHECK IF A MISSILE HAS LOCKED IN ON US
	MOVW	*A7(CDMISLOCK),A1
	JRP	TINTMISLOCK
TINTMISLOCKRET
	

	;
	;POWER UPS
	;

	;CHECK FOR POWERUPS
	MOVW	@DRG+DRGPOWERUPS,A14
	JRP	TINTPOWERUP

TINTPOWERUPRET

	;
	;PANIC
	;

	;CHECK PANIC BIT
	BTST	B_VFPANIC,B2
	JRNZ	TINTPANIC

	;CHECK IF WE SHOULD PANIC
	MOVW	*A7(CDDAMAGE),A14
	SUBK	PANICDAMAGE,A14
	JRP	TINTPANICRET		;NO

	;PANIC
	ORI	M_VFPANIC,B2		;YES
	
TINTPANICRET

TINTNOX
	ANDNI	M_VFINT,B2		;CLEAR INT
TINTNOX2
	CLRC
	RETS

TINTYESX
	;INTERRUPT HAPPENED
	MOVL	A5,*A6(DDINTTARGET)	;REMEMBER TARGET
	ORI	M_VFINT,B2		;SIGNAL INT
TINTYESX2
	SETC
	RETS

TINTKEEPOLD
	;KEEP THE OLD INTERRUPT TARGET
	BTST	B_VFINT,B2
	JRZ	TINTNOX2

	;GET TARGET
	MOVL	*A6(DDINTTARGET),A5
	JRUC	TINTYESX2

TINTMISLOCK
	;
	;AT LEAST ONE MISSILE IS LOCKED ON US
	;

	
	;FIND CLOSEST MISSILE THATS LOCKED ON US
	CALLA	MISFINDLOCKCLOSEST ;IN:A2-A3,A8 SC,OBJ OUT:C IF NONE, A2 MISOBJ
	JRC	TINTMISLOCKRET

	;HOW CLOSE IS MISL
	QDIST	A8,A2,A3,A4,A14 ;OBJ0,OBJ1,SC1,SC1,RESULT
	CMPI	TARGETCLOSEDIST,A14
	JRHI	TINTMISLOCKRET
	

	;CHECK IF WE SHOULD LAUNCH A DEFENSIVE MISL
	MOVW	*A7(CDMISSILES),A14
	CMPI	WEAPCOSTDEFENSE,A14
	JRLT	TMLNOD				;DONT HAVE ENOUGH
	
	;CHECK IF WE ARE SMART ENOUGH
	MOVE	B4,A0				;RANDOM
	SRL	32-2,A0
	MOVE	B3,A14				;DLEVEL
	ADD	A0,A14				;ADD RANDOM SMARTS
	SUBK	7,A14
	JRN	TMLNOD				;NOT SMART ENOUGH

	;CHECK IF WE ARE IN DIRE NEED
	BTST	B_VFPANIC,B2
	JRNZ	TMLDEF				;WE ARE ALMOST DEAD

	;CHECK HOW MANY ARE ON US
	SUBK	2,A1
	JRN	TMLNOD				;NOT ENOUGH TO BOTHER WITH

TMLDEF
	;MAKE SURE WE'VE WAITED LONG ENOUGH FOR LAST TO TAKE EFFECT
	MOVE	B5,A1				;WAVEIRQS
	MOVL	*A6(DDDEFENSEIRQ),A14
	CMP	A14,A1
	JRLS	TMLNOD				;NOT LONG ENOUGH
	
	;DO THE DEFENSE THING
	ADDI	DEFTODEFIRQS,A1
	MOVL	A1,*A6(DDDEFENSEIRQ)
	ORI	M_VFSIGNAL,B2			;SIGNAL STAVOIDOBJ TO USE DEF

TMLNOD
	;TACTIC
	MOVE	A2,A5				;RETURN TARGET
	MOVI	STAVOIDOBJ,A14
	MOVL	A14,*A6(DDSEEKJUMP)

	JRUC	TINTYESX

TINTPANIC
	;
	;CHECK FOR A CAR THAT IS CLOSE TO US
	;
	CALLR	FINDCLOSESTCAR ;IN:A0-A4,A6,A7,A8,B0 SC,DD,CD,OBJ,SC
			       ;OUT:A10,A11 TARGET OR 0,DIST
	
	MOVE	A10,A2			;WAS THERE A TARGET?
	JRZ	TINTPANICRET		;NO CAR

	;CLOSE?
	CMPI	TARGETCLOSEDIST,A11
	JRGT	TINTPANICRET		;NOT CLOSE ENOUGH

	;TACTIC
	MOVE	A10,A5			;RETURN TARGET
	MOVI	STAVOIDCAR,A14
	MOVL	A14,*A6(DDSEEKJUMP)

	JRUC	TINTYESX

TINTPOWERUP
	;
	;POWERUPS AVAILABLE
	;

	;FIND A POWERUP
	CALLA	FINDPOWERUP ;IN:A2-A3,A8 SC,OBJ OUT:C IF NONE, A2 FOUNDOBJ
	JRC	TINTPOWERUPRET

	;TACTIC
	MOVE	A2,A5				;RETURN TARGET
	MOVI	STGOTOPICKUP,A14
	MOVL	A14,*A6(DDSEEKJUMP)

	JRUC	TINTYESX

***
*** -------------------------------------------------------------------------
***

**
** HANDLEDRONE
**
** IN
**   A7 CD
**   A8 CAR OBJ
**
** SCRATCHES: A0-A6,A9-A11,A14,B0-B5
**
** JFL 27 OCT 92
** JFL 15 JAN 93
** JFL 20 JAN 93; REWORKED
** JFL 18 FEB 93
**
HANDLEDRONE

	;REG USE THROUGHOUT DRONE CODE
	;  A6 DD
	;  A7 CD
	;  A8 OBJ
	;  B2 VAR
	;  B3 DLEVEL
	;  B4 RANDOM
	;  B5 WAVEIRQ
	;LOAD UP FOR USE THROUGHOUT THE DRONE CODE
	MOVL	*A7(CDDRONE),A6
	MOVL	@WAVEIRQS,B5
	CALLA	RANDOMA2 ;OUT:A2
	MOVE	A2,B4
	MOVE	A6,B0
	MOVW	@DRG+DRGDRONELEVEL,B3	;DLEVEL
	MOVW	*B0(DDVAR),B2		;GENERAL PURPOSE
	ZEXT	B2,W			;CLEAR TOP HALF EVERY FRAME

	;CHECK FOR TACTIC INTERRUPTS
	CLR	A5		;CLEAR TARGET
	CALLR	TACINTERRUPTS ;IN:A6,A7,A8 DD,CD,OBJ
			      ;OUT:C IF INT & A5 TARGET

	;DO OUR BEST NOT TO CRASH INTO THE ARENA ITSELF
	CALLR	LOOKAHEAD ;IN:A0-A4,A6,A7,A8,A9-A11 SC,DD,CD,OBJ,SC
	CALLR	FORCECOURSE ;IN:A6,A7,A8 OUT:C IF FORCED A5 BTN
	JRC	HDEXTRAS

	;DO WE HAVE A TARGET
	MOVE	A5,A5			;CHECK IF TACINTERRUPTS SET TARGET
	JRNZ	HDSEEKTARGET

	;IS IT TIME TO RE-TARGET?
	MOVE	B5,A2 			;WAVEIRQS
	MOVL	*A6(DDTARGETIRQ),A14
	CMP	A14,A2
	JRHS	HDTARGET

	;DO WE HAVE A TARGET?
	MOVL	*A6(DDTARGET),A5	;GET TARGET
	JRNZ	HDSEEKTARGET

HDTARGET
	;PICK A TARGET
	CALLR	PICKTARGET ;IN:A6,A7,A8 DD,CD,OBJ OUT:A5 TARGET
	
HDSEEKTARGET
	;MOVE TO TARGET
	;A5 TARGET
	CALLR	SEEKTARGET ;IN:A5,A6,A7,A8 TARGET,DD,CD,OBJ OUT:A5 BTN

HDEXTRAS
	;PUSH BUTTONS
	CALLR	PUSHBUTTONS ;IN:A4,A5,A6,A7,A8 PDL,BTN,DD,CD,OBJ

	;
	;HANDLE THE BUTTON SCRIPT
	;
	MOVL	*A6(DDBS),A0
	JRZ	HDX
	CALLR	HANDLEDBS ;IN:A0,A1-A5,A6,A7,A8,A9-A11 SC,DD,CD,OBJ,SC
HDX
	MOVE	B2,A14
	MOVW	A14,*A6(DDVAR)		;GENERAL PURPOSE
	RETS


* EOF
