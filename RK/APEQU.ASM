***
*** FILE: APEQU.ASM
*** JFL 27 JUL 92; FROM DREDD
*** JFL 03 AUG 92; FROM DREDD
*** JFL 18 AUG 92
*** JFL 19 NOV 92
*** JFL 18 FEB 93; MISL SUPL
*** JFL 21 FEB 93; BARREL
*** JFL 14 MAR 93; FF
***

**************************************************************************
*								         *
* 	         AMUSEMENT PARK - MASTER EQUATE FILE			 *
* 									 *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

*SYMBOLS IN FILE T2TRIG.ASM
	.GLOBL	GETCOS, GETSIN
*SYMBOLS IN FILE T2PALL.ASM
	.GLOBAL	GETFPAL, PALTRANS, CLRBPAL, INITPAL, CLRFPAL, FINDPAL
	.GLOBAL	GETBPAL, INITBPAL, CLRPAL, DELPAL, DELETE_PAL, FREEPAL
	.GLOBAL	CHANGE_PAL, GET_PALID, INC_PALCNT, A_CHANGE_PAL, CLR_0PALS
	.GLOBAL	CHANGE_PAL_MULTI
*SYMBOLS IN FILE T2UTIL.ASM
	.GLOBAL	SCRCLR, CLR_SCRN, SETPPROC
	.GLOBAL SHVELCPY, SHVELFLP, FLP, XZCHK, CLRPDATA
	.GLOBAL	RANDU, RANDOM, SRAND, RANGRAND, RANDPER
	.GLOBL	RAND0, RANGERND
	.GLOBAL FRANIM, AUTOEOFF
	.GLOBAL	DMAQWAIT, DMAWAIT, DTIME, DMAN, DRAWBOX, DRAWBOX_OBJ
	.GLOBAL PSTOP, MIDPOINT, QBOXCK, QINSCRN, CLRPLAY
	.GLOBAL WHICHSID, ABOVBELO, ALIGNOBJ, GET_CPNT, GETCPNT, GETCENT
	.GLOBAL SLINEVEL, CLRBLOCK, FILBLOCK, CHKRANGE, FRAMSKIP, FILL_SCRN
	.GLOBAL	PNT_IN_RANGE, CENTEROBJ, CK_OBJ_CENT, CK_BOTTOM_CENT
	.GLOBAL	SET_ZPOS, SET_MZPOS, SET_TZPOS, GET_INIT_CPNT, ANIMATOR
	.GLOBAL	GET_BOTTOM_MID, ANIMATE_DEL, DMAWPAL
	.GLOBAL OSINK, OSINKANI
	.GLOBAL	STOPPED, SKIP_ANIMATION, KILL_DESTRUCTIBLES, PNTINBOX
	.GLOBAL	X_ETA, ANIMATE_TIME, SLINEVEL_LOAD, DTIME2
	.GLOBAL	BLNKAREA, BLNKAREA2, FILLAREA, FILLAREA2, YFLP, NOYFLP
	.GLOBAL	MAX, MIN, ABSMAX, ABSMIN, ABSINC, ABSDEC, ABSADD, ABSSUB
	.GLOBAL	TOGL_YFLP
	.GLOBAL	DOBIGSHAKE, DOSMALLSHAKE
	.GLOBAL PreFrag0, PreFrag1, PreFrag2, PreFrag3, PreFragUp, PreFragGun
	.GLOBAL	Fragger, FlshWyte, PreFragLR
	.GLOBAL	COLLS_OFF, COLLSOFF, ALL_COLLS_OFF, GET_CPNT_SCRNREL

*SYMBOLS IN FILE T2AFUNC.ASM
	.GLOBAL	A_STRT_ANIM, A_TOGGLE_FLPS, A_DEL_DAMAGE, A_SET_OZVEL
	.GLOBAL	A_CLR_OXVEL, A_OFFSCRN_DEL, A_OFFOPP_DEL, DELETE_KILLP
	.GLOBAL	A_ONSCREEN, A_INC_AnimSLP, A_SET_OXVEL, A_RAND_AnimSLP
	.GLOBAL	A_DEL_OID_DAMAGE, A_OFF_DELETE_OBJ, A_PRINT_SCORE
	.GLOBAL	A_PreFrag1, A_FLIP_BRANCH, A_OFFSCREEN, A_OBJ_ON_CHANGE_PAL
	.GLOBAL	A_SET_OYACCEL, A_RAND_FLIP, A_TOGGLE_FLIP

*SYMBOLS IN FILE T2.ASM
	.GLOBAL	CALLPLAY, IAUTOE, GUNPOWER_TO_MAX
*SYMBOLS IN T2ENEMY.ASM
	.GLOBAL	INC_ENEMY_COUNT, DEC_ENEMY_COUNT, GET_ENEMY_COUNT, COUNT_KILL
	.GLOBAL	COUNT_PLAYER_KILL
*SYMBOLS IN FILE T2SCOR.ASM
	.GLOBAL	SCORAREA, SCORE, PRINT_SCORE
*SYMBOLS IN FILE T2COLL.ASM
****	.GLOBAL	COLL_START
	.GLOBAL	FUTURE_COLL, PRESENT_COLL, HIGHWAY_COLL
*SYMBOLS IN FILES T2BGND.ASM OR T2BGDATA.ASM
	.GLOBAL	BAKBITS, SINGLE_PLANE
*SYMBOLS IN T2DRIVER.ASM
	.GLOBAL	DRIVER_CLR, DRIVER_UPDATE, FLASH_LAMP, COIL_DRIVE, NCOIL_DRIVE
	.GLOBAL	COIL_ON_TIME, COIL_OFF_TIME
*SYMBOLS IN T2PLAYER.ASM
	.GLOBAL	PLAYER_PRAISE, DELAYED_PRAISE, PLAYER_SND, A_PLAYER_SND
	.GLOBAL	POID_TO_PDATA
*SYMBOLS IN T2POWER.ASM
	.GLOBAL	GET_LOWEST_Y, CLIP_TO_Y

*
*GLOBAL DUMMY(NULL) ROUTINES
*
	.GLOBAL	DUMRETS, DUMCOLL, DUMCRETS, DUMBGND, DUMSCRIPT, DUMRETP
	.GLOBAL	DUMFGND, DUMDIE, DUMSRETS

	.GLOBAL	DUMPPRINT


**************************************************************************
*								         *
* PROCESS I.D. EQUATES							 *
*      	       15                   0					 *
* PID FORMAT --	NEWI IIPP IIII IIII					 *
* 	N = NON-DESTRUCTIBLE						 *
* 	E = WAVE END WAIT						 *
* 	W = WAVE END WILL NOT KILL THESE				 *
* 	I = PROC. SPECIFIC I.D.						 *
* 	P = RESERVED FOR BASE PLAYER PROCESS I.D.'S			 *
*								         *
**************************************************************************

PID_IND		EQU	0001H		;INDEPENDENT, KILLABLE
PID_MAIN	EQU	0002H		;MAIN PROCESS
PID_DRAG	EQU	0010H		;DRAG REACE MASTER
PID_DRAGONE	EQU	0020H		;ONE DRAG RACE


*COIN SWITCH PIDs
LC_PID          EQU     08000H   ;LEFT COIN      
CC_PID          EQU     08002H   ;CENTER COIN    
RC_PID          EQU     08004H   ;RIGHT COIN     
XC_PID		EQU	08006H	; FOURTH COIN SLOT
SLAM_PID        EQU     08008H  ;SLAM TILT PROCESS
COINCTR_PID	EQU	0800AH	; COIN COUNTER PROCESS
DIAG_PID	EQU	08100H	; DIAGNOSTICS PROCESS


**************************************************************************
*								         *
* OBJECT I.D. EQUATES							 *
* OID FORMAT --	VMPP TTTT SSSS IIII					 *
* 	V = AUTO VEL ADD						 *
* 	M = MISCELLANEOUS						 *
* 	P = RESERVED FOR PLAYERS					 *
* 	T = OBJECT TYPE							 *
* 	S = SUPPLEMENTAL LIST #						 *
* 	I = IDENTIFIER(SUB-TYPE)					 *
*								         *
**************************************************************************
;0000 0000 xxxx 0000 (OID) xxxx=bit positions of supp field
;If # of bits changed, fix size of ram table SUPPLSTS
SL_SUPL	EQU	24	;SHIFTS TO ISOLATE SUPL (SHIFT LEFT FIRST)
SR_SUPL	EQU	28
SL_POID EQU	18	;SHIFTS TO ISOLATE PLAYER NUMBER (SHIFT LEFT FIRST)
SR_POID EQU	30	
SL_TYPE	EQU	16+4	;SHIFTS TO ISOLATE TYPE (LEFT FIRST)
SR_TYPE	EQU	16+4+8
SL_SUBTYPE EQU	32-4	;SHIFT LEFT FIRST
SR_SUBTYPE EQU	32-4

B_SUPL	EQU	4	;BIT NUMBER OF SUPL ID

**
** MASKS
** JFL 18 AUG 92
**
MASK_PLAYER	EQU	03000H		;PLAYER I.D. FIELD MASK
MASK_TYPE	EQU	00F00H		;GET TYPE
M_OIDFAUTOVEL	EQU	8000H		;AUTO VEL ADD
B_OIDFAUTOVEL	EQU	15
M_OIDFHITBOX	EQU	4000H		;BOX OVERLAP IS GOOD FOR HIT DETECTION
B_OIDFHITBOX	EQU	14

**
** TYPES
** JFL 18 AUG 92
** JFL 11 JAN 93
**
TYPE_MISC	EQU	00000H		;MISC TYPE
TYPE_ARENA	EQU	00100H		;ARENA PIECE TYPE
TYPE_MISSILE	EQU	00200H		;MISSILE
TYPE_BG		EQU	00300H		;BACKGROUND
TYPE_POWERUP	EQU	00400H		;POWERUP
TYPE_CARPART	EQU	00500H		;CAR PART

**
** SUPPLEMENTAL LIST DEFINES
** JFL 27 JUL 92
**
SUPLIST_CAR	EQU	1		;CARS
SUPLIST_FOBJ	EQU	2		;FOBJS
SUPLIST_ARROW	EQU	3		;ARROW?
SUPLIST_MISL	EQU	4		;MISSILES
SUPLIST_MINE	EQU	5		;MINES
SUPLIST_FF	EQU	6		;FF
SUPLIST_BAR	EQU	7		;BARRIERS
SUPLIST_RUN	EQU	8		;RUNNER

;SUPL MASKS
SUPLM_CAR	EQU	SUPLIST_CAR*16 
SUPLM_FOBJ	EQU	SUPLIST_FOBJ*16
SUPLM_ARROW	EQU	SUPLIST_ARROW*16
SUPLM_MISL	EQU	SUPLIST_MISL*16
SUPLM_MINE	EQU	SUPLIST_MINE*16
SUPLM_FF	EQU	SUPLIST_FF*16
SUPLM_BAR	EQU	SUPLIST_BAR*16
SUPLM_RUN	EQU	SUPLIST_RUN*16

;SUPL OFFSETS
SUPL_CAR	EQU	SUPLIST_CAR*32 
SUPL_FOBJ	EQU	SUPLIST_FOBJ*32
SUPL_ARROW	EQU	SUPLIST_ARROW*32
SUPL_MISL	EQU	SUPLIST_MISL*32
SUPL_MINE	EQU	SUPLIST_MINE*32
SUPL_FF		EQU	SUPLIST_FF*32
SUPL_BAR	EQU	SUPLIST_BAR*32
SUPL_RUN	EQU	SUPLIST_RUN*32

**
** OBJECT IDS
** JFL 27 JUL 92
** JFL 03 AUG 92
** JFL 18 AUG 92
** JFL 19 NOV 92; OID_P0
** JFL 18 FEB 93; MISL SUPL
** JFL 21 FEB 93; BARREL
** JFL 14 MAR 93; FF
**
;CAR OIDS
OID_P0		EQU	00000H|SUPLM_CAR ;NO SUCH ID, USED FOR MASK
OID_P1		EQU	01000H|SUPLM_CAR
OID_P2		EQU	02000H|SUPLM_CAR
OID_P3		EQU	03000H|SUPLM_CAR
OID_DRONE	EQU	00000H|SUPLM_CAR
OID_RUNNER	EQU	00000H|SUPLM_RUN ;MUST OR WITH PLAYER ID

;MISC OIDS
OID_JUNK	EQU	TYPE_MISC
OID_FOBJ	EQU	TYPE_MISC|SUPLM_FOBJ
OID_FLOATER	EQU	TYPE_MISC|M_OIDFAUTOVEL
OID_PART	EQU	TYPE_MISC
OID_ARROW	EQU	TYPE_MISC|SUPLM_ARROW
OID_ARENA	EQU	TYPE_ARENA
OID_MISSILE	EQU	TYPE_MISSILE|SUPLM_MISL|M_OIDFAUTOVEL
OID_BG		EQU	TYPE_BG
OID_ICONEASY	EQU	TYPE_POWERUP|SUPLM_FOBJ|M_OIDFHITBOX
OID_ICONHARD	EQU	TYPE_POWERUP|SUPLM_FOBJ
OID_ICONMEDIUM	EQU	TYPE_POWERUP|SUPLM_BAR
OID_BARREL	EQU	TYPE_MISC|SUPLM_BAR
OID_LMINE	EQU	TYPE_MISSILE|SUPLM_MINE
OID_FF		EQU	TYPE_MISSILE|SUPLM_FF|M_OIDFAUTOVEL
OID_CARPART	EQU	TYPE_CARPART

*
*PALETTE ALLOCATOR EQUATES
*
*PALETTE ALLOCATION RAM
*FOR EACH COLOR PALETTE ID 32 BITS, PALETTE COUNT 16 BITS
*IF PALCNT>0 PALETTE IS ALLOCATED, IF PALCNT=0 PALETTE IS FREE
*
	.IF	YUNIT
NUMPAL	.SET	16	;(JFL WAS 32) NUMBER OF DYNAMICS ALLOCATED PALETTES
NMFPAL	.SET	6	;(JFL WAS 16) NUMBER OF FOREGROUND PALETTES
NMBPAL	.SET	10	;(JFL WAS 16) NUMBER OF BACKGROUND PALETTES
	.ELSE
NUMPAL	.SET	128	;NUMBER OF DYNAMICS ALLOCATED PALETTES
NMFPAL	.SET	64	;NUMBER OF FOREGROUND PALETTES
NMBPAL	.SET	64	;NUMBER OF BACKGROUND PALETTES
	.ENDIF

*
*PALETTE ENTRY DATA STRUCTURE
PALID	.SET	0		;PALETTE I.D.				(32)
PALCNT	.SET	020H		;PALETTE ALLOCATION COUNT		(16)
PALTIME	.SET	030H		;TIME WHEN PAL WAS DELETED
PALRSIZ	.SET	040H		;SIZE OF PALETTE ALLOCATION RAM
*
*PALETTE TRANSFER RAM DATA STRUCTURE
PLDCNT	.SET	0	;COLOR COUNT					(16)
PALSRC	.SET	010H  	;SOURCE ADDRESS OF PALETTE COLOR DATA 		(32)
PALDEST	.SET	030H	;DESTINATION PALETTE|START COLOR		(16)
PTRSIZ	.SET	040H	;SIZE OF EACH CELL
NUMPTR	.SET	32	;NUMBER OF TRANSFERS ALLOWED

*
*FIXED COLOR CYCLE EQUATES
*
CYCOLORS	.EQU	COLRAM+300H	;CYCLABLE COLORS LAST LINE OF 1st PALETTE
COLROFFST	.EQU	090H  		;OFFSET TO START COLORS
COLRCNT		.EQU	6	     	;TOTAL NUMBER OF COLORS TO CYCLE

PCYCLEPAL	.EQU	0H		;PLAYER CYCLERS
PCOLROFFST	.EQU	300H+090H	;OFFSET TO 1st PLAYER CYCLER
PCOLRCNT	.EQU	2		;NUMBER OF PLAYER CYCLERS

*
*DISPLAY FLAGS FOR FORE/BACKGROUND OBJECTS
M_SPAWNP EQU	80H		;SPAWN A PROCESS WITH THIS OBJECT IN A8
B_SPAWNP EQU	7

*
*BUY-IN WINDOW CONSTANTS
*
BUYTIME	.EQU	10
BUYSLP	.EQU	4
BUYTICK	.EQU	52/BUYSLP

*
*BACKGROUND UPDATER EQUATES
BLSTSTRT	.EQU	08000H
BLSTEND		.EQU	08001H

*
*FLASH LAMP EQUATES
*
P1_FLASH1	.EQU	0
P1_FLASH2	.EQU	1
P1_FLASH3	.EQU	2
P1_FLASH4	.EQU	3
P2_FLASH1	.EQU	4
P2_FLASH2	.EQU	5
P2_FLASH3	.EQU	6
P2_FLASH4	.EQU	7

**
** CREATE_OBJ TABLE STRUCT
**
** JFL 15 OCT 92
**
COIMG		EQU	000H	;UHL
COCVECT		EQU	020H	;UHL
COID		EQU	040H	;UHW
COCTRL		EQU	050H	;UHW
COFLAGS		EQU	060H	;UHW
COSCALETYPE	EQU	070H	;UHW
COCFUNC		EQU	080H	;UHL
COSIZE		EQU	0A0H	; SIZE

*
*ALLPLYR - MACRO TO CALL A ROUTINE ON ALL PLAYERS.
*P1=ROUTINE-->A7
*
ALLPLYR	.macro	P1
 	MOVI	:P1:,A7
	CALLA	CALLPLAY
	.endm

* Declarations for condition codes in Macros
GT	.set	'GT'
GE	.set	'GE'
LT	.set	'LT'
LE	.set	'LE'
EQ	.set	'EQ'
NE	.set	'NE'
Z	.set	'Z'
NZ	.set	'NZ'
NC	.set	'NC'
UC	.set	'UC'
N	.set	'N'
LO	.SET	'LO'
LS	.SET	'LS'
HI	.SET	'HI'
HS	.SET	'HS'
V	.SET	'V'

	.GLOBAL	JLOCKED	;IN DR.ASM

LOCKUP	.MACRO
	PUSHST	
	DINT
	CALLA	JLOCKED
	POPST
	.ENDM

LOCKON	.MACRO	op
	JR:op:	lab?
	JRUC	lab2?
lab?
	PUSHST
	DINT
	CALLA	JLOCKED
	POPST
lab2?
	.ENDM

TLOCKUP	.MACRO
	TRAP	29
	.ENDM

TLOCKON	.MACRO	op
	JR:op:	lab?
	JRUC	lab2?
lab?
	TRAP	29
lab2?
	.ENDM

LOCKNROM .MACRO REG
	CMPI	ROM,REG
	LOCKON	LO
	.ENDM

MOVW	.macro R1,R2
	MOVE	:R1:,:R2:,W
	.endm

MOVL	.macro R1,R2
	MOVE	:R1:,:R2:,L
	.endm

SLEEPTA .MACRO TIME,ADR
	MOVI	:ADR:,A7
	.IF	TIME < 33
	MOVK	:TIME:,A0
	.ELSE
	MOVI	:TIME:,A0
	.ENDIF
	JAUC	PRCLSP
	.ENDM

BSTATE	.MACRO
	GETPC	B9
	.ENDM

	;QDIST SC:REG1,REG2 OUT:REG3	
QDIST	.MACRO	OBJ1,OBJ2,REG1,REG2,REG3
	MOVW	*:OBJ1:(OXPOS),:REG1:
	MOVW	*:OBJ2:(OXPOS),:REG3:
	SUB	:REG1:,:REG3:
	ABS	:REG3:
	MOVW	*:OBJ1:(OZPOS),:REG1:
	MOVW	*:OBJ2:(OZPOS),:REG2:
	SUB	:REG1:,:REG2:
	ABS	:REG2:
	CMP	:REG2:,:REG3:
	JRHS	QD3?
	MOVE	:REG3:,:REG1:    	
	MOVE	:REG2:,:REG3:
	MOVE	:REG1:,:REG2:
QD3?
	SRL	2,:REG2:
	ADD	:REG2:,:REG3:
	.ENDM

	;QDISTZOFF SC:REG1,REG2 OUT:REG3	
QDISTZOFF .MACRO OBJ1,OBJ2,REG1,REG2,REG3
	MOVW	*:OBJ1:(OZPOS),:REG1:
	MOVW	*:OBJ1:(OZOFF),:REG3:
	ADD	:REG3:,:REG1:
	MOVW	*:OBJ2:(OZPOS),:REG2:
	MOVW	*:OBJ2:(OZOFF),:REG3:
	ADD	:REG3:,:REG2:
	SUB	:REG1:,:REG2:
	ABS	:REG2:
	MOVW	*:OBJ1:(OXPOS),:REG1:
	MOVW	*:OBJ2:(OXPOS),:REG3:
	SUB	:REG1:,:REG3:
	ABS	:REG3:
	CMP	:REG2:,:REG3:
	JRHS	QD3?
	MOVE	:REG3:,:REG1:    	
	MOVE	:REG2:,:REG3:
	MOVE	:REG1:,:REG2:
QD3?
	SRL	2,:REG2:
	ADD	:REG2:,:REG3:
	.ENDM

	;QDISTXY X1,Y1,X2,Y2 SC:X2 OUT:Y2
QDISTXY	.MACRO	X1,Y1,X2,Y2
	SUB	:X1:,:X2:
	ABS	:X2:
	SUB	:Y1:,:Y2:
	ABS	:Y2:
	CMP	:X2:,:Y2:
	JRHS	QDXY?
	XOR	:X2:,:Y2:
	XOR	:Y2:,:X2:
	XOR	:X2:,:Y2:
QDXY?
	SRL	2,:X2:
	ADD	:X2:,:Y2:
	.ENDM

QRAND8	.MACRO	DST
	MOVW	@REFCNT,:DST:
	SLL	32-3-2,:DST:
	SRL	32-3,:DST:
	.ENDM

* EOF
