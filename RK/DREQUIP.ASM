***
*** FILE: DREQUIP.ASM
*** PROCESSES AND FUNCTIONS FOR THE BUY EQUIPMENT PHASE
***
*** JMS 17 MAR 93; STARTED
*** JMS 18 MAR 93
*** JMS 19 MAR 93; NUMX/Y AND ONSTART FIELDS IN BS_DATA
*** JMS  1 APR 93; TURBO COUNT, FLASHING INVENTORY BOXES
*** JMS 12 APR 93; MERGE
*** JMS 13 APR 93; NEW SCORE BOX, BLANKS
*** 
	.MLIB	"APMACS.LIB"
	.FILE	"DREQUIP.ASM"
	.TITLE	"<<< DERBY RACE -- BUY EQIPMENT >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**
** COMPILE FLAGS
**

**************************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"
	.INCLUDE	"IMGTBLB1.GLO"
	.INCLUDE	"IMGTBLM2.GLO"
	.INCLUDE	"DISPEQU.ASM"
	.INCLUDE	"DRB.I"
	.INCLUDE	"DRINP.I"
	.INCLUDE	"DRSND.I"
	.INCLUDE	"DRDISP.I"
	.INCLUDE	"DR.I"

** OTHERS USE
	.DEF	FLP_BUY_EQUIPMENT	;DREQUIP.ASM
	.DEF	SET_IMAGE		;DREQUIP.ASM
	.DEF	BSA_X			;DREQUIP.ASM
	.DEF	BSA_Y			;DREQUIP.ASM

** WE USE
	.REF	DISPATCHPROC	;AP.ASM
	.REF	PALFXINIT	;APPALL.ASM
	.REF	PALCYCLEADD	;APPALL.ASM
	.REF	ANIMP		;APC.ASM
	.REF	INSANI		;APD.ASM
	.REF	CKPULLANIM	;APD.ASM
	.REF	INSOBJ		;APD.ASM
	.REF	INSERT_OBJ	;APD.ASM
	.REF	ZAP_OBJ		;APD.ASM
	.REF	STARTNEWATTRACT	;DRATT.ASM
	.REF	GAMEOVER	;DRATT.ASM
	.REF	GETINPDATA	;DRINP.ASM
	.REF	GETFPAL		;APPALL.ASM
	.REF	MAKESND		;DRSND.ASM
	.REF	CREATE_STRING	;JSTRING.ASM
	.REF	DISPLAY_STRING	;JSTRING.ASM
	.REF	HORZ_ALIGN_STRING	;JSTRING.ASM
	.REF	VERT_ALIGN_STRING	;JSTRING.ASM
	.REF	IRQSKYE			;
	.REF	GAME_STATE	;
	.REF	TURBOBARCLIPTBL	;DRS.ASM
	.REF	GET_BUTTON_CHECKSUM	;DRINITAL.ASM
	
** WE USE -- RAM

	.BSS	ACTIVE_BUYPANELS,10h

	.BSS	BS_PLAYERDATA,0F0h

	.BSS	EQUIP_OVERTIME,10h

** ANIMATION SCRIPTS

ASTUR_DTAIL
	.LONG	TUR_DTAIL
	.WORD	12
	.LONG	TUR_DTAIL2
	.WORD	12
	.LONG	0

ASMIN_DTAIL
	.LONG	MIN_DTAIL
	.WORD	12
	.LONG	MIN_DTAIL2
	.WORD	12
	.LONG	0

ASMIS_DTAIL
	.LONG	MIS_DTAIL
	.WORD	12
	.LONG	MIS_DTAIL2
	.WORD	12
	.LONG	0

ASBUY_DTAIL
	.LONG	BUY_DTAIL
	.WORD	12
	.LONG	BUY_DTAIL2
	.WORD	12
	.LONG	0

ASSPEC1_DTAIL
	.LONG	SPC1_DTAIL
	.WORD	18
	.LONG	SPC1_DTAIL2
	.WORD	18
	.LONG	0

ASSPEC2_DTAIL
	.LONG	SPC2_DTAIL
	.WORD	18
	.LONG	SPC2_DTAIL2
	.WORD	18
	.LONG	0

ASSPEC3_DTAIL
	.LONG	SPC3_DTAIL
	.WORD	18
	.LONG	SPC3_DTAIL2
	.WORD	18
	.LONG	0

**
** BCDTBL
**
** JFL 06 OCT 92
** JFL 26 JAN 93; REDONE AS BYTE TBL
**
BCDTBL
	.BYTE	0000H
	.BYTE	0001H
	.BYTE	0002H
	.BYTE	0003H
	.BYTE	0004H
	.BYTE	0005H
	.BYTE	0006H
	.BYTE	0007H
	.BYTE	0008H
	.BYTE	0009H

	.BYTE	0010H
	.BYTE	0011H
	.BYTE	0012H
	.BYTE	0013H
	.BYTE	0014H
	.BYTE	0015H
	.BYTE	0016H
	.BYTE	0017H
	.BYTE	0018H
	.BYTE	0019H

	.BYTE	0020H
	.BYTE	0021H
	.BYTE	0022H
	.BYTE	0023H
	.BYTE	0024H
	.BYTE	0025H
	.BYTE	0026H
	.BYTE	0027H
	.BYTE	0028H
	.BYTE	0029H

	.BYTE	0030H
	.BYTE	0031H
	.BYTE	0032H
	.BYTE	0033H
	.BYTE	0034H
	.BYTE	0035H
	.BYTE	0036H
	.BYTE	0037H
	.BYTE	0038H
	.BYTE	0039H

	.BYTE	0040H
	.BYTE	0041H
	.BYTE	0042H
	.BYTE	0043H
	.BYTE	0044H
	.BYTE	0045H
	.BYTE	0046H
	.BYTE	0047H
	.BYTE	0048H
	.BYTE	0049H

	.BYTE	0050H
	.BYTE	0051H
	.BYTE	0052H
	.BYTE	0053H
	.BYTE	0054H
	.BYTE	0055H
	.BYTE	0056H
	.BYTE	0057H
	.BYTE	0058H
	.BYTE	0059H

	.BYTE	0060H
	.BYTE	0061H
	.BYTE	0062H
	.BYTE	0063H
	.BYTE	0064H
	.BYTE	0065H
	.BYTE	0066H
	.BYTE	0067H
	.BYTE	0068H
	.BYTE	0069H

	.BYTE	0070H
	.BYTE	0071H
	.BYTE	0072H
	.BYTE	0073H
	.BYTE	0074H
	.BYTE	0075H
	.BYTE	0076H
	.BYTE	0077H
	.BYTE	0078H
	.BYTE	0079H

	.BYTE	0080H
	.BYTE	0081H
	.BYTE	0082H
	.BYTE	0083H
	.BYTE	0084H
	.BYTE	0085H
	.BYTE	0086H
	.BYTE	0087H
	.BYTE	0088H
	.BYTE	0089H

	.BYTE	0090H
	.BYTE	0091H
	.BYTE	0092H
	.BYTE	0093H
	.BYTE	0094H
	.BYTE	0095H
	.BYTE	0096H
	.BYTE	0097H
	.BYTE	0098H
	.BYTE	0099H
BCDTBLX
	.EVEN

;EQUIPMENT COSTS
BS_MINE_COST	EQU	1
BS_MISSILE_COST	EQU	3
BS_TURBO_COST	EQU	2

;PLAYER DATA OFFSETS

PD_RECORDSIZE	EQU	50h

PD_MINES	EQU	0h	;UHW # OF MINES
PD_MISLS	EQU	10h	;UHW # OF MISSLES
PD_BANS		EQU	20h	;UHW # OF BANANAS
PD_TURBOS	EQU	30h	;UHW # OF TURBOS
PD_FLIERS	EQU	40h	;UHW # OF ACTIVE FLIERS


;NUMBER FONT

BS_DIGIT
	.LONG	SCOR_0
	.LONG	SCOR_1
	.LONG	SCOR_2
	.LONG	SCOR_3
	.LONG	SCOR_4
	.LONG	SCOR_5
	.LONG	SCOR_6
	.LONG	SCOR_7
	.LONG	SCOR_8
	.LONG	SCOR_9
BS_DIGITX


;SCREEN ADJUSTMENT TO LEAVE ROOM FOR THE SCORE BOX
BSA_X	EQU	8
BSA_Y	EQU	45


;PROCESS DATA OFFSETS

PD_DONE		EQU	PDATA+0000h	;UHW DONE FLAG FOR PROCESS
PD_BROKE	EQU	PDATA+0010h	;UHW SET WHEN ALL MONEY IS GONE

PD_HTURB	EQU	PDATA+0020h	;UHL TURBO LIGHT HANDLE
PD_HMINE	EQU	PDATA+0040h	;UHL MINE INVENTORY DIGIT HANDLE
PD_HMISL	EQU	PDATA+0060h	;UHL MISL INVENTORY DIGIT HANDLE

PD_NTURB	EQU	PDATA+0080h	;UHW NUMBER OF TURBOS IN INVENTORY
PD_NMINE	EQU	PDATA+0090h	;UHW NUMBER OF MINES IN INVENTRY
PD_NMISL	EQU	PDATA+00A0h	;UHW NUMBER OF MISSILES IN INVENTRY

PD_NBAN		EQU	PDATA+00B0h	;UHW CURRENT # OF BANANAS
PD_HBAN1	EQU	PDATA+00C0h	;UHL BANANAS ONES DIGIT
PD_HBAN10	EQU	PDATA+00E0h	;UHL BANANAS TENS DIGIT
PD_THRESHHOLD	EQU	PDATA+0100h	;UHW WHEEL MOTION THRESHHOLD
PD_SCORBOX	EQU	PDATA+0110h	;UHL SCORE BOX HANDLE
PD_ITEMHANDLES	EQU	PDATA+0130h	;UHL*6 ITEM BOX HANDLES
PD_FTURBOX	EQU	PDATA+01F0h	;UHL SCORE BOX TURBO PANEL FLASHER
PD_FMINEBOX	EQU	PDATA+0210h	;UHL SCORE BOX MINE PANEL FLASHER
PD_FMISLBOX	EQU	PDATA+0230h	;UHL SCORE BOX MISL PANEL FLASHER
PD_TURFLASHCNT	EQU	PDATA+0250h	;UHB TIME LEFT OF TOTAL TURBO FLASH
PD_MINFLASHCNT	EQU	PDATA+0258h	;UHB         "          MINE
PD_MISFLASHCNT	EQU	PDATA+0260h	;UHB         "          MISSILE
PD_TURFLASHTICK	EQU	PDATA+0268h	;UHB TICKS LEFT ON CURRENT FLASHSTATE
PD_MINFLASHTICK	EQU	PDATA+0270h	;UHB TICKS LEFT ON CURRENT FLASHSTATE
PD_MISFLASHTICK	EQU	PDATA+0278h	;UHB TICKS LEFT ON CURRENT FLASHSTATE


;PD'S FOR THE FLY_ICON PROCESS

PD_ITEMFLASHCNT	EQU	PDATA+0000h	;UHL POINTER TO FLASHCOUNT TO BE INC'D
PD_ISTURB	EQU	PDATA+0020h	;UHW ISTURBO FLAG


;MISCELLANEOUS

BS_GENERIC_OBJECT
	.LONG	FONT_A		;IMAGE
	.LONG	0		;COLLISION VECTOR
	.WORD	OID_JUNK	;OID
	.WORD	DMAWNZ		;OCTRL
	.WORD	0		;OFLAGS
	.WORD	STYPNONE	;OSCALTYP
	.LONG	0		;CFUNC

BS_GENERIC_AUTOVEL_OBJ
	.LONG	FONT_A		;IMAGE
	.LONG	0		;COLLISION VECTOR
	.WORD	OID_JUNK+M_OIDFAUTOVEL	;OID
	.WORD	DMAWNZ		;OCTRL
	.WORD	0		;OFLAGS
	.WORD	STYPNONE	;OSCALTYP
	.LONG	0		;CFUNC

BS_NONE	EQU	0h		;USED AS A NULL FUNCTION POINTER
BS_NOIMG EQU	0h		;USED AS A NULL IMAGE HEADER

BS_PANEL_WIDTH	EQU	128

BS_ICONSPEED	EQU	5	;2^5 FRAMES FOR ICONS TO FLY TO FINAL POSITION

BS_DONEFLAG	EQU	1h	;SIGNALS A FINISHED PROCESS
BS_AUTOBUYFLAG	EQU	2h	;SIGNALS AUTOBUY MODE

BS_ABDELAY	EQU	4h	;4 CYCLES BETWEEN PURCHASES IN AUTOBUY MODE

SCOREBOX_FLASHTIME	EQU	14h
SCOREBOX_FLASHRATE	EQU	1h

;OFFSETS FOR BSCREEN_DATA
BS_XPOS		EQU	0000h	;UHW X-POSITION FOR SELECT FRAME
BS_YPOS		EQU	0010h	;UHW Y-POSITION FOR SELECT FRAME
BS_NUMX		EQU	0020h	;UHW X-POSITION FOR INVENTORY DIGIT
BS_NUMY		EQU	0030h	;UHW Y-POSITION FOR INVENTORY DIGIT
BS_WDIMAGE	EQU	0040h	;UHL IMAGE HEADER FOR WEAPON DISPLAY BOX
BS_EXITBOX	EQU	0060h	;UHL IMAGE HEADER FOR EXIT BOX DISPLAY
BS_CONTROL	EQU	0080h	;UHW CONTROL FLAGS
BS_ITEMCOST	EQU	0090h	;UHW COST OF THE ITEM
BS_ONSTART	EQU	00A0h	;UHL FUNCTION TO CALL WHEN START BUTTON IS
				;   PRESSED AND THE FOCUS IS ON THIS FIELD
BS_ICONX	EQU	00C0h	;UHW INITIAL XPOS FOR FLYING ICON
BS_ICONY	EQU	00D0h	;UHW INITIAL YPOS FOR FLYING ICON
BS_IFINX	EQU	00E0h	;UHW FINAL XPOS FOR FLYING ICON
BS_IFINY	EQU	00F0h	;UHW FINAL YPOS FOR FLYING ICON
BS_FLYICON	EQU	0100h	;UHL IMAGE HEADER FOR FLYING ICON
BS_PANELNUM	EQU	0120h	;UHW PANEL HEADER INDEX IN PDATA
BS_PANELIMG	EQU	0130h	;UHL PANEL IMAGE
BS_INVBOXPOS	EQU	0150h	;UHL INVENTORY PANEL BOX TOPLEFT POSITION
BS_INVBOXPOSX	EQU	0150h	;UHW
BS_INVBOXPOSY	EQU	0160h	;UHW
BS_INVBOXSIZE	EQU	0170h	;UHL INVENTORY PANEL BOX SIZE
BS_INVBOXSIZEX	EQU	0170h	;UHW
BS_INVBOXSIZEY	EQU	0180h	;UHW
BS_FLASHOFSET	EQU	0190h	;UHW OFFSET OF THE FLASHCOUNT REG IN PDATA

BS_RECORDSIZE	EQU	01A0h	;SIZE OF ONE TABLE ENTRY

BS_FRAMEOFF	EQU	0000h	;BS CONTROL FIELD
BS_FRAMEON	EQU	0001h

B_FRAME		EQU	0	;BIT EQUIVALENT

;DATA TABLE FOR SCREEN ELEMENTS
BS_TOO_LOW			;INDICATES AN UNDERFLOW	
	.LONG	0,0,0,0,0,0,0,0,0,0,0,0,0
BS_DEFAULT			;INITIAL LOCATION
BS_BOTTOM			;RESET POSITION ON OVERFLOW
BS_POS1
	.WORD	0,0		;X,Y FRAME POSITION
	.WORD	0,0		;X,Y INVENTORY DIGIT POSITION
	.LONG	ASBUY_DTAIL+1	;WEAPON DISPLAY IMAGE
	.LONG	AUTOBUY		;EXIT BOX IMAGE
	.WORD	BS_FRAMEOFF	;FRAME CONTROL
	.WORD	0		;ITEM COST
	.LONG	BS_FINISHED	;FUNCTION TO CALL WHEN START IS PRESSED
	.WORD	0,0		;INITIAL POSITION OF FLYING ICON
	.WORD	0,0		;FINAL POSITION OF FLYING ICON
	.LONG	BS_NOIMG	;IMAGE HEADER FOR FLYING ICON
	.WORD	0		;PANEL HEADER POSITION IN PDATA
	.LONG	BS_NOIMG	;PANEL IMAGE
	.WORD	0,0		;INVENTORY BOX POSITION
	.WORD	0,0		;INVENTORY BOX SIZE
	.WORD	0		;FLASHCOUNT OFFSET
BS_POS2
	.WORD	16+BSA_X,141+BSA_Y
	.WORD	0,0
	.LONG	ASTUR_DTAIL+1
	.LONG	AUTO_EXIT
	.WORD	BS_FRAMEON
	.WORD	BS_TURBO_COST
	.LONG	BS_BUYTURBO
	.WORD	32+BSA_X,157+BSA_Y
	.WORD	26,24
	.LONG	ICN_TURB
	.WORD	0
	.LONG	TUR_SEL
	.WORD	16,7
	.WORD	16,35
	.WORD	PD_TURFLASHCNT
BS_POS3
	.WORD	16+BSA_X,99+BSA_Y
	.WORD	117,32
	.LONG	ASMIN_DTAIL+1
	.LONG	AUTO_EXIT
	.WORD	BS_FRAMEON
	.WORD	BS_MINE_COST
	.LONG	BS_BUYMINE
	.WORD	32+BSA_X,115+BSA_Y
	.WORD	88,31	;X WAS 100
	.LONG	ICN_MINE
	.WORD	1
	.LONG	MIN_SEL
	.WORD	88,21
	.WORD	35,21
	.WORD	PD_MINFLASHCNT
BS_POS4
	.WORD	16+BSA_X,57+BSA_Y
	.WORD	61,32
	.LONG	ASMIS_DTAIL+1
	.LONG	AUTO_EXIT
	.WORD	BS_FRAMEON
	.WORD	BS_MISSILE_COST
	.LONG	BS_BUYMISL
	.WORD	32+BSA_X,63+BSA_Y
	.WORD	48,26
	.LONG	ICN_MISS
	.WORD	2
	.LONG	MIS_SEL
	.WORD	34,21
	.WORD	35,21
	.WORD	PD_MISFLASHCNT
BS_POS5
	.WORD	61+BSA_X,57+BSA_Y
	.WORD	91,105
	.LONG	ASSPEC1_DTAIL+1
	.LONG	AUTO_EXIT
	.WORD	BS_FRAMEON
	.WORD	0
	.LONG	BS_NONE
	.WORD	0+BSA_X,0+BSA_Y
	.WORD	0,0
	.LONG	BS_NOIMG
	.WORD	3
	.LONG	SPC1_SEL
	.WORD	0,0
	.WORD	0,0
	.WORD	0
BS_POS6
	.WORD	61+BSA_X,99+BSA_Y
	.WORD	91,155
	.LONG	ASSPEC2_DTAIL+1
	.LONG	AUTO_EXIT
	.WORD	BS_FRAMEON
	.WORD	0
	.LONG	BS_NONE
	.WORD	0+BSA_X,0+BSA_Y
	.WORD	0,0
	.LONG	BS_NOIMG
	.WORD	4
	.LONG	SPC2_SEL
	.WORD	0,0
	.WORD	0,0
	.WORD	0
BS_TOP				;RESET POSITION ON UNDERFLOW
BS_POS7
	.WORD	61+BSA_X,141+BSA_Y
	.WORD	91,205
	.LONG	ASSPEC3_DTAIL+1
	.LONG	AUTO_EXIT
	.WORD	BS_FRAMEON
	.WORD	0
	.LONG	BS_NONE
	.WORD	0+BSA_X,0+BSA_Y
	.WORD	0,0
	.LONG	BS_NOIMG
	.WORD	5
	.LONG	SPC3_SEL
	.WORD	0,0
	.WORD	0,0
	.WORD	0
BS_TOO_HIGH			;INDICATES AN OVERFLOW

BS_EXITPOS			;EXIT BOX COORDS
	.WORD	62+BSA_X,194+BSA_Y

BS_WDISPPOS			;WEAPON DISPLAY COORDS
	.WORD	11+BSA_X,9+BSA_Y

BS_CASHPOS			;CASH WINDOW COORDS
	.WORD	100,13

BS_SCRBOXPOS			;SCORE BOX COORDS
	.WORD	13,4

BS_TURBOYINC	EQU	-3	;Y-ADJUSTMENT FOR SUCCESSIVE TLIGHTS

BS_THRESHHOLD	EQU	0400h	;WHEEL COUNT THRESHHOLD
BS_MINVEL	EQU	000Fh	;WHEEL ZERO-VELOCITY


;SCORE BOX ELEMENTS
SCORE_BOX_ELEMENTS
	.LONG	SCRBOXR_1
	.LONG	SCRBOXG_2
	.LONG	SCRBOXB_3
	.LONG	SCRBOX_4
	.LONG	SCRBOX_5
	.LONG	SCRBOX_6
	.LONG	SCRBOX_7
SBE_LEAVETHEPALALONE
	.LONG	SCR_TUR
	.LONG	SCR_MISS
	.LONG	SCR_MINE
	.LONG	SCR_SPEC
SCORE_BOX_ELEMENTSX


;COLOR DATA FOR PANELS

PC_SCOREBOXPALLETTE	EQU	0000h	;UHL SCORE BOX PALLETTE
PC_INSTRUCTIONBOX	EQU	0020h	;UHL INSTRUCTION BOX IMAGE

PC_SIZE			EQU	40h
PANELCOLOR1
	.LONG	SCORG_P
	.LONG	G_INSTR
PANELCOLOR2
	.LONG	SCORB_P
	.LONG	B_INSTR
PANELCOLOR3
	.LONG	SCORR_P
	.LONG	R_INSTR


;SPECIAL OBJECT FIELDS
OFULLSIZEY	EQU	OVAR1	;UHW ORIGINAL SIZE OF WIDGET, USED WITH TLIGHTS

**
** FLP_BUY_EQUIPMENT - FLOW-LEVEL PROCESS
**
**  IN
**    NONE
**
**  OUT
**    NONE
**
**  PURPOSE
**    HANDLES THE PURCHASE OF EQUIPMENT FOR ALL PLAYERS
**
**  JMS 17 MAR 93
**

FLP_BUY_EQUIPMENT

	;SET GAME_STATE
	MOVI	INBUYEQUIP,A14
	MOVW	A14,@GAME_STATE

	;INITIALIZE THE PLAYER DATA
	MOVI	BS_PLAYERDATA,A0
	CLR	A1
	MOVI	0Fh,A2
	MOVI	5,A3
	MOVW	A1,*A0(PD_MINES)
	MOVW	A1,*A0(PD_MISLS)
	MOVW	A2,*A0(PD_BANS)
	MOVW	A3,*A0(PD_TURBOS)
	ADDI	PD_RECORDSIZE,A0
	MOVW	A1,*A0(PD_MINES)
	MOVW	A1,*A0(PD_MISLS)
	MOVW	A2,*A0(PD_BANS)
	MOVW	A3,*A0(PD_TURBOS)
	ADDI	PD_RECORDSIZE,A0
	MOVW	A1,*A0(PD_MINES)
	MOVW	A1,*A0(PD_MISLS)
	MOVW   	A2,*A0(PD_BANS)
	MOVW	A3,*A0(PD_TURBOS)

	;DRAW THE BACKGROUND
	MOVK	PLIDWEPSEL,A2
	CALLA	STARTNEWATTRACT ;IN:A2 PLANEID

	;SET UP THE ANIMATION SCRIPT PROCESS
	CREATE	PID_DRAGONE,ANIMP

	;CALL THE COLOR CYCLE INITIALIZATION WIDGET
	CALLA	PALFXINIT ;IN:NONE

	;CLEAR THE OVERTIME FLAG
	CLR	A14
	MOVW	A14,@EQUIP_OVERTIME

	;CREATE THE TIMER
	CREATE	PID_DRAGONE,EQUIP_TIMER

	;CLEAR THE ACTIVE PANELS COUNTER
	CLR	A14
	MOVW	A14,@ACTIVE_BUYPANELS

	;CREATE THE THREE BOXES
	CLR	A8
	CREATE	PID_DRAGONE,BUY_STUFF
	INC	A8
	CREATE	PID_DRAGONE,BUY_STUFF
	INC	A8
	CREATE	PID_DRAGONE,BUY_STUFF

BE_BUYLOOP
	SLEEP	1
	MOVW	@ACTIVE_BUYPANELS,A14
	JRNZ	BE_BUYLOOP

	;THEN WAIT AN EXTRA TWO SECONDS, JUST FOR FUN
	SLEEP	ONESECOND*2

	CREATE	PID_MAIN,DISPATCHPROC
	DIE


**
** BUY_STUFF - PROCESS
**
**  IN
**    A8 PLAYER # (0-2)
**
**  OUT
**    NONE
**
**  PURPOSE
**    HANDLES ALL THE BUYING STUFF FOR A PLAYER
**
**  JMS 16 MAR 93
**  JMS 17 MAR 93
**  JMS 18 MAR 93 ;COMPLETE REWRITE
**  JMS 19 MAR 93 ;MORE BUTTON FUNCTIONS
**  JMS 22 MAR 93 ;INVENTORY STUFF
**  JMS 23 MAR 93 ;FLYING ICONS, VARYING COSTS, 2xINITIAL THRESHHOLD
**  JMS 24 MAR 93 ;EXIT ICON/SELECT FRAME UNIFIED
**

BUY_STUFF

	;REG USE
	;  A0  SCRATCH
	;  A1  SCRATCH
	;  A2  SCRATCH
	;  A3  BUTTON 1 COUNT
	;  A4  EXIT BOX HANDLE
	;  A5  CREATE OBJECT REGISTER (TEMP/SCRATCH)
	;  A6  WEAPON DISPLAY OBJECT HANDLE
	;  A7  CURRENT WHEEL COUNT
	;  A8  SELECT BOX HANDLE
	;  A9  INPUT PORT ADDRESS
	; A10  PLAYER #	
	; A11  SELECT BOX POSITION INDEX

	;  B0  DONE FLAG	- SAVE IN A0
	;  B1  BUTTON 0 COUNT	- SAVE IN A1
	;  B2  BUTTON 2 COUNT	- SAVE IN A2

	;INCREMENT THE ACTIVE BUYPANELS COUNTER
	MOVW	@ACTIVE_BUYPANELS,A14
	INC	A14
	MOVW	A14,@ACTIVE_BUYPANELS

	;SAVE THE PLAYER NUMBER
	MOVE	A8,A10

	;CLEAR THE DONE FLAG
	CLR	A14
	MOVW	A14,*A13(PD_DONE)

	;CLEAR THE BROKE FLAG
	MOVW	A14,*A13(PD_BROKE)

	;CREATE THE ITEM PANELS
	MOVI	BS_POS2,A11

BS_MAKEPANLOOP
	;CREATE THE PANEL
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ

	;ACTIVATE IT
	CALLA	INSOBJ ;IN:A0 hOBJECT

	;SET THE IMAGE
	MOVL	*A11(BS_PANELIMG),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;PLACE IT
	MOVW	*A11(BS_XPOS),A14
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A14
	ADDI	3,A14	;OFFSET FROM CORNER
	MOVW	A14,*A0(OXPOS)
	MOVW	*A11(BS_YPOS),A14
	ADDI	3,A14	;OFFSET FROM CORNER
	MOVW	A14,*A0(OYPOS)	;NOTE THE USE OF Y.  THESE ARE BACKGROUND

	;STORE THE HANDLE
	MOVW	*A11(BS_PANELNUM),A1
	MOVI	0020h,A14
	MPYS	A14,A1
	MOVE	A13,A14
	ADDI	PD_ITEMHANDLES,A14
	ADD	A1,A14
	MOVL	A0,*A14

	ADDI	BS_RECORDSIZE,A11
	CMPI	BS_TOO_HIGH,A11
	JRNE	BS_MAKEPANLOOP

	;SET THE FRAME POINTER
	MOVI	BS_DEFAULT,A11

	;CLEAR THE ACTIVE FLIERS REGISTER
	MOVI	BS_PLAYERDATA,A0
	MOVI	PD_RECORDSIZE,A1
	MPYS	A10,A1
	ADD	A1,A0
	ADDI	PD_FLIERS,A0
	CLR	A1
	MOVW	A1,*A0

	;LOAD PLAYER DATA FROM GLOBAL STRUCT INTO PDATA AREA
	MOVI	BS_PLAYERDATA,A0
	MOVI	PD_RECORDSIZE,A1
	MPYS	A10,A1
	ADD	A1,A0
	MOVW	*A0(PD_MINES),*A13(PD_NMINE)
	MOVW	*A0(PD_MISLS),*A13(PD_NMISL)
	MOVW	*A0(PD_BANS),*A13(PD_NBAN)
	MOVW	*A0(PD_TURBOS),*A13(PD_NTURB)

	MOVI	BS_THRESHHOLD,A14

	SLL	1,A14
	MOVW	A14,*A13(PD_THRESHHOLD)

	;CREATE THE EXIT BOX
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVE	A0,A4

	;ACTIVATE IT
	CALLA	INSOBJ ;IN:A0 hOBJECT

	;PLACE IT
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVI	BS_EXITPOS,A14
	MOVW	*A14,A2
	ADD	A1,A2
	MOVW	A2,*A4(OXPOS)
	ADDI	10h,A14
	MOVW	*A14(0),*A4(OZPOS)

	;CREATE THE SCORE BOX FLASHPANELS
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_FTURBOX)
	CALLA	INSOBJ ;IN: A0 hOBJECT

	MOVI	BS_POS2,A5
	MOVW	*A5(BS_INVBOXSIZEX),*A0(OUSIZEX)
	MOVW	*A5(BS_INVBOXSIZEY),*A0(OUSIZEY)

	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVW	*A5(BS_INVBOXPOSX),A2
	ADD	A1,A2
	MOVW	A2,*A0(OXPOS)
	MOVW	*A5(BS_INVBOXPOSY),*A0(OYPOS)

	MOVI	0606h,A1
	MOVW	A1,*A0(OCONST)

	MOVW	*A0(OCTRL),A1
	XORI	DMAWNZ,A1
	ORI	DMACAL,A1
	XORI	DMAGO,A1
	MOVW	A1,*A0(OCTRL)

	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_FMINEBOX)
	CALLA	INSOBJ ;IN: A0 hOBJECT

	MOVI	BS_POS3,A5
	MOVW	*A5(BS_INVBOXSIZEX),*A0(OUSIZEX)
	MOVW	*A5(BS_INVBOXSIZEY),*A0(OUSIZEY)

	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVW	*A5(BS_INVBOXPOSX),A2
	ADD	A1,A2
	MOVW	A2,*A0(OXPOS)
	MOVW	*A5(BS_INVBOXPOSY),*A0(OYPOS)

	MOVI	0606h,A1
	MOVW	A1,*A0(OCONST)

	MOVW	*A0(OCTRL),A1
	XORI	DMAWNZ,A1
	ORI	DMACAL,A1
	XORI	DMAGO,A1
	MOVW	A1,*A0(OCTRL)

	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_FMISLBOX)
	CALLA	INSOBJ ;IN: A0 hOBJECT

	MOVI	BS_POS4,A5
	MOVW	*A5(BS_INVBOXSIZEX),*A0(OUSIZEX)
	MOVW	*A5(BS_INVBOXSIZEY),*A0(OUSIZEY)

	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVW	*A5(BS_INVBOXPOSX),A2
	ADD	A1,A2
	MOVW	A2,*A0(OXPOS)
	MOVW	*A5(BS_INVBOXPOSY),*A0(OYPOS)

	MOVI	0606h,A1
	MOVW	A1,*A0(OCONST)

	MOVW	*A0(OCTRL),A1
	XORI	DMAWNZ,A1
	ORI	DMACAL,A1
	XORI	DMAGO,A1
	MOVW	A1,*A0(OCTRL)

	;CLEAR THE FLASHCOUNTS
	CLR	A14
	MOVB	A14,*A13(PD_TURFLASHCNT)
	MOVB	A14,*A13(PD_MINFLASHCNT)
	MOVB	A14,*A13(PD_MISFLASHCNT)
	MOVB	A14,*A13(PD_MISFLASHCNT)
	MOVB	A14,*A13(PD_TURFLASHTICK)
	MOVB	A14,*A13(PD_MINFLASHTICK)
	MOVB	A14,*A13(PD_MISFLASHTICK)

	;CREATE THE TURBO LIGHT
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK  OUT: A0 OBJ
	MOVL	A0,*A13(PD_HTURB)

	;SET THE IMAGE
	MOVI	SCR_BAR,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;PLACE IT
	MOVI	BS_SCRBOXPOS,A14
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVW	*A14,A5
	ADD	A5,A1
	MOVW	A1,*A0(OXPOS)
	MOVW	*A14,A14
	MOVW	A14,*A0(OZPOS)

	;STORE THE ORIGINAL SIZE
	MOVL	*A0(OUSIZEY),*A0(OFULLSIZEY)

	MOVW	*A13(PD_NTURB),A1
	CALLR	SET_TURBO_COUNT

	;ACTIVATE IT
	CALLA	INSOBJ ;IN:A0 hOBJECT

	;CREATE THE SCORE BOX
	MMTM	SP,A3,A4,A5,A6,A7,A8
	CALLR	MAKE_SCORE_BOX ;IN:A10 PLYRNUM  SCRATCH:A0-A8
	MMFM	SP,A3,A4,A5,A6,A7,A8

	;CREATE THE SELECT BOX
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVE	A0,A8
	MOVW	*A8(OCTRL),A14
	XORI	DMAGO,A14
	MOVW	A14,*A8(OCTRL)

	;ACTIVATE IT
	CALLA	INSOBJ ;IN:A0 HOBJECT

	;SET THE IMAGE
	MOVI	SEL_BOX,A1
	CALLA	SET_IMAGE ;IN: A0,A1  hOBJECT,IMAGEHEADER

	;START THE COLOR CYCLE
	MOVW	*A0(OPAL),A14
	SRL	8,A14
	SLL	8,A14

	MOVI	021F0001h,A2
	OR	A14,A2
	MOVK	1,A3

	;PALCYCLEADD ZORCHES A0-A6.  PROTECT THE ONES WE NEED
	MMTM	SP,A4,A5,A6
	CALLA	PALCYCLEADD ;IN:A2,A3 VEL.8:COUNT.8:PAL.16,TIME
	MMFM	SP,A4,A5,A6

	;GET THE INPUT ADDRESS
	MOVE	A10,A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A9

	;CREATE THE WEAPON DISPLAY OBJECT
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVE	A0,A6

	;PLACE IT
	MOVI	BS_WDISPPOS,A14
	MOVW	*A14,A0
		
	;ADJUST FOR PLAYER OFFSET
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1

	ADD	A1,A0

	MOVW	A0,*A6(OXPOS)
	ADDK	10h,A14
	MOVW	*A14(0),*A6(OYPOS)

	;ACTIVATE THE WEAPON DISPLAY
	MOVE	A6,A0
	CALLA	INSOBJ ;IN:A0 HOBJECT

	;SET THE DEFAULT IMAGE
	MOVI	PANELCOLOR1,A2
	MOVI	PC_SIZE,A1
	MPYS	A10,A1
	ADD	A1,A2
	MOVL	*A2(PC_INSTRUCTIONBOX),A1
	CALLA	SET_IMAGE ;IN: A0,A1  hOBJECT,IMAGEHEADER

	;CREATE THE BANANA DIGITS
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_HBAN1)
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_HBAN10)

	;PLACE THEM
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	MOVI	BS_CASHPOS,A0
	MOVW	*A0+,A2
	ADD	A1,A2
	MOVL	*A13(PD_HBAN10),A5
	MOVW	A2,*A5(OXPOS)
	MOVW	*A5(OSIZEX),A14
	ADD	A14,A2
	ADDI	2h,A2
	MOVL	*A13(PD_HBAN1),A5
	MOVW	A2,*A5(OXPOS)

	MOVW	*A0,A2
	MOVL	*A13(PD_HBAN10),A5
	MOVW	A2,*A5(OZPOS)
	MOVL	*A13(PD_HBAN1),A5
	MOVW	A2,*A5(OZPOS)

	;ACTIVATE THEM
	MOVL	*A13(PD_HBAN10),A0
	CALLA	INSOBJ ;IN:A0 HOBJECT
	MOVL	*A13(PD_HBAN1),A0
	CALLA	INSOBJ ;IN:A0 HOBJECT

	;SET THEIR IMAGES
	CALLR	SET_BANANA_IMAGES

	;CREATE THE MINE INVENTORY DIGIT
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_HMINE)

	;SET THE IMAGE
	MOVI	BS_DIGIT,A14
	MOVL	*A13(PD_NMINE),A1
	MOVI	20h,A5
	MPYS	A5,A1
	ADD	A1,A14
	MOVL	*A14,A1
	CALLA	SET_IMAGE ;IN: A0,A1  hOBJECT,IMAGEHEADER

	;PLACE IT
	MOVI	BS_POS3,A14
	MOVW	*A14(BS_NUMX),A14
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A14
	MOVW	A14,*A0(OXPOS)
	MOVI	BS_POS3,A14
	MOVW	*A14(BS_NUMY),*A0(OZPOS)

	;ACTIVATE IT
	CALLA	INSOBJ ;IN:A0 HOBJECT

	;CREATE THE MISSLE INVENTORY DIGIT
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVL	A0,*A13(PD_HMISL)

	;SET THE IMAGE
	MOVI	BS_DIGIT,A14
	MOVW	*A13(PD_NMISL),A1
	MOVI	20h,A5
	MPYS	A5,A1
	ADD	A1,A14
	MOVL	*A14,A1
	CALLA	SET_IMAGE ;IN: A0,A1  hOBJECT,IMAGEHEADER

	;PLACE IT
	MOVI	BS_POS4,A14
	MOVW	*A14(BS_NUMX),A14
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A14
	MOVW	A14,*A0(OXPOS)
	MOVI	BS_POS4,A14
	MOVW	*A14(BS_NUMY),*A0(OZPOS)

	;ACTIVATE IT
	CALLA	INSOBJ ;IN:A0 HOBJECT
	    
	;SET THE CURRENT POSITION INDEX
	MOVI	BS_DEFAULT,A11

	;SET THE CURRENT WHEEL COUNT
	CLR	A7

	;SET THE BUTTON COUNT
	MOVW	*A9(INPB1),A3

	;EXIT BOX
	MOVE	A4,A0
	MOVL	*A11(BS_EXITBOX),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,IMAGEHDR

	;
	;SPECIAL HEADER LOOP WHERE WE WAIT FOR INPUT BEFORE MOVING
	;
BS_WAITLOOP
	MMTM	A12,A2,A3,A4,A6,A7
	SLEEP	1
	MMFM	A12,A2,A3,A4,A6,A7

	;UPDATE THE WHEEL COUNT REGISTER
	MOVW	*A9(INPWHEELMAG),A14
	ADD	A14,A7

	;UPDATE THE START BUTTON COUNT
	MOVW	*A9(INPB1),A14
	CMP	A14,A3
	JRZ	BSW_NO_PRESS

	;WE SHOW A BUTTON CHANGE. WHEE.
	MOVE	A14,A3
	JRUC	BS_BEGIN_MAINLOOP

BSW_NO_PRESS
	;NO REAL PRESS.  IF WE'RE OT, THO, PRETEND THERE WAS.
	MOVW	@EQUIP_OVERTIME,A14
	JRNZ	BS_BEGIN_MAINLOOP

	MOVW	*A13(PD_THRESHHOLD),A14
	CMP	A14,A7
	JRLE	BSW_NO_ACWISE

	;WE'RE ABOVE THE THRESHHOLD.  MOVE ON
	JRUC	BS_BEGIN_MAINLOOP

BSW_NO_ACWISE
	MOVW	*A13(PD_THRESHHOLD),A14
	NEG	A14
	CMP	A14,A7
	JRGE	BS_WAITLOOP

	;WE'RE BELOW -THRESHHOLD.  MOVE ON
	MOVE	A14,A3
	JRUC	BS_BEGIN_MAINLOOP
	
*
* TOP OF PROCESS LOOP
*

BS_BEGIN_MAINLOOP
	;RESET THE WHEEL MOTION ACCUMULATOR AND SET A11 TO MISSILE
	MOVI	BS_POS4,A11
	CLR	A7

	;UPDATE BUTTON COUNTS
	MOVW	*A9(INPB0),A0
	MOVE	A0,B0
	MOVW	*A9(INPB1),A0
	MOVE	A0,B1
	MOVW	*A9(INPB2),A0
	MOVE	A0,B2

BS_MOVE_FOCUS

	;JUST IN CASE THIS IS THE FIRST MOVE, SET THE THRESHHOLD
	MOVI	BS_THRESHHOLD,A14
	MOVW	A14,*A13(PD_THRESHHOLD)
	MOVI	SNDSELSCROLL,A14
	CALLA	MAKESND ;IN:A14 SOUND ID

	;CLEAR THE WHEEL COUNT
	CLR	A7

	;CHECK FOR OVER/UNDERFLOW
	CMPI	BS_TOO_HIGH,A11
	JRNE	BS_CHECK_LOW

	;TOO HIGH.  RESET TO BOTTOM
	MOVI	BS_BOTTOM,A11
	JRUC	BS_IN_RANGE

BS_CHECK_LOW
	CMPI	BS_TOO_LOW,A11
	JRNE	BS_IN_RANGE

	;TOO LOW.  RESET TO TOP
	MOVI	BS_TOP,A11
        ;JRUC	BS_IN_RANGE
	
BS_IN_RANGE
	;ASSIGN NEW IMAGES
	;WEAPON DISPLAY
	MOVE	A6,A0

	CALLA	CKPULLANIM ;IN:A0 OBJ

	MOVL	*A11(BS_WDIMAGE),A1
	BTST	0,A1
	JRZ	BS_NOANIM

	;ANIMATION SCRIPT INSTEAD OF STATIC IMAGE
	;FIRST, SET THE IMAGE SO THAT THE PALLETTE IS CORRECT
	SRL	4,A1
	SLL	4,A1
	MOVE	A1,A2 ;SAVE A1
	MOVL	*A1,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,IMAGEHDR
	MOVE	A2,A1
	MOVL	A1,*A0(ANIMFRM)			;SET NEXT ANIM FRAME
	MOVL	A1,*A0(ANIMSCR)			;SET TOP OF ANIM
	MOVK	1,A14
	MOVW	A14,*A0(ANIMSLPB)		;SET ANIM SLEEP TIME
	CALLA	INSANI ;IN:A0 OBJ

	JRUC	BS_ANIM

BS_NOANIM
	;DUMP BOTTOM 4 BITS
	SRL	4,A1
	SLL	4,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,IMAGEHDR

BS_ANIM
BS_FIRST_TIME
	;EXIT BOX
	MOVE	A4,A0
	MOVL	*A11(BS_EXITBOX),A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,IMAGEHDR

	;SET THE DMA_GO BIT ON THE SELECT FRAME
	SETF	1,0,0
	MOVE	*A11(BS_CONTROL+B_FRAME),*A8(OCTRL+15),0
	SETF	16,1,0

BS_PLACE_SBOX
	;MOVE THE SELECT FRAME
	MOVE	A11,A14
	MOVW	*A14+,A0
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A0
	MOVW	A0,*A8(OXPOS)

	MOVW	*A14,A0
	MOVW	A0,*A8(OYPOS)

BS_GO_BACK_TO_SLEEP
	MOVE	B0,A0
	MOVE	B1,A1
	MOVE	B2,A2
	MMTM	A12,A0,A1,A2,A3,A4,A6,A7
	SLEEP	1
	MMFM	A12,A0,A1,A2,A3,A4,A6,A7
	MOVE	A2,B2
	MOVE	A1,B1
	MOVE	A0,B0

	;FIRST OFF, DO AN OVERTIME CHECK
	; IF WE'RE IN OVERTIME, CHECK THE DONE FLAG.  IF IT IS ZERO, THAT
	; MEANS THAT WE'RE STILL JUST SITTING THERE.  CALL BS_FINISHED TO
	; SET OFF THE AUTOBUY MODE.  IF IT IS _NOT_ ZERO, THEN THINGS ARE
	; ALREADY TAKEN CARE OF, SO WE DO NOTHING SPECIAL HERE.
	MOVW	@EQUIP_OVERTIME,A14
	JRZ	BS_NO_SPECIAL_ACTION

	MOVW	*A13(PD_DONE),A14
	JRNZ	BS_NO_SPECIAL_ACTION

	;OKAY, WE AREN'T IN AUTOBUY, BUT SHOULD BE.  GENTLY SET IT OFF.
	CALLR	BS_FINISHED

BS_NO_SPECIAL_ACTION
	;UPDATE SCORE BOX FLASHES
	CALLR	SCORE_BOX_FLASHES

	;IF WE'RE IN AUTOBUY MODE, DON'T BOTHER WITH THE CONTROLS.
	MOVW	*A13(PD_DONE),A14
	CMPI	BS_AUTOBUYFLAG,A14
	JRNZ	BS_NOT_IN_AUTOBUY

	;OKAY, WE'RE IN AUTOBUY MODE.
	;NOTE THAT THE REGISTER USE IN AUTOBUY MODE IS SLIGHTLY DIFFERENT
	;REG USE
	;  A3 FORMERLY BUTTON COUNT.  NOW NUMBER OF FRAMES SINCE LAST BUY

	;IF THE COUNT IS ZERO, THEN WE NEED TO BUY
	;IF IT'S EQUAL TO BS_ABDELAY, TIME TO MOVE THE FOCUS TO SOMETHING NEW
	;ON ANYTHING ELSE, JUST WAIT
	MOVE	A3,A3
	JRZ	AB_BUY_SOMETHING

	INC	A3
	CMPI	BS_ABDELAY,A3
	JRNE	BS_GO_BACK_TO_SLEEP
	
	;IT'S EQUAL
	CLR	A3
	CALLR	AUTOBUY_CHOOSENEXT

	;A11 NOW POINTS TO THE NEW GOODIE.  MOVE THE FOCUS AND ALL.
	JRUC	BS_MOVE_FOCUS

AB_BUY_SOMETHING
	;THE COUNT IS ZERO, MEANING THAT THE FOCUS WAS MOVED ON THE PREVIOUS
	;  COUNT.  NOW WE BUY THE HIGHLIGHTED ITEM.
	INC	A3
	MOVL	*A11(BS_ONSTART),A0
	CALL	A0
	JRUC	BS_GO_BACK_TO_SLEEP

BS_NOT_IN_AUTOBUY
	;POLL THE CONTROLS

	;UPDATE THE WHEEL COUNT REGISTER
	MOVW	*A9(INPWHEELMAG),A14
	ADD	A14,A7

	;CHECK THE LOW VELOCITY THRESHHOLD
	ABS	A14
	CMPI	BS_MINVEL,A14
	JRGT	BS_ABOVE_MINVEL

	;WE'RE BELOW THE MINIMUM VELOCITY THRESHHOLD.  ZERO THE COUNT
	CLR	A7

BS_ABOVE_MINVEL
	;UPDATE THE BUTTON COUNTS
	; B3 IS THE BUTTON PRESS ACCUMULATOR
	CLR	B3

	MOVW	*A9(INPB0),A14
	MOVE	A14,B14
	CMP	B14,B1
	JRZ	CHECK_BTN_1

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	CHECK_BTN_1

	;IT'S A PRESS
	INC	B3

CHECK_BTN_1
	MOVW	*A9(INPB1),A14
	CMP	A14,A3
	JRZ	CHECK_BTN_2

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	CHECK_BTN_2

	;IT'S A PRESS
	INC	B3

CHECK_BTN_2
	MOVW	*A9(INPB2),A14
	MOVE	A14,B14
	CMP	B14,B2
	JRZ	END_PRESSCHECK

	;BUTTON CHANGE.  SEE IF IT'S A PRESS OR RELEASE
	SRL	1,A14
	JRNC	END_PRESSCHECK

	;IT'S A PRESS
	INC	B3

END_PRESSCHECK
	;IN ANY CASE, UPDATE ALL THREE BUTTON COUNT REGS
	MOVW	*A9(INPB0),A14
	MOVE	A14,B1
	MOVW	*A9(INPB1),A3
	MOVW	*A9(INPB2),A14
	MOVE	A14,B2

	;NOW, IF THERE WERE ANY PRESSES, HANDLE THEM
	MOVE	B3,B3
	JRZ	BS_NO_PRESSES

	;THERE WAS A BUTTON PRESS.  LOAD THE FUNCTION VECTOR FROM THE BS TABLE
	;BUT FIRST, MAAAAAAAAAAAAAAAAAAAAAAAAKE NOISE!
	MOVI	SNDSELSELECT,A14
	CALLA	MAKESND ;IN:A14 SOUND

	MOVL	*A11(BS_ONSTART),A0
	JRZ	BS_NO_PRESSES
	CALL	A0

	;IF THE MONEY IS ALL GONE, SHIFT THE FOCUS TO THE EXIT BOX,
	;CLEAR THE WHEEL COUNT, AND SET THE FLAG THAT TELLS US TO 
	;IGNORE FURTHER WHEEL STUFF
	MOVW	*A13(PD_NBAN),A14
	JRNZ	BS_NO_PRESSES

	;THAT'S THE LAST OF THE MONEY
	MOVI	BS_BOTTOM,A11
	CLR	A7
	MOVI	1h,A14
	MOVW	A14,*A13(PD_BROKE)
	JRUC	BS_MOVE_FOCUS

BS_NO_PRESSES
	MOVW	*A13(PD_THRESHHOLD),A14
	CMP	A14,A7
	JRLE	BS_NO_ACWISE

	;WE'RE ABOVE THE THRESHHOLD.  MOVE ANTICLOCKWISE
	ADDI	-BS_RECORDSIZE,A11
	JRUC	BS_MOVE_FOCUS

BS_NO_ACWISE
	MOVW	*A13(PD_THRESHHOLD),A14
	NEG	A14
	CMP	A14,A7
	JRGE	BS_NO_MOTION

	;WE'RE BELOW -THRESHHOLD.  MOVE CLOCKWISE
	ADDI	BS_RECORDSIZE,A11
	JRUC	BS_MOVE_FOCUS
	
BS_NO_MOTION
	;CHECK AND SEE IF WE'RE DONE
	MOVW	*A13(PD_DONE),A14
	CMPI	BS_DONEFLAG,A14
	JRNZ	BS_GO_BACK_TO_SLEEP

BS_DONE
	;CHANGE THE OBJECT PANELS INTO BLANKS
	MMTM	SP,A0,A1,A2,A3,A4 ;PRE-SETBLANK
	MOVI	6,A2
	MOVE  	A13,A3
	ADDI	PD_ITEMHANDLES,A3

BS_SETBLANKLOOP
	MOVL	*A3+,A0
	MOVI	WEP_COVR,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE
	DSJ	A2,BS_SETBLANKLOOP

	;GET THE DISPLAY THINGIE TOO
	MOVE	A6,A0
	CALLA	CKPULLANIM ;IN:A0 OBJ

	MOVI	DTAL_COVR,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	MMFM	SP,A0,A1,A2,A3,A4 ;POST-SETBLANK

	;WE'RE DONE.  WAIT FOR ANY FLYING ICONS TO FINISH UP
	;SET A11 IN ADVANCE FOR USE AS A LOOP COUNTER LATER
	MOVI	ONESECOND,A11

BS_WAIT_FOR_FLIERS
	MMTM	A12,A2,A3,A4,A6,A7
	SLEEP	1
	MMFM	A12,A2,A3,A4,A6,A7

	;UPDATE SCORE BOX FLASHES
	CALLR	SCORE_BOX_FLASHES

	MOVI	BS_PLAYERDATA,A0
	MOVI	PD_RECORDSIZE,A1
	MPYS	A10,A1
	ADD	A1,A0
	ADDI	PD_FLIERS,A0
	MOVW	*A0,A0
	JRNZ	BS_WAIT_FOR_FLIERS

	;IN ADDITION, WAIT AN EXTRA SECOND FOR ANY FLASHES TO FINISH UP.
	DSJ	A11,BS_WAIT_FOR_FLIERS

	;NOW DECREMENT THE ACTIVE PANELS REGISTER
	MOVW	@ACTIVE_BUYPANELS,A14
	DEC	A14
	MOVW	A14,@ACTIVE_BUYPANELS

	DIE
	

**
** SET_IMAGE
**
**  IN
**    A0 hOBJECT
**    A1 NEW IMAGE HEADER
**
**  OUT
**    NONE
**
**  PURPOSE
**    ASSIGNS A NEW IMAGE HEADER TO hOBJECT
**
**  xxx 18 MAR 93 ;COPIED FROM SGSWAPOBJ@DRATT.ASM
**  JMS 18 MAR 93 ;COSMETIC/INPUT CHANGES
**  JFL 18 MAR 93 ;HANDLES PALLETTE CHANGES
**  JMS 19 MAR 93 ;MMTM/MMFM
**

SET_IMAGE
	MMTM	SP,A0,A1,A2,A14

	MOVL	A1,*A0(OIMG)
	MOVL	*A1(ISIZE),A14		;ISIZE (offset 0)
	MOVL	A14,*A0(OSIZE)
	MOVL	A14,*A0(OUSIZE)
	MOVL	*A1(ISAG),*A0(OSAG)
	MOVW	*A0(OCTRL),A2
	MOVE	*A1(ICTRL),A14
	ANDI	0807FH,A2
	OR	A2,A14	
	MOVW	A14,*A0(OCTRL)

	MOVL	*A1(IANIOFF),A14
	MOVL	A14,*A0(OANIOFF)
	MOVL	A14,*A0(OUANIOFF)

	CLR	A14
	MOVW	A14,*A0(OSCALEMUL)

	;FIND OR ALLOC PAL FOR THIS NEW IMAGE
	MMTM	SP,A0
	MOVL	*A1(ICMAP),A0
	CALLA	GETFPAL ;IN:A0 PALADR OUT:A0 PALID
	MOVE	A0,A14
	MMFM	SP,A0
	MOVW	A14,*A0(OPAL)

	MMFM	SP,A0,A1,A2,A14
	RETS


**
** BS_FINISHED
**
**  IN
**    NONE
**
**  OUT
**    SETS THE DONE FLAG FOR THE CURRENT PROCESS
**    INITIALIZES A3 AND A11 IF AUTOBUY IS ENABLED
**
** JMS 19 MAR 93
**

BS_FINISHED
	;CHECK THE MONEY SUPPLY.  IF THERE'S NONE LEFT, KILL THE PROCESS.
	;IF THERE'S ANY LEFT, GO TO AUTOBUY.
	MOVW	*A13(PD_NBAN),A14
	JRZ	BSF_NO_MONEY_LEFT

	;THERE'S STILL MONEY LEFT.  GO TO AUTOBUY
	MOVI	BS_AUTOBUYFLAG,A14
	MOVW	A14,*A13(PD_DONE)

	;SET A3 AND A11 FOR AUTOBUY MODE
	MOVI	BS_ABDELAY-1,A3
	MOVI	BS_POS4,A11
	JRUC	BSF_DONE

BSF_NO_MONEY_LEFT
	;WE'RE BROKE.  EXIT.
	MOVI	BS_DONEFLAG,A14
	MOVW	A14,*A13(PD_DONE)

BSF_DONE
	RETS


**
** BS_BUYMINE
**
**  IN
**    NONE
**
**  OUT
**    NONE
**
**  PURPOSE
**    INCREMENTS THE NUMBER OF MINES A PLAYER OWNS, AND UPDATES THE SCREEN
**    DISPLAY ACCORDINGLY
**
**  JMS 22 MAR 93
**  JMS 23 MAR 93
**

BS_BUYMINE

	MMTM	SP,A0,A1,A2,A4,A6,A7,A8,A9
	;NOTE: A6 AND A7 ARE SAVED BECAUSE THE FLY_ICON PROCESS ZORCHES THEM

	;GET THE BANANA COUNT
	MOVW	*A13(PD_NBAN),A0
	
	;GO HOME IF IT'S NOT ENOUGH
	CMPI	BS_MINE_COST,A0
	JRLT	BSBMN_DONE

	;DECREMENT, WRITEBACK, AND ADJUST BANANA IMAGES
	MOVI	BS_MINE_COST,A14
	SUB	A14,A0
	MOVW	A0,*A13(PD_NBAN)
	CALLR	SET_BANANA_IMAGES

	;CREATE A FLY_ICON PROCESS
	MOVE	A13,A8
	ADDI	PD_NMINE,A8
	MOVL	*A13(PD_HMINE),A9
	CREATE	PID_DRAGONE,FLY_ICON

	;SET FLASHCOUNT DATA ON THE CHILD PROCESS
	MOVE	A13,A14
	ADDI	PD_MINFLASHCNT,A14
	MOVL	A14,*A0(PD_ITEMFLASHCNT)
	CLR	A14
	MOVW	A14,*A0(PD_ISTURB)

BSBMN_DONE
	MMFM	SP,A0,A1,A2,A4,A6,A7,A8,A9
	RETS

**
** BS_BUYMISL
**
**  IN
**    NONE
**
**  OUT
**    NONE
**	    
**  PURPOSE
**    BUYS A LOAD OF MINES FOR CURRENT PLAYER, IF HE HAS ENOUGH BANANAS
**
**  JMS 22 MAR 93
**  JMS 23 MAR 93
**

BS_BUYMISL

	MMTM	SP,A0,A1,A2,A6,A7,A8,A9
	;NOTE: A6 AND A7 ARE SAVED BECAUSE THE FLY_ICON PROCESS ZORCHES THEM

	;GET THE BANANA COUNT
	MOVW	*A13(PD_NBAN),A0
	
	;GO HOME IF IT'S NOT ENOUGH
	MOVI	BS_MISSILE_COST,A14
	CMP	A14,A0
	JRLT	BSBML_DONE

	;DECREMENT, WRITEBACK, AND ADJUST BANANA IMAGES
	SUB	A14,A0
	MOVW	A0,*A13(PD_NBAN)
	CALLR	SET_BANANA_IMAGES

	;CREATE A FLY_ICON PROCESS
	MOVE	A13,A8
	ADDI	PD_NMISL,A8
	MOVL	*A13(PD_HMISL),A9
	CREATE	PID_DRAGONE,FLY_ICON

	;SET FLASHCOUNT DATA ON THE CHILD PROCESS
	MOVE	A13,A14
	ADDI	PD_MISFLASHCNT,A14
	MOVL	A14,*A0(PD_ITEMFLASHCNT)
	CLR	A14
	MOVW	A14,*A0(PD_ISTURB)

BSBML_DONE
	MMFM	SP,A0,A1,A2,A6,A7,A8,A9
	RETS

**
** BS_BUYTURBO
**
**  IN
**    NONE
**
**  OUT
**    NONE
**	    
**  PURPOSE
**    BUYS A LOAD OF MINES FOR CURRENT PLAYER, IF HE HAS ENOUGH BANANAS
**
**  JMS 2 APR 93
**

BS_BUYTURBO

	MMTM	SP,A0,A1,A2,A6,A7,A8,A9
	;NOTE: A6 AND A7 ARE SAVED BECAUSE THE FLY_ICON PROCESS ZORCHES THEM

	;GET THE BANANA COUNT
	MOVW	*A13(PD_NBAN),A0
	
	;GO HOME IF IT'S NOT ENOUGH
	MOVI	BS_TURBO_COST,A14
	CMP	A14,A0
	JRLT	BSBTB_DONE

	;DECREMENT, WRITEBACK, AND ADJUST BANANA IMAGES
	SUB	A14,A0
	MOVW	A0,*A13(PD_NBAN)
	CALLR	SET_BANANA_IMAGES

	;CREATE A FLY_ICON PROCESS
	MOVE	A13,A8
	ADDI	PD_NTURB,A8
	MOVL	*A13(PD_HTURB),A9
	CREATE	PID_DRAGONE,FLY_ICON

	;SET FLASHCOUNT DATA ON THE CHILD PROCESS
	MOVE	A13,A14
	ADDI	PD_TURFLASHCNT,A14
	MOVL	A14,*A0(PD_ITEMFLASHCNT)
	MOVK	1,A14
	MOVW	A14,*A0(PD_ISTURB)

BSBTB_DONE
	MMFM	SP,A0,A1,A2,A6,A7,A8,A9
	RETS

**
** SET_BANANA_IMAGES
**
**  IN
**    NONE
**
**  OUT
**    NONE
**
**  PURPOSE
**    READS THE CURRENT NUMBER OF BANANAS FROM THE CURRENT PLAYER
**    AND SETS THE IMAGES FOR THE BANANA DIGIT OBJECTS
**
**  JMS 22 MAR 93
**

SET_BANANA_IMAGES

	MMTM	SP,A0,A1,A2,A3,A4

	;REG USE
	; A5  TOTAL WIDTH COUNTER

	CLR	A5
	MOVI	BCDTBL,A4
	MOVW	*A13(PD_NBAN),A1
	MOVI	8h,A14
	MPYS	A14,A1
	ADD	A1,A4
	MOVB	*A4,A4
	SLL	24,A4
	SRL	24,A4

	;A4 NOW HOLDS THE CURRENT NUMBER OF BANANAS IN BCD
	MOVE	A4,A3
	SRL	4,A3
	MOVI	20h,A14
	MPYS	A14,A3
	MOVI	BS_DIGIT,A1
	ADD	A3,A1
	MOVL	*A1,A1
	MOVL	*A13(PD_HBAN10),A0
	CALLA	SET_IMAGE ;IN: A0,A1  hOBJECT,IMAGEHEADER

	;IF THE TENS DIGIT IS ZERO, TURN IT OFF
	MOVE	A4,A3
	SRL	4,A3
	JRNZ	SBI_DO_ONES
	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A0(OCTRL+B_INUSE),0
	SETF	16,1,0

SBI_DO_ONES

	MOVE	A4,A3
	SLL	28,A3
	SRL	28,A3
	MOVI	20h,A14
	MPYS	A14,A3
	MOVI	BS_DIGIT,A1
	ADD	A3,A1
	MOVL	*A1,A1
	MOVL	*A13(PD_HBAN1),A0
	CALLA	SET_IMAGE ;IN: A0,A1  hOBJECT,IMAGEHEADER

	;IMAGES ARE SET.  NOW CENTER THEM.
	MOVL	*A13(PD_HBAN10),A0
	MOVW	*A0(OCTRL),A0
	BTST	15,A0
	JRNZ	SBI_TENS_ACTIVE

	;ONES DIGIT ONLY.  CENTER IT
	MOVL	*A13(PD_HBAN1),A0
	MOVW	*A0(OUSIZEX),A1
	MOVI	BS_PANEL_WIDTH,A2
	SUB	A1,A2
	SRL	1,A2
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	ADDI	10h,A2
	MOVW	A2,*A0(OXPOS)

	JRUC	SBI_DONE

SBI_TENS_ACTIVE
	;BOTH DIGITS ACTIVE.  CENTER THEM.
	MOVL	*A13(PD_HBAN10),A0
	MOVW	*A0(OUSIZEX),A1
	ADDI	2h,A1
	MOVL	*A13(PD_HBAN1),A0
	MOVW	*A0(OUSIZEX),A2
	ADD	A2,A1
	MOVI	BS_PANEL_WIDTH,A2
	SUB	A1,A2
	SRL	1,A2
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A2
	ADDI	10h,A2

	MOVL	*A13(PD_HBAN10),A0
	MOVW	A2,*A0(OXPOS)
	ADDI	2h,A2
	MOVW	*A0(OUSIZEX),A1
	ADD	A1,A2
	MOVL	*A13(PD_HBAN1),A0
	MOVW	A2,*A0(OXPOS)

SBI_DONE
	MMFM	SP,A0,A1,A2,A3,A4
	RETS

**
** FLY_ICON - PROCESS
**
**  IN
**    A8  POINTER TO VALUE TO BE INCREMENTED UPON COMPLETION
**    A9  HANDLE OF GRAPHIC CHARACTER TO BE INCREMENTED UPON COMPLETION
**   A10  PLAYER NUMBER
**   A11  POINTER TO BS_DATA STRUCT FROM WHICH TO EXTRACT ADDITIONAL DATA
**   A13(PD_ITEMFLASHCNT)
**        POINTER TO FLASH COUNT TO BE INCREMENTED
**   A13(PD_ISTURB)
**        NONZERO IF THE ICON IS A TURBO, ZERO OTHERWISE
**
**  OUT
**    NONE
**
**  PURPOSE
**    CREATES A FLYING ICON, WAITS FOR IT TO REACH IT'S FINAL POSITION,
**    THEN INCREMENTS THE INVENTORY COUNT AND UPDATES THE INVENTORY DIGIT.
**
**  JMS 23 MAR 93
**

FLY_ICON

	;REG USE
	; A6 POINTER TO ACTIVEFLIERS COUNTER
	; A7 ICON HANDLE

	;INCREMENT THE ACTIVEFLIERS COUNTER
	MOVI	BS_PLAYERDATA,A0
	MOVI	PD_RECORDSIZE,A1
	MPYS	A10,A1
	ADD	A1,A0
	ADDI	PD_FLIERS,A0
	MOVE	A0,A6
	MOVE	*A0,A0
	INC	A0
	MOVW	A0,*A6
	
	;CREATE THE ICON
	MOVI	BS_GENERIC_AUTOVEL_OBJ,A5
	CALLA	CREATE_OBJ ;IN: A5 COBLOCK OUT: A0 OBJ
	MOVE	A0,A7

	;SET THE IMAGE
	MOVL	*A11(BS_FLYICON),A1
	MOVE	A7,A0
	CALLA	SET_IMAGE ;IN: A0,A1  hOBJECT,IMAGEHEADER

	;PLACE THE ICON
	MOVW	*A11(BS_ICONX),A0
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A0
	MOVW	A0,*A7(OXPOS)
	MOVW	*A11(BS_ICONY),*A7(OZPOS)
	
	;SET THE VELOCITY
	CLR	A0
	MOVW	*A11(BS_IFINX),A0
	MOVW	*A11(BS_ICONX),A1
	SUB	A1,A0
	SLA	16-BS_ICONSPEED,A0
	MOVL	A0,*A7(OXVEL)

	CLR	A0
	MOVW	*A11(BS_IFINY),A0
	MOVW	*A11(BS_ICONY),A1
	SUB	A1,A0
	SLA	16,A0
	SRA	BS_ICONSPEED,A0
	MOVL	A0,*A7(OZVEL)

	;ACTIVATE THE ICON
	MOVE	A7,A0
	CALLA	INSOBJ ;IN:A0 HOBJECT

FI_LOOP
	MMTM	A12,A4,A6,A7
	SLEEP	1
	MMFM	A12,A4,A6,A7

	;CHECK AND SEE IF IT'S IN POSITION
	;  THIS IS EASY.  SINCE THEY'LL ALWAYS BE FLYING UP, JUST COMPARE
	;  CURRENT Z TO FINAL Z
	MOVW	*A7(OZPOS),A0
	MOVW	*A11(BS_IFINY),A1
	SUB	A1,A0

	JRGT	FI_LOOP

	;ALL DONE.  ZAP THE ICON
	MOVE	A7,A0
	CALLA	ZAPOBJ ;IN: A0 hOBJECT

	;INCREMENT THE INVENTORY DIGIT
	MOVW	*A8,A14
	INC	A14
	MOVW	A14,*A8

	;THE NEW VALUE IS NINE OR LESS.  SET A NEW IMAGE
	MOVL	*A13(PD_ISTURB),A1
	JRNZ	FI_ADD_TLIGHT

	;DON'T UPDATE IF THE NEW NUMBER IS GREATER THAN NINE
	CMPI	9h,A14
	JRGT	FI_DONE

	MOVI	BS_DIGIT,A2
	MOVI	20h,A1
	MPYS	A14,A1
	ADD	A1,A2
	MOVL	*A2,A1
	MOVE	A9,A0
	CALLA	SET_IMAGE ;IN: A0,A1  hOBJECT,IMAGEHEADER
	JRUC	FI_DONE

FI_ADD_TLIGHT
	;ADJUST THE TURBO THANG
	MOVE	A9,A0
	MOVW	*A8,A1
	CALLR	SET_TURBO_COUNT

FI_DONE
	;DECREMENT THE ACTIVEFLIERS COUNTER
	MOVE	*A6,A0
	DEC	A0
	MOVW	A0,*A6

	;START A FLASH
	MOVL	*A13(PD_ITEMFLASHCNT),A14
	MOVI	SCOREBOX_FLASHTIME,A0
	MOVB	A0,*A14
       	DIE

**
** AUTOBUY_CHOOSENEXT
**
**  IN
**    NONE
**
**  OUT
**    A11  POINTER TO BS_STRUCT OF NEXT ITEM TO BE BOUGHT
**
**  PURPOSE
**    CALLED BUY THE BUY EQUIPMENT PROCESS.  FUNCTION CHOOSES THE NEXT
**    ITEM TO BE BOUGHT IN THE AUTOBUY SEQUENCE AND SETS THE A11 POINTER
**    ACCORDINGLY.
**
**  JMS 24 MAR 93
**

AUTOBUY_CHOOSENEXT

	;FOR NOW, THIS IS SIMPLE.  IF THE LAST THING WAS A MISSILE, BUY
	;  A MINE.  IF IT WAS A MINE, BUY A MISSILE.  IF WE'RE BROKE,
	;  MOVE THE FOCUS TO THE DONE FIELD.

	;REG USE
	;  A0  SCRATCH
	;  A2  BANANAS

	MMTM	SP,A0,A2

	MOVW	*A13(PD_NBAN),A2

	;CHECK FOR BROKE
	JRNZ	ABC_NOTBROKE
	MOVI	BS_POS1,A11
	JRUC	ABC_DONE

ABC_NOTBROKE
	CMPI	BS_POS3,A11
	JRNE	ABC_NOTMINE

	;IT'S A MINE.  SET FOR A MISSILE IF THERE'S ENOUGH CASH.
	CMPI	BS_MISSILE_COST,A2
	JRLT	ABC_DONE
	MOVI	BS_POS2,A11
	JRUC	ABC_DONE

ABC_NOTMINE
	;IT'S NOT A MINE.  CHECK AND SEE IF IT'S A MISSILE
	CMPI	BS_POS4,A11
	JRNE	ABC_NOTMISL
	MOVI	BS_POS3,A11
	JRUC	ABC_DONE

ABC_NOTMISL
	;IT'S NOT A MISSLE.  IT HAD BETTER BE A TURBO, THEN
	CMPI	BS_POS2,A11
	JRNE	ABC_BADVALUE
	MOVI	BS_POS4,A11
	JRUC	ABC_DONE

ABC_BADVALUE
	;A11 WAS POINTING AT SOMETHING FUNNY.  ICK
	NOP
	TLOCKUP

ABC_DONE
	MMFM	SP,A0,A2
	RETS

**
** SCORE_BOX_FLASHES
**
**  IN
**    NONE
**
**  OUT
**    NONE
**
**  PURPOSE
**    HANDLES THE TIMING ON ALL THE SCORE BOX FLASHES
**
**  JMS 1 APR 93
**

SCORE_BOX_FLASHES

	MMTM	SP,A0,A1,A2

	MOVB	*A13(PD_TURFLASHCNT),A0
	MOVB	*A13(PD_TURFLASHTICK),A1
	MOVL	*A13(PD_FTURBOX),A2
	CALLR	HANDLE_ONE_FLASH ;IN:A0,A1,A2 FLASHCNT,FLASHTICK,hFLASH
	MOVB	A0,*A13(PD_TURFLASHCNT)
	MOVB	A1,*A13(PD_TURFLASHTICK)

	MOVB	*A13(PD_MINFLASHCNT),A0
	MOVB	*A13(PD_MINFLASHTICK),A1
	MOVL	*A13(PD_FMINEBOX),A2
	CALLR	HANDLE_ONE_FLASH ;IN:A0,A1,A2 FLASHCNT,FLASHTICK,hFLASH
	MOVB	A0,*A13(PD_MINFLASHCNT)
	MOVB	A1,*A13(PD_MINFLASHTICK)

	MOVB	*A13(PD_MISFLASHCNT),A0
	MOVB	*A13(PD_MISFLASHTICK),A1
	MOVL	*A13(PD_FMISLBOX),A2
	CALLR	HANDLE_ONE_FLASH ;IN:A0,A1,A2 FLASHCNT,FLASHTICK,hFLASH
	MOVB	A0,*A13(PD_MISFLASHCNT)
	MOVB	A1,*A13(PD_MISFLASHTICK)

SBF_DONE
	MMFM	SP,A0,A1,A2
	RETS

**
** HANDLE_ONE_FLASH
**
**  IN
**    A0 TOTAL FLASHCOUNT
**    A1 TIME REMAINING ON CURRENT FLASH
**    A2 HANDLE OF FLASH PANEL
**
**  OUT
**    UPDATED VALUES OF A0 AND A1
**
**  PURPOSE
**    HANDLES THE FLASH FOR ONE PANEL
**
**  JMS 1 APR 93
**

HANDLE_ONE_FLASH

	;GO HOME IF THERE'S NO TIME LEFT
	MOVE	A0,A0
	JRZ	HOF_DONE

	DEC	A0
	JRNZ	HOF_TIME_LEFT

	;THIS IS THE LAST TICK.  TURN THE FLASHPANEL OFF
	SETF	1,0,0
	CLR	A14
	MOVE	A14,*A2(OCTRL+15),0
	SETF	16,1,0
	CLR	A1
	JRUC	HOF_DONE

HOF_TIME_LEFT
	;OKAY, WE'RE STILL GOING. TOGGLE THE FLASH SETTING IF NEED BE
	DEC	A1
	JRNN	HOF_DONE

	MOVW	*A2(OCTRL),A14
	XORI	DMAGO,A14
	MOVW	A14,*A2(OCTRL)

	MOVI	SCOREBOX_FLASHRATE,A1

HOF_DONE
	RETS

**
** MAKE_SCORE_BOX
**
**  IN
**    A10 PLAYER NUMBER
**
**  OUT
**    NONE
**
**  SCRATCH
**    A0-A8
**
**  PURPOSE
**    DRAWS A SCORE BOX AT THE CORRECT SCREEN POSITION
**
** JMS 13 APR 93
**

MAKE_SCORE_BOX

	;REG USE
	; A8 PALLETTE

	;FIND THE PALLETTE
	MOVI	PC_SIZE,A1
	MPYU	A10,A1
	MOVI	PANELCOLOR1,A2
	ADD	A1,A2
	MOVL	*A2,A0
	CALLA	GETFPAL ;IN:A0 PALADDR  OUT:A0 PALID
	TLOCKON	Z
	MOVE	A0,A8

	;INITIALIZE A1 AND A2
	MOVI	SCORE_BOX_ELEMENTS,A2

	MOVI	BS_SCRBOXPOS,A14
	MOVW	*A14+,A6
	MOVW	*A14,A7
	MOVI	BS_PANEL_WIDTH,A1
	MPYS	A10,A1
	ADD	A1,A6

MSB_LOOP
	;CREATE THE OBJECT
	MOVI	BS_GENERIC_OBJECT,A5
	CALLA	CREATE_OBJ ;IN:A5 COBLOCK  OUT:A0 hOBJECT
	CALLA	INSOBJ ;IN:A0

	;SET THE IMAGE
	MOVL	*A2+,A1
	CALLA	SET_IMAGE ;IN:A0,A1 hOBJECT,hIMAGE

	;SET THE PALLETTE
	CMPI	SBE_LEAVETHEPALALONE,A2
	JRHI	MSB_NOPALCHANGE
	MOVW	A8,*A0(OPAL)

MSB_NOPALCHANGE
	;PLACE IT
	MOVW	A6,*A0(OXPOS)
	MOVW	A7,*A0(OZPOS)

	CMPI	SCORE_BOX_ELEMENTSX,A2
	JRNE	MSB_LOOP

	RETS


**
** SET_TURBO_COUNT
**
**  IN
**    A0  hTURBO
**    A1  NEW VALUE
**
**  PURPOSE
**    ADJUSTS THE CLIP ON THE TURBO THINGIE AND RESETS THE Z POSITION
**
** ADAPTED FROM JFL'S CODE, 13 APR 93
**

SET_TURBO_COUNT

	;TRUNCATE IF TOO HIGH
	CMPI	TURBOSINGLEMAX,A1
	JRLO	STC_VALOK
	MOVK	TURBOSINGLEMAX,A1

STC_VALOK
	SLL	4,A1	;SIZEOF CLIPTBL
	JRZ	STC_TOFF
	ADDI	TURBOBARCLIPTBL,A1
	MOVW	*A1,A1

	;BASE HEIGHT ON ORG IMG
	MOVL	*A0(OIMG),A2
	MOVW	*A2(ISIZEY),A14
	SUB	A1,A14			;SUBTRACT OUT TO FIND THE NEW SIZE
	JRP	STCTP
	RETS

STC_TOFF
	;TURN OFF
	SETF	1,0,0
	MOVE	SP,*A0(OCTRL+B_INUSE),0
	SETF	16,1,0
	JRUC	STCTX

STCTP
	;SET HEIGHT BY THROWING AWAY FROM THE BOTTOM
	MOVW	A14,*A0(OUSIZEY)

	;SET THE NEW ZPOS
	;ZPOS = TOPRIGHT + FULLSIZE - CURRENTSIZE
	MOVI	BS_SCRBOXPOS,A14
	ADDI	10h,A14
	MOVW	*A14,A14

	MOVW	*A0(OFULLSIZEY),A2
	ADD	A2,A14

	MOVW	*A0(OUSIZEY),A2
	SUB	A2,A14

	MOVW	A14,*A0(OZPOS)

	;TURN ON
	SETF	1,0,0
	MOVK	1,A1
	MOVE	A1,*A0(OCTRL+B_INUSE),0
	SETF	16,1,0

STCTX
	RETS


**
** CHARSEL_TIMER - PROCESS
**
**  IN
**    NONE
**
**  OUT
**    NONE
**
**  PURPOSE
**    KEEPS AN EYE ON THE INPUT WIDGETS.  AFTER TEN SECONDS WITH NO INPUT
**    OR THIRTY SECONDS TOTAL, IT HOTWIRES YOU THROUGH THE ENTER INITIALS
**    PROCESS.  MOVE ALONG, SON.  THAT'S IT.  KEEP RIIIIIGHT ON GOIN...
**
**  JMS 15 APR 93
**

EQUIP_TIMER

	;REG USE
	; A4  PLAYER 0 INPUT PORT
	; A5  PLAYER 1 INPUT PORT
	; A6  PLAYER 2 INPUT PORT
	; A7  TOTAL TIME ELAPSED
	; A8  TIME SINCE LAST INPUT
	; A9  BUTTON CHECKSUM

	;GET THE INPUT ADDRESSES
	CLR	A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A4
	INC	A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A5
	INC	A2
	CALLA	GETINPDATA ;IN:A2 PLNUM  OUT:A3 INPDATA
	MOVE	A3,A6

	;SET INITIAL CHECKSUM
	CALLR	GET_BUTTON_CHECKSUM ;IN:A4,A5,A6 PORT ADDRESSES  OUT:A0 SUM
	MOVE	A0,A9

	;CLEAR THE TIMERS
	CLR	A7
	CLR	A8

EQ_MAINLOOP
	MMTM	A12,A4,A5,A6,A7
	SLEEP	1
	MMFM	A12,A4,A5,A6,A7

	;INCREMENT THE TIMERS
	INC	A7
	INC	A8

	;IF OVER THIRTY SECONDS, SET EQUIP_OVERTIME FLAG
	CMPI	ONESECOND*30,A7
	JRGT	EQ_TIMEOUT

	;UPDATE CHECKSUM
	CALLR	GET_BUTTON_CHECKSUM ;IN:A4,A5,A6 PORT ADDRESSES  OUT:A0 SUM

	;COMPARE TO OLD
	CMP	A0,A9

	;IF NO CHANGE, MOVE ALONG
	JRZ	EQ_NONEWINPUT

	;NEW PRESS.  UPDATE THE CHECKSUM AND CLEAR THE INPUT TIMER
	MOVE	A0,A9
	CLR	A8
	JRUC	EQ_MAINLOOP

EQ_NONEWINPUT
	CMPI	ONESECOND*10,A8
	JRLE	EQ_MAINLOOP

	;TIME OUT BY NO INPUT
EQ_TIMEOUT
	MOVK	1,A14
	MOVW	A14,@EQUIP_OVERTIME

	DIE

* EOF
