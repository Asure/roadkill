***
*** FILE: AP.ASM
***
*** JFL 23 JUL 92; FROM DREDD; ADDED SNDRES & SNDPRC
*** JFL 29 JUL 92
*** JFL 09 DEC 92; DIRQ OVERHAUL
*** JFL 24 JAN 93
*** JFL 11 MAR 93
*** JFL 25 MAR 93; WIPEOUT WAITS FOR DISPLAY INT
*** JFL 12 APR 93; DISPATCH
***
 	.MLIB	"APMACS.LIB"
	.FILE	"AP.ASM"
	.TITLE	" <<< AMUSEMENT PARK -- VERSION 1.0 >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

*
*GET THE SYSTEM STUFF
*
	.INCLUDE	"AP.H"
	.INCLUDE	"STRING.H"
	.INCLUDE	"DRPRO.I"
	.INCLUDE	"DRDISP.I"

*** OTHERS USE
	.DEF	DISPATCHPROC	;AP.ASM
	.DEF	MAIN_INIT	;AP.ASM
	.DEF	MAIN_GO		;AP.ASM
	.DEF	SETUP		;AP.ASM
	.DEF	WIPEOUT		;AP.ASM
	.DEF	SWITCH_ESCAPE	;AP.ASM
	.DEF	POWERRET	;AP.ASM
	.DEF	WARMSET		;AP.ASM
	.DEF	PCMOSRET	;AP.ASM
	.DEF	CLSCRACH 	;AP.ASM
	.DEF	DIPINIT		;AP.ASM
	.DEF	WDOGDIS		;AP.ASM
	.DEF	WDISTAB		;AP.ASM
	.DEF	GRAMINIT	;AP.ASM
	.DEF	SLEEP_SWITCHX	;AP.ASM
	.DEF	INITDATA	;AP.ASM
	.DEF	IDATAEND	;AP.ASM
	.DEF	IDATALEN	;AP.ASM
	.DEF	EXEC_LP		;AP.ASM
	.DEF	PUSUMA		;AP.ASM
	.DEF	PUSUMB		;AP.ASM

*** WE USE
	.REF	FLP_FLUFF1	;DRWINSCR.ASM
	.REF	FLP_FLUFF2	;DRWINSCR.ASM
	.REF	DMAVCOUNT	;APD.ASM
	.REF	INITSND		;DRSND.ASM
	.REF	INITDISPLAYLISTS ;APD.ASM
	.REF	INITDMAQ	;APD.ASM
	.REF	INITONETIME	;DRI.ASM
	.REF	DMAQSTR0	;APD.ASM
	.REF	DMAQBOT0	;APD.ASM
	.REF	DMAQPRE0	;APD.ASM
	.REF	DMAQSTR1	;APD.ASM
	.REF	DMAQBOT1	;APD.ASM
	.REF	DMAQPRE1	;APD.ASM
	.REF	DMAQBOT		;APD.ASM
	.REF	DMAQPRE		;APD.ASM
	.REF	IMAGEROMSIZETBL	;DRAS.ASM
	.REF	PALTRANS	;APPALL.ASM
	.REF	PALFXINIT	;APPALL.ASM
	.REF	AUTOVELLIST	;DRRAM.ASM
	.REF	VELADD		;APD.ASM
	.REF	READSWITCHES	;DRINP.ASM
	.REF	INITINPUT	;DRINP.ASM
	.REF	PICKARENA		;DRATT.ASM

	.REF	GAME_STATE	;
	.REF	PAGEADDR	;
	.REF	WRAMEND		;

	.REF	SWITCHSTACK	;DRRAM.ASM
	.REF	SWITCHST	;DRRAM.ASM

	.REF	GAMERASE	;
	.REF	SYSCOPY		;
	.REF	GRAMEND		;
	.REF	SOUND_COPY	;
	.REF	OldAECol	;
	.REF	WAVEIRQS	;
	.REF	WRAMSTRT	;
	.REF	PAGE		;
	.REF	PAUSE_GAME	;
	.REF	NewAECol	;
	.REF	RAND		;
	.REF	NOAUTOE		;
	.REF	IRQSKYE		;
	.REF	GRAMSTRT	;
	.REF	NOPGFLIP	;

	.REF	RESETBUTTONCHECK	;DRATT.ASM
	.REF	ATTRACTPROC		;DRATT.ASM
	.REF	DRPROC			;DR.ASM
	.REF	FLP_BUY_EQUIPMENT	;DREQUIP.ASM
	.REF	FLP_ENTER_INITIALS	;DRINITAL.ASM
	.REF	FLP_SELECT_CHARACTER	;DRCHRSEL.ASM
	.REF	FLP_WIN_SCREEN		;DRWINSCR.ASM

	.REF	CHECKDMA	;DRAS.ASM
	.REF	SYSTEM_P	;DRI.ASM

*** WE USE -- RAM
	.REF	BOG		;APD.ASM
	.REF	INITOBJINITRAM	;DRAS.ASM

	.REF	COLRTEMP
	.REF	COINFLAG, TIMEINIT
	.REF	LCOIN, RCOIN, CCOIN, XCOIN, SCOIN, SLAM, COININT
	.REF	P_START, P_CONT, CR_STRTP, CR_CONTP
	.REF	COUNTER_ON, COUNTER_OFF
	.REF	READ_DIP, POWERTST, POWERCMOS
	.REF	DIAG, CKDIAG
	.REF	SECURITY
	.REF	DUMP_IT
	.REF	ROMTRAP
	.REF	SNDPRC
	.REF	SNDRES
	.REF	PROTECTION	;DRRAM.ASM


B_SRT	EQU	11

	.BSS	IRQLED,16
	.BSS	WDOGRAM,32	;INITIALIZED LONG FOR WATCH DOG DETECT
	.BSS	DIPSW,16	;RAM FAKE FOR NON-EXISTANT DIP SWITCHES
	.BSS	SWITCH_ESCAPE,16 ;SWITCH ESCAPE FLAG USED BY SLEEP_SWITCHX
	.DEF	BOGDMACPU
	.BSS	BOGDMACPU,32
	.IF DEBUG
DLCOUNT	EQU	000H	;UHL NUMBER OF LOCKUPS
DLNEXT	EQU	020H	;UHL PTR TO NEXT ENTRY
DLFIRST	EQU	9*20H	;UHL FIRST ENTRY
	.DEF	DMALOCK	;SO TV CAN ACCESS
	.BSS	DMALOCK,200*9*20H
	.BSS	DMALOCKX,0
	.BSS	INDIRQ,16
	.ENDIF ;DEBUG

	.SECT	"SECTFIRST"
	.TEXT
	.EVEN

	;
	;----- CHECKSUM & TIMING BEGINS HERE
	;

	.STRING "CCOOPPYYRRIIGGHHTT  ((CC))  11999922  MMIIDDWWAAYY  "
	.STRING "MMAANNUUFFAACCTTUURRIINNGG  CCOOMMPPAANNYY..  "
	.EVEN

POWERUP
SETUP
POWERRET
WARMSET
	;REG USE
	;  A0-A3 SCRATCH
	;  A4 CSUM COUNTER
	;  A5 CSUM VECS
	;  A6 CSUM STARTA
	;  A7 CSUM STARTB
	;  A8 REFCNT0
	;  A9 REFCNT1
	; A10 STATUS
	; A11 HOST ADR

	.IF DEBUG
	;SETUP AS IF RESET HAPPEND
	MOVK	10H,A0
	PUTST	A0
	MOVI	003CH,A0  		;RR = 11 (NO DRAM REFRESH)
	MOVW	A0,@CONTROL
	MOVW	@REFCNT,A0
	SLL	32-2,A0
	SRL	32-2,A0
	ORI	8<<2,A0
	MOVW	A0,@REFCNT	   	;SET REFCNT TO 8
	MOVI	0024H,A0		;RR = 00 (REFRESH EVERY 32 CYCLES)
	MOVW	A0,@CONTROL
	.ENDIF ;DEBUG
	GETST	A10			;GET STATUS
	DINT
	JRUC	PUSKIPCOPYRIGHT

	;STRING MUST BE WORD ALIGNED!!!
	.STRING	"COPYRIGHT (C) 1993 MIDWAY MANUFACTURING COMPANY!"
PUSUMVEC
	;
	;CHECKSUM VECTOR TABLE 
	;A0-A2 SCRATCH A3 EXGPC A4 CSUMCOUNT A5 CSUM
	;
	MOVI	0FFFFFC00H,A0		;START OF VECTORS
PUSVLOOP
	MOVL	*A0,A1
	MOVW	*A0+,A14
	RL	A4,A14
	INC	A4
	ADD	A14,A5			;ADD IN CSUM VALUE
	CMPI	POWERUP,A1		;LAST VEC IS TO POWER UP
	JRNE	PUSVLOOP
	EXGPC	A3
PUSUMA
	;
	;CHECKSUM RANGE
	;A0 START A1 END A2 SCRATCH A3 EXGPC A4 CSUMCOUNT A6 CSUM
	;
	MOVW	*A0+,A14
	RL	A4,A14
	INC	A4
	ADD	A14,A6
	CMP	A1,A0
	JRLO	PUSUMA
	EXGPC	A3
	
PUSUMB
	;
	;CHECKSUM RANGE
	;A0 START A1 END A2 SCRATCH A3 EXGPC A4 CSUMCOUNT A7 CSUM
	;
	MOVW	*A0+,A14
	INC	A4
	RL	A4,A14
	ADDC	A14,A7
	JRC	PUSB2
	RL	A7,A14
	XOR	A14,A7
PUSB2
	CMP	A1,A0
	JRLO	PUSUMB
	EXGPC	A3

PUSKIPCOPYRIGHT
	SETF	16,1,0
	SETF	32,1,1
	MOVW	@REFCNT,A8		;REFCNT0
	ZEXT	A8,W
	SRL	2,A8
	MOVB	@WDOG_BONE,A14		;ROVER JR GETS A SMALL BONE
	SLL	24,A14			;FOR NO REASON
	SRL	24,A14
	MOVW	A14,@CLEARROMTRAP	;WRITE ANYTHING TO CLEAR ROM CATCHER

	CLR	A4			;CSUMCOUNT
	CLR	A6			;CSUMSTARTA
	MOVI	ROM,A0			;START
	MOVI	PUCHECKX,A1		;END
	MOVI	PUSUMA,A3
	EXGPC	A3

	CLR	A7			;CSUMSTARTB
	MOVI	ROM,A0			;START
	MOVI	PUSUMB,A3
	EXGPC	A3

	CLR	A5	 		;CSUMVEC
	MOVI	PUSUMVEC,A3
	EXGPC	A3

	MOVL	@HSTADRL,A11		;GET HOST ADR
PUCHECKX
	
	;
	;----- CHECKSUM ENDS HERE
	;

	MOVI	STCKST,SP

	.IF 0 ;COPY
	MOVI	ROM,B0
	GETPC	B1
	MOVI	SCRATCH,B2
PULOOP
	MOVL	*B0+,*B2+
	CMP	B1,B0
	JRLO	PULOOP
	JRUC	$
	.ENDIF ;COPY

	;CLEAR SCRATCH RAM
	CLR	B0
	MOVI	SCRATCH,B1
	MOVI	(SCRATCHX-SCRATCH)/32,B2
PUCLR
	MOVL	B0,*B1+
	DSJ	B2,PUCLR

	MOVI	PROTECTION,A9
	MOVL	A5,*A9(PROCSUMVECS)
	MOVL	A6,*A9(PROCSUMSTARTA)
	MOVL	A7,*A9(PROCSUMSTARTB)
	MOVW	A8,*A9(PROREFCNT0)
	MOVL	A10,*A9(PROSTATUS0)
	MOVL	A11,*A9(PROHSTADRL)

	;GET TIMING TO HERE
	MOVW	@REFCNT,A14
	ZEXT	A14,W
	SRL	2,A14
	MOVW	A14,*A9(PROREFCNT1)


	;
	;----- TIMING ENDS HERE
	;

	.IF DEBUG  ; ------ CHECK PROTECTION VALUES ------

	MOVI	ROM,A0
	MOVI	PUCOPY,A1
	MOVI	PUCHECKX,A2
PUCMPLOOP
	MOVL	*A0+,A4
	MOVL	*A1+,A5
	CMP	A4,A5
	JREQ	PUCLOK
	JRUC	$
PUCLOK
	CMP	A2,A0
	JRLO	PUCMPLOOP
	
	CMPI	VPROCSUMSTARTA,A6
	LOCKON	NE
	CMPI	VPROCSUMSTARTB,A7
	LOCKON	NE

	SUBI	VPROREFCNT0-VPROREFCNT0SLUFF,A8
	JRN	PURC0BAD	      	;TOO SMALL
	SUBK	2*VPROREFCNT0SLUFF,A8
	JRN	PURC0OK
PURC0BAD
	;-- NOT NOW LOCKUP
PURC0OK
	
	.ENDIF ;DEBUG  ------ CHECK PROTECTION VALUES ------


	;
	;CHECK FOR IMAGE ROM OVERRUNS
	;

	.IF DEBUG
	MOVL	@IMAGEROMSIZETBL+00H,A0
	MOVL	*A0(ISAG),A0
	CMPI	3000000H,A0
	TLOCKON	HS ;IMAGE ROM 2000000 HAS OVERFLOW
	MOVL	@IMAGEROMSIZETBL+20H,A0
	MOVL	*A0(ISAG),A0
	CMPI	4000000H,A0
	TLOCKON	HS ;IMAGE ROM 3000000 HAS OVERFLOW
	MOVL	@IMAGEROMSIZETBL+40H,A0
	MOVL	*A0(ISAG),A0
	CMPI	5000000H,A0
	TLOCKON	HS ;IMAGE ROM 4000000 HAS OVERFLOW
	MOVL	@IMAGEROMSIZETBL+60H,A0
	MOVL	*A0(ISAG),A0
	CMPI	6000000H,A0
	TLOCKON	HS ;IMAGE ROM 5000000 HAS OVERFLOW
	.ENDIF ;DEBUG

	.IF DEBUG
	MOVI	DMALOCK,A0
	CLR	A1
	MOVL	A1,*A0(DLCOUNT)
	MOVL	A1,*A0(DLNEXT)
	.ENDIF ;DEBUG

	DISPOFF
	MOVI	SYSCINIT,A0		; 
	MOVE	A0,@SYSCOPY,W
	MOVE	A0,@SYSCTRL,W		; GET EVERYBODY HAPPY
	MOVI	INDIAG,A0
	MOVW	A0,@GAME_STATE
	CALLA	INITDISPLAYLISTS
	CALLR	DIPINIT
	JAUC	POWERCMOS		;VERIFY CMOS AND PRINT OPENING MESSAGE
PCMOSRET
	CALLR	MAIN_INIT	;DO NORMAL INITIALIZATIONS
	CALLA	TIMEINIT	;WHY MUST WE DO THIS?
	;CALLA	CHECKDMA ;SCRATCH:A0-A11
	EINT			;ENABLE INTERRUPTS AND WE'RE OFF
	;DISPON			;ENABLE THE DISPLAY SYSTEM
	;CALLA	CKDIAG		;ARE ANY OF THE DIAG SWITCHES CLOSED?
	;JRUC	MAIN_GO		;BR = NO, CHECK THE GUN STUFF
	;CREATE	DIAG_PID,DIAG	;FIRE OFF THE DIAG PROCESS
	;JRUC	EXEC_LP		;AND THEN DISPATCH IT.
MAIN_GO
	CALLA	INITONETIME
	CALLA	INITINPUT
	CLR	A0
	MOVE	A0,@COINFLAG,W	; NOT ON COIN PAGE YET

	;CREATE OUR MAIN PROCESS
	CREATE	PID_MAIN,DISPATCHPROC

	JRUC	EXEC_LP

***
*** -------------------------------------------------------------------
***

INUSERSTATE	EQU	INATTMODE	;STATES < THIS ARE FOR SYSTEM STUFF

**
** DISPATCHPROC -- PROC
**
** JFL 18 MAR 93
**
DISPATCHPROC
	;CLEAN UP AFTER THE LAST PROCESS

	DISPOFF

	;SLEEP	1 ;TAKEN OUT JFL 16 APR 93
	CALLA	WIPEOUT ;INIT FOR NEW WAVE

	DISPON

	;DEBUG JFL 15 APR 93
;	JRUC	DP_INBUYEQUIP
	;DEBUG JFL 15 APR 93

	MOVW	@GAME_STATE,A0

	;DO A BIG SWITCH
	CMPI	INUSERSTATE,A0
	JRLO	DP_INUSERSTATE	;DOING SYSTEM STUFF.

	CMPI	INFLUFFMODE1,A0
	JREQ	DP_INFLUFFMODE1

	CMPI	INFLUFFMODE2,A0
	JREQ	DP_INFLUFFMODE2

	CMPI	INGAME,A0
	JREQ	DP_INGAME

	CMPI	INATTMODE,A0
	JREQ	DP_INATTMODE

	CMPI	INENTERINITS,A0
	JREQ	DP_INENTERINITS

	CMPI	INSELECTCHAR,A0
	JREQ	DP_INSELECTCHAR

	CMPI	INBUYEQUIP,A0
	JREQ	DP_INBUYEQUIP

	CMPI	INWINMODE,A0
	JREQ	DP_INWINMODE

	;BAD GAME_STATE
	TLOCKUP
	DIE

DP_INUSERSTATE
	;DOING SYSTEM STUFF.  NOW DO FLUFF1
	CREATE	PID_MAIN,FLP_FLUFF1
	JRUC	DP_END

DP_INGAME
	;A BATTLE HATH ENDED.  GO TO WIN MODE
	CREATE	PID_MAIN,FLP_WIN_SCREEN
	JRUC	DP_END

DP_INENTERINITS
	;DONE ENTERING INITIALS.  NOW CHOOSE CHARACTER
	CREATE	PID_MAIN,FLP_SELECT_CHARACTER
	JRUC	DP_END

DP_INSELECTCHAR
	;DONE SELECTING CHARACTER.  NOW BUY EQUIPMENT
	CREATE	PID_MAIN,FLP_BUY_EQUIPMENT
	JRUC	DP_END

DP_INFLUFFMODE1
	;DONE WITH THE TITLE.  NOW HIT THE INITIALS
	CREATE	PID_MAIN,FLP_ENTER_INITIALS
	JRUC	DP_END

DP_INFLUFFMODE2
	;DONE WITH THE TITLE BETWEEN BATTLES.  NOW GO TO EQUIP
	CREATE	PID_MAIN,FLP_BUY_EQUIPMENT
	JRUC	DP_END

DP_INATTMODE
	TLOCKUP
DP_INBUYEQUIP
	;DONE BUYING EQUIPMENT.  NOW DO ANOTHER BATTLE.
	CALLA	PICKARENA
	CREATE	PID_MAIN,DRPROC
	JRUC	DP_END

DP_INWINMODE
	;DONE WITH WIN MODE.  NOW FLASH THE TITLE
	CREATE	PID_MAIN,FLP_FLUFF2
	JRUC	DP_END

DP_END
	DIE


;	;CHECK IF WE ARE DOING SYSTEM STUFF
;	CMPI	INUSERSTATE,A0
;	JRLO	DPATT			;YES -- DO ATTRACT NOW
;
;	;SWITCH BETWEEN USER PROCESSES
;	CMPI	INGAME,A0
;	JREQ	DPATT
;
;	CREATE	PID_MAIN,DRPROC
;	DIE
;DPATT
;	CREATE	PID_MAIN,ATTRACTPROC
;	DIE

***
*** -------------------------------------------------------------------
***


**
** DIRQ
**
** JFL 08 DEC 92
** JFL 09 DEC 92; GLITCHLESS UNDER EXTREME BOG
** JFL 22 JAN 93; SETS DMA_WINDOW TOP BOTTOM
** JFL 25 JAN 93
** JFL 25 FEB 93
** JFL 03 MAR 93; CLEANUP & READ SWITCHES FROM HERE
** JFL 11 MAR 93
**
	.ALIGN ;CACHE BOUNDRY
DIRQ
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	MMTM	SP,B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B14

	;REG USE
	;  A0-A6,A8-A14 SCRATCH
	;  A7 DPYCTL RESTORE VALUE
	;  A8 DPYCTL
	;  B0,B2-B3 SCRATCH
	;  B1 DMA_WINDOW FLAG (NZ TO RESET)
	;  B4 INDIRQ ADR
	;  B5 WAVEIRQS

	;RESET AND DISABLE THIS INTERRUPT
	SETF	1,0,0
	MOVE	SP,@INTPEND+DIP,0		;CLEAR PENDING DIRQ
	MOVE	SP,@INTENB+DIP,0		;DISABLE DIRQ
	SETF	16,1,0
	
	;RESTART DMA & LOAD SHIFT REGISTER FOR POSSIBLE SCREEN CLEAR
	MOVI	DPYCTL,A8
	MOVW	*A8,A7			;>Shift register read to restart DMA
	MOVI	NIL|DXV|SRT|10H,A0
	MOVW	A0,*A8
	MOVI	AUTOELINE*ROWBITS,A2	;*Autoerase lines
	PIXT	*A2,A2			;Mem to shift reg xfer

	EINT 				;JFL 09 DEC 92 -- AFTER PIXT!

	;BUMP UP IN IRQ COUNT
	MOVI	INDIRQ,B4
	MOVW	*B4,B0
	INC	B0
	MOVW	B0,*B4

	CLR	B1			;DMA_WINDOW DEFAULTS TO NOT BE RESET

	;CHECK IF WE HAVE REENTERED
	SUBK	1,B0			;CHECK FOR > 1
	JRP	DIHOLDDISPLAYCPU	;WE HAVE REENTERED

	;
	;SEE IF WE HAVE DMA BOG
	;

	;CHECK FOR ANY DMA LEFT IN THE Q
	MOVE	B13,B0
	CMP	B12,B0
	JRLS	DIDMAQEMPTY
	
	;CHECK IF DMA WAS RUNNING... THIS NEEDS TO BE LOOKED INTO FURTHER..
	MOVE	B11,B11
	JRZ	DIDMAQEMPTY

	;Q IS NOT EMPTY, CHECK IF DMA IS LOCKED UP
	MOVI	(4096*MICRO_SECOND)/4,A1	;MAX WAIT FOR 400X256 DMA
DIQWAIT1
	CMP	B13,B0			;DMA Q CHANGE?
	JRNE	DIHOLDDISPLAYDMA  	;BR = YES, WE'RE OK
	DSJ	A1,DIQWAIT1
	
	;DOORKNOB DIAGNOSTICS USE B13
	MOVW	@GAME_STATE,A0
	CMPI	INGAME,A0
	JRNE	DINEWDISPLAY

	.IF DEBUG
	;TLOCKUP	;I WANT TO SEE THIS ACTUALLY HAPPEN
	NOP	;B13 NOW POINTS TO ENTRY THAT LOCKED THE DMA

	;RECORD DMA LOCKUP
	MOVI	DMALOCK,A1
	MOVL	*A1(DLCOUNT),A2
	INC	A2
	MOVL	A2,*A1(DLCOUNT)
	MOVL	*A1(DLNEXT),A2
	JRNZ	DLLOGIT
	MOVE	A1,A2
	ADDI	DLFIRST,A2
DLLOGIT
	CMPI	DMALOCKX,A2
	JRHS	DLLOGX
	MOVE	B13,A3
	MOVL	*A3+,*A2+
	MOVL	*A3+,*A2+
	MOVL	*A3+,*A2+
	MOVL	*A3+,*A2+
	MOVL	*A3+,*A2+
	MOVL	*A3+,*A2+
	MOVE	B11,A14
	MOVL	A14,*A2+
	MOVE	B12,A14
	MOVL	A14,*A2+
	MOVE	B13,A14
	MOVL	A14,*A2+
	MOVL	A2,*A1(DLNEXT)
DLLOGX
	.ENDIF ;DEBUG
	
	;RESET DMA
	DINT
	SETF	1,0,0
	MOVE	SP,@(INTENB+B_X1E),0	;DISABLE DMAINT
	SETF	16,1,0
	CLR	B11			;SIGNAL DMA IS STOPPED
	MOVW	B11,@DMACTRL		;ZERO
	MOVW	B11,@DMACTRL		;ZERO
	MOVW	@INTENB,A14
	BTST	B_X1E,A14
	JRNZ	$
	EINT
	JRUC	DINEWDISPLAY

DIDMAQEMPTY

	;
	;CHECK FOR CPU BOG
	;
	MOVW	@TIMER,A14
	JRZ	DINEWDISPLAY

DIHOLDDISPLAYCPU
	;RECORD CPU BOG
	MOVW	@BOGDMACPU,A14
	INC	A14
	MOVW	A14,@BOGDMACPU

	JRUC	DIHOLDANY

DIHOLDDISPLAYDMA
	;RECORD DMA BOG
	MOVW	@BOGDMACPU+10H,A14
	INC	A14
	MOVW	A14,@BOGDMACPU+10H

DIHOLDANY

	DINT

	;ENABLE DISPLAY INT 
	SETF	1,0,0
	MOVK	1,A0
	MOVE	A0,@INTENB+DIP,0	;ENABLE DIRQ
	SETF	16,1,0

	;RESET DPYCTL & SKIP FRAME
	MOVW	A7,*A8			;Restore DPYCTL RESTORE
	JRUC	DIRQBOGORNOT

	;
	;NEW DISPLAY (FLIP,ERASE)
	;

DINEWDISPLAY

	;RELOAD DMA Q POINTERS HERE IN CASE PAGE FLIP DOESNT HAPPEN
	MOVL	@DMAQPRE,B12
	MOVL	@DMAQBOT,B13

	;
	;SWAP PAGES
	;
	MOVW	@NOPGFLIP,A0
	JRNZ	DICLS

	;GET PAGE WE ARE ON
	MOVW	@PAGE,A0
	JRNZ	DIS1

	;SELECT TO DISPLAY PAGE0, DRAW PAGE1
	MOVI	DPYSTRT0,A2		;DISPLAY PAGE 0
	MOVI	SCRHGHT*ROWBITS,B2	;CLEAR PAGE 1
	MOVI	PAGE1ADR,A1		;DRAW PAGE 1
	MOVI	[1FDH,100H],B1		;DMA_WINDOW BOT:TOP
	MOVI	DMAQBOT1,B13		;DMAQ BOTTOM
	MOVL	@DMAQPRE1,B12		;DMAQ PRELOADED	
	JRUC	DISSET

DIS1
	;SELECT TO DISPLAY PAGE1, DRAW PAGE0
	MOVI	DPYSTRT1,A2		;DISPLAY PAGE 1
	CLR	B2			;CLEAR PAGE 0
	MOVI	PAGE0ADR,A1		;DRAW PAGE 0
	MOVI	[0FDH,0],B1		;DMA_WINDOW BOT:TOP
	MOVI	DMAQBOT0,B13		;DMAQ BOTTOM
	MOVL	@DMAQPRE0,B12		;DMAQ PRELOADED	

DISSET
	NOT	A0			;FLIP PAGE
	MOVW	A0,@PAGE
	MOVL	A1,@PAGEADDR
	MOVW	A2,@DPYADR		;Override DPYSTRT
	MOVW	A2,@DPYSTRT		;If we don't page flip next time
	MOVL	B12,@DMAQPRE		;SET IN CASE WE DONT FLIP
	MOVL	B13,@DMAQBOT		;SET IN CASE WE DONT FLIP

DICLS

	;WAIT FOR DMA -- CANT DO SRT UNTIL DMA IS DONE
	DINT	
	MOVI	12345678H,A14	;DEBUG
	MOVI	26000/8,A1
DIQWAIT3
	MOVW	@DMACTRL,A0
	JRNN	DIQW3OK
	DSJ	A1,DIQWAIT3
	TLOCKUP
	CLR	B11		;SIGNAL DMA IS STOPPED
	MOVW	B11,@DMACTRL
	MOVW	B11,@DMACTRL
DIQW3OK

	;
	;CLEAR THE SCREEN
	;

	;--- BEGIN SHAWN SRT_CLR
	MOVW	@NOAUTOE,A14
	JRNZ	SRTDONE

	movi	CONTROL,a9		;>Clear whole page
	move	*a9,a6
	movk	8,a0
	move	a0,*a9			;Transparency off
	movk	16,a0
	move	a0,@PSIZE
	movi	SCRN_PTCH*2,b3		;Pitch (2 lines)
	MMTM	SP,b10,b11,b12,b13,b14
	movi	[127,1],b7		;Rows:Columns
	fill	l
	MMFM	SP,b10,b11,b12,b13,b14

	move	a6,*a9			;Restore
	movk	PXSIZE,a0
	move	a0,@PSIZE		;Normal

SRTDONE
	move	a7,*a8			;Restore DPYCTL RESTORE
	EINT
	;--- END SHAWN SRT_CLR
	
	;
	;SET UP DMA TRANSFER TO RESTUFF AUTOERASE COLOR
	;
	MOVW	@NewAECol,A1
	MOVW	@OldAECol,A0
	CMP	A0,A1
	JREQ	SkSetAE

	MOVW	A1,@OldAECol 
	;*** STUFF CORRECT COLOR IN AUTOERASE LINES ***
	movi	DMAREGS,A1
	MOVI	01FF01FEH,A0
	MOVE	A0,*A1,L	;WINDOW BOTTOM:TOP
	MOVI	01000100H,A0
	MOVE	A0,-*A1,L	;Y-SCALE:X-SCALE
	move	@OldAECol,A0
	sll	16,a0
	MOVE	A0,-*A1,L	;CONST:PALETTE
	movi	[2,512],A0
	MOVE	A0,-*A1,L	;VSIZE:HSIZE
	movi	[510,0],A0
	move	A0,-*A1,L	;DESTINATION Y:X
	movi	02000000H,A0
	MOVE	A0,-*A1,L	;IMAGE SAG
	movi	DMACAL<<16,A0	
	MOVE	A0,-*A1,L		;STUFF THE CONTROL:OFFSET
SkSetAE
	MOVW	@IRQSKYE,@ERASELOC	;MOVE IN THE CORRECT COLOR

	;
	;TRANSFER PALETTES & COLOR CYCLE
	;
	MOVW	@DISPLAYON,A0
	JRZ	DINOPAL

	;TRANSFER PALETTE DATA & DO COLOR CYCLING
	MOVI	PALTRANS,B8 ;SC:A0-A11
	EXGPC	B8

DINOPAL

	;
	;SET PROCESS PRIORITY
	;
	MOVW	@PRIORITY,A0	;ARE WE PROCESSING THE PRIORITY LIST?
	JRNZ	SkSetPri	;BR = YES
	CLR	A0
	DEC	A0
	MOVW	A0,@PRIORITY	;MAKE SURE IT IS PROCESSED IMMEADIATELY
SkSetPri

	;ENABLE DISPLAY INT 
	SETF	1,0,0
	MOVK	1,A0
	MOVE	A0,@INTENB+DIP,0	;ENABLE DIRQ
	SETF	16,1,0

	;SET THE DMA_WINDOW IF WE FLIPPED PAGES
	MOVE	B1,B1
	JRZ	DISAMEWINDOW
	MOVL	B1,@DMATPLFT		;WINDOW BOTTOM:TOP

DISAMEWINDOW

	MOVW	@DISPLAYON,A0
	JRZ	DINODISPLAY

	;FILL THE DMAQ FROM OBJ LISTS
	CALLA	DISPLAY	;SC:A0-A14

	;MOVE THINGS
 	MOVW	@PAUSE_GAME,A14		;ARE WE IN PAUSE MODE?
	JRNZ	DINODISPLAY
	MOVL	@AUTOVELLIST,A0
	JRZ	DINODISPLAY
	CALLA	VELADD ;IN:A0 OBJ SC:A1-A14

DINODISPLAY

	DINT

DIRQBOGORNOT

	;
	;DO THIS UNDER BOG OR NOT
	;

	;BUMP UP PROCESS TIMER
	MOVI	TIMER,A0
	MOVW	*A0,A1
	INC	A1
	MOVW	A1,*A0
	SRL	7,A1			;CHECK FOR 0..127
	JRZ	NO_IRQDOG
	DINT
	JRUC	$			;HANG AND LET THE DOG BITE.
NO_IRQDOG

	;
	;BUMP UP IRQ COUNT
	;THIS MUST EXECUTE ALL THE TIME SO SWITCH STUFF CAN BE PROPERLY
	;TIMED...
	;DONT DIRECTLY CLR WAVEIRQS!!! USE WIPEOUT
	;
	MOVI	WAVEIRQS,B6
	MOVL	*B6,B5

	;
	;READ SWITCHES
	;THIS MUST MUST MUST EXECUTE EVERY DIRQ AS COIN SWITCHES ARE DONE 
	;HERE
	;
	MOVE	B5,A11
	MOVI	READSWITCHES,B8 ;IN:A11,B8 WAVEIRQS,PC
	EXGPC	B8

	;CHECK FOR 1 IN 16
	MOVE	B5,A14
	SLL	32-4,A14
	JRNZ	DIRQNOBONE
	
	;
	;DO EVERYTHING FROM HERE TO DIRQX EVERY SO OFTEN
	;WATCH DOG NOT TO EXCEED 1 SECOND BETWEEN BONES...
	;

	MOVI	SYSCOPY,A1
	MOVW	*A1,A0		;BLINK L.E.D. TO ACK OPERATION
	MOVK	4,A14
	XOR	A14,A0
	MOVW	A0,*A1
	MOVW	A0,@SYSCTRL

	;HONEY! WOULD YOU FEED THE DOG?
	MOVB	@WDOG_BONE,A0	;ROVER JR GETS A SMALL BONE

	.IF DEBUG
	.REF	end		;LINKER SUPPLIES
	;CHECK FOR STACK OVERFLOWS
	CMPI	end,SP		;END OF BSS
	TLOCKON	LS
	.ENDIF ;DEBUG

DIRQNOBONE
	;BUMP UP WAVEIRQS	
	INC	B5
	MOVL	B5,*B6

	.IF DEBUG	
	CMPI	WAVEIRQS,B6
	LOCKON	NE
	.ENDIF ;DEBUG

	;OUT DIRQ
	MOVI	INDIRQ,B4
	MOVW	*B4,B0
	DEC	B0
	MOVW	B0,*B4

	MMFM	SP,B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B14
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	RETI

***
*** EXECUTIVE LOOP -------------------------------------------------------
***

EXEC_LP	
	CALLA	PRCDSP		;DISPATCH PROCESSES
	MOVE	A13,A13		;DID PROCESS EXECUTE CORRECTLY?
	JRZ	EXEC_LP	;BR = YES
	TLOCKUP			;REPORT THE SITUATION
	JRUC	EXEC_LP

PUCOPY
	.word	04343h, 04F4Fh, 05050h, 05959h, 05252h, 04949h, 04747h, 04848h
	.word	05454h, 02020h, 02828h, 04343h, 02929h, 02020h, 03131h, 03939h
	.word	03939h, 03232h, 02020h, 04D4Dh, 04949h, 04444h, 05757h, 04141h
	.word	05959h, 02020h, 04D4Dh, 04141h, 04E4Eh, 05555h, 04646h, 04141h
	.word	04343h, 05454h, 05555h, 05252h, 04949h, 04E4Eh, 04747h, 02020h
	.word	04343h, 04F4Fh, 04D4Dh, 05050h, 04141h, 04E4Eh, 05959h, 02E2Eh
	.word	02020h, 01A00h, 001A0h, 009C0h, 0003Ch, 00580h, 000B0h, 0C000h
	.word	005A0h, 001F0h, 0C000h, 027C0h, 02C40h, 00BA0h, 00020h, 00000h
	.word	00580h, 001F0h, 0C000h, 009C0h, 00024h, 00580h, 000B0h, 0C000h
	.word	0018Ah, 00360h, 0C035h, 04F43h, 05950h, 04952h, 04847h, 02054h
	.word	04328h, 02029h, 03931h, 03339h, 04D20h, 04449h, 04157h, 02059h
	.word	0414Dh, 0554Eh, 04146h, 05443h, 05255h, 04E49h, 02047h, 04F43h
	.word	0504Dh, 04E41h, 02159h, 009C0h, 0FC00h, 08601h, 0940Eh, 0688Eh
	.word	01024h, 041C5h, 00B61h, 0FCEFh, 0007Fh, 0CBF7h, 00123h, 0940Eh
	.word	0688Eh, 01024h, 041C6h, 04820h, 0C8FAh, 00123h, 0940Eh, 01024h
	.word	0688Eh, 043C7h, 0C802h, 068EEh, 057C7h, 04820h, 0C8F7h, 00123h
	.word	00570h, 00760h, 005A8h, 001F0h, 0C000h, 00528h, 02FC8h, 007EEh
	.word	01070h, 001D8h, 0270Eh, 02D0Eh, 0058Eh, 00000h, 001E0h, 05684h
	.word	056C6h, 009E0h, 00000h, 0FF80h, 009E1h, 00AB0h, 0FF80h, 009E3h
	.word	006F0h, 0FF80h, 00123h, 056E7h, 009E0h, 00000h, 0FF80h, 009E3h
	.word	00760h, 0FF80h, 00123h, 056A5h, 009E3h, 00630h, 0FF80h, 00123h
	.word	007ABh, 000D0h, 0C000h, 009EFh, 0FFF0h, 0013Fh, 009F0h, 00000h
	.word	0FF80h, 00151h, 00000h


***
*** -----------------------------------------------------------------------
***

FASTSCRATCHTEST
	PULL	A4
	MOVI	SCRATCH,A0
	MOVI	SCRATCHX,A1
FSTLOOP
	MOVL	A0,*A0+
	CMP	A1,A0
	JRLO	FSTLOOP

	MOVI	100000*MICRO_SECOND,A0
FSTWAIT	
	MOVW	@FSTWAIT,A14
	DSJ	A0,FSTWAIT
	
	MOVI	SCRATCH,A0
	MOVI	SCRATCHX,A1
FSTLOOP2
	MOVL	*A0,A2
	CMP	A0,A2
	TLOCKON	NE
	ADDK	32,A0
	CMP	A1,A0
	JRLO	FSTLOOP2
	JUMP	A4
	
**************************************************************************
*								         *
* MAIN_INIT - CUMBERSOME SYSTEM INITIALIZATION STUFF, USED TO BRING	 *
* 		UP THE SYSTEM COLD.					 *
* 	    RAM MUST BE O.K., STACK POINTER VALID AND FIELDS SET.	 *
* RETURNS								 *
* 	A13 = PROCESS ACTIVE LIST					 *
*								         *
**************************************************************************
MAIN_INIT
	PUSH	A0
	MOVI	ININITMODE,A0
	MOVW	A0,@GAME_STATE
	MOVI	WDOGNUM,A0
	MOVE	A0,@WDOGRAM,L		;MARK SYSTEM AS INITIALIZED 
	MOVI	0FFFFH,A0
	MOVE	A0,@SOUND_COPY,W	;INITIALIZE THE SOUND PORT COPY
*RESET THE SOUND BOARD
	CALLR	INITIO			;INITIALIZE THE I/O REGS
	CALLA	SNDRES			;JFL
	CALLA	INITSND
	CALLA	INITDMAQ		;RESTART DMA & DMAQ
	CALLR	INIT_DMA_WINDOW		;INITIALIZE DMA WINDOW
*SET UP TI PIXEL PROCESSING REGS
	CALLA	SETPPROC
*INIT COLOR RAM 
	CLR	A0
	MOVE	A0,@CMAPSEL		;CLEAR COLOR MAP SELECT
	MOVE	A0,@IRQLED
*CLEAR THE SCREEN
	CALLA	SCRCLR
*INITIALIZE RANDOM SEED
	MOVI	81261A8CH,A0
	MOVE	A0,@RAND,L
*ENABLE DISPLAY, EXT1 INTERRUPT
	.IF YUNIT
	MOVI  	DIE|X2E,A0 
	.ENDIF ;YUNIT
	.IF TUNIT
	MOVI  	DIE|X2E,A0 			;TUNIT
	.ENDIF ;TUNIT
	MOVE  	A0,@intenb		;enable display interrupts

	;
	;INITIALIZE SWITCH STACK
	;
	MOVI	SWITCHST,A0
	MOVL	A0,@SWITCHSTACK

*INITIALIZE SYSTEM CONTROL REGISTER
	MOVI	SYSCINIT,A0
	MOVE	A0,@SYSCTRL,W
	MOVE	A0,@SYSCOPY,W		;KEEP A COPY IN RAM
*INITIALIZE DIP SWITCH OPTIONS
	CALLR	DIPINIT
*CLEAR ALL PLAYER DATA AREAS
*INITIALIZE PROCESS AND DISPLAY LISTS AND START THE SYSTEM
	CALLA	PINIT 		;INIT PROCESS LIST
	CALLA	OINIT		;DO THIS FIRST FOR THE DMA'S SAKE
	PULL	A0
	RETS

**************************************************************************
*								         *
* INIT_DMA_WINDOW - INITIALIZE THE DMA WINDOW				 *
*								         *
**************************************************************************
INIT_DMA_WINDOW
	MMTM	SP,A0,A1
	MOVI	DMACONFIG,A0		;WFD
	MOVI	DMACF4,A1
	MOVE	A1,*A0,W		;CLR WIN BIT IN CONFIG
	MOVI	DMATPLFT,A0
	MOVI	[511,0],a1		;shawns clip fix
	MOVE	A1,*A0,L   		;WINDOW RIGHT - LEFT
	MOVI	DMACONFIG,A0
	MOVI	DMAYWIN|DMACF4,A1
	MOVE	A1,*A0,W		;SET WIN BIT IN CONFIG
	MMFM	SP,A0,A1
	RETS

**************************************************************************
*                                                                        *
* DIPINIT - INITIALIZE OPTIONS VIA DIP SWITCH SETTINGS			 *
*                                                                        *
**************************************************************************
DIPINIT:
	MMTM	SP,A0,A1

	CALLA	READ_DIP		;LOAD UP THE CURRENT DIP SWITCH BITS
	MOVE	A0,A1	   		;STORE FOR MULTIPLE USES

	MMFM	SP,A0,A1
	RETS

DUMRETS
DUMCOL
	RETS

**
** WIPEOUT 
**
** WIPES MOST THING CLEAN -- FOR USE BETWEEN WAVES
**
** JFL 24 FEB 93
** JFL 16 OCT 92
** JFL 18 OCT 92
** JFL 25 MAR 93; CLEANED UP
**
WIPEOUT
	MMTM	SP,A0,A1,A7

	;
	;WAIT FOR DIRQ TO HIT
	;
	GETST	A14
	BTST	21,A14
	JRZ	WONOINT			;NOT ENABLED
	MOVW	@INTPEND,A14
	BTST	DIP,A14
	JRNZ	WONOINT			;ALREADY PENDING..
	MOVW	@INTENB,A14
	BTST	DIP,A14
	JRZ	WONOINT			;NOT ENABLED..
	MOVL	@WAVEIRQS,A0
	JRZ	WONOINT			;MAY NOT BE WORKING..
WOWAIT
	MOVL	@WAVEIRQS,A14
	CMP	A0,A14
	JREQ	WOWAIT
WONOINT

	;
	;DO WIPE OUT STUFF
	;

	PUSHST
	DINT	;--------------------- DISABLE INTERRUPTS

	CLR	A0
	MOVE	A0,@GAMERASE,W
	MOVE	A0,@DISPLAYON,W		;TURN THE DISPLAY PROCESSOR OFF
	MOVE	A0,@PAGE,W
	MOVE	A0,@COINFLAG,W		;NOT ON COIN PAGE YET
	MOVE	A0,@PAUSE_GAME,W	;TURN OFF GAME PAUSE
	MOVE	A0,@NOPGFLIP,W		;ALLOW PAGE FLIPPING

	CALLA	INITDMAQ
	CALLR	KILL_DESTRUCTIBLES

	POPST	;--------------------- RE-ENABLE INTERRUPTS

	CALLA	CLRPAL
	CALLA	PALFXINIT
	CALLA	INITDISPLAYLISTS 
	CALLA	OINIT
	CALLR	SYSINITL

	MOVW	@INTPEND,A1		;CLEAR INTERRUPT PENDING
	ANDNI	DIE,A1
	MOVW	A1,@INTPEND

	;CALLR	CLR_SCRN		;WIPE OUT THE BIT MAP
	CALLR	IAUTOE			;INITIALIZE THE AUTO ERASE AREA
	CLR	A0
	MOVW	A0,@IRQSKYE		;CLR THE AUTO-ERASE COLOR
	MOVI	NORMDPYS,A0
	MOVW	A0,@DPYSTRT		;RESET DISPLAY START POINT

	CLR	A14
	MOVL	A14,@WAVEIRQS
	MOVL	A14,@SCRNTL
	MOVI	[SCRBOT,SCRRGT],A14
	MOVL	A14,@SCRNLR

	;TYPE OF AUTOERASE
	MOVK	1,A14
	MOVW	A14,@GAMERASE

	;
	;GAME SPECIFIC
	;

	;LOAD SYSTEM PAL FIRST
	MOVI	SYSTEM_P,A0
	CALLA	GETFPAL ;IN:A0

	CALLA	INITOBJINITRAM

	MMFM	SP,A0,A1,A7
	RETS

**************************************************************************
*								         *
* KILL_DESTRUCTIBLES - KILL ALL OF THE DESTRUCTIBLE PROCESSES CURRENTLY	 *
* 		     ACTIVE.						 *
*								         *
**************************************************************************
KILL_DESTRUCTIBLES
	MMTM	SP,A0,A1,A7
	CLR	A0
	MOVI	08000H,A1
	CALLA	KILALL			;KILL ALL BUT THE INDESTRUCTIBLES
	MMFM	SP,A0,A1,A7
	RETS

**************************************************************************
*								         *
* SLEEP_SWITCHX - SLEEP THE GIVEN NUMBER OF TICKS ESCAPING IF		 *
* 		A CONTROL PANEL BUTTON IS PRESSED. USE THIS		 *
* 		TO SLEEP DURING LENGTHY INTRO SCREENS.			 *
* A0 = # OF TICKS TO SLEEP						 *
* RETURNS:								 *
* 	 Z = NO ESCAPE SWITCH DETECTED DURING SLEEP			 *
* 	NZ = ESCAPE SWITCH DETECTED					 *
* NOTE: CALL WITH JSRP							 *
*								         *
**************************************************************************
SLEEP_SWITCHX:
	PUSHP	A11
	MOVE	A0,A11
	CLRM	@SWITCH_ESCAPE,W
SLEEP_SWITCHX_LP:
	SLEEP	1
	MOVE	@SWITCH_ESCAPE,A0,W
	JRNE	SLEEP_SWITCHX_ESC
	DSJS	A11,SLEEP_SWITCHX_LP
	SETZ		    	;ALL IS WELL
SLEEP_SWITCHX_X
	PULLP	A11
	RETP
SLEEP_SWITCHX_ESC:	
	CLRZ			;FLAG THE ESCAPE
	JRUC	SLEEP_SWITCHX_X

**************************************************************************
*                                                                        *
* WDOGDIS - WATCH DOG DISABLE						 *
* NOTE: CALL WHILE INTERRUPTS ARE TURNED OFF.				 *
*                                                                        *
**************************************************************************
WDOGDIS
	MMTM	SP,A0,A1,A2,A3
	MOVI	WDISTAB,A1	
	MOVK	1,A3
	MOVE	@SYSCOPY,A2,W
	MOVE	*A1+,A0,W		
WDOGSL
	OR	A2,A0	
	MOVE	A0,@SYSCTRL,W
	XOR	A3,A0
	MOVE	A0,@SYSCTRL,W
	MOVE	*A1+,A0,W
	JRNN	WDOGSL
	MOVE	A2,@SYSCTRL,W
	MMFM	SP,A0,A1,A2,A3
	RETS
*
*WATCH DOG DISABLE TABLE
WDISTAB
	.WORD	0
	.WORD	0
	.WORD	0
	.WORD	0

	.WORD	2
	.WORD	0
	.WORD	2
	.WORD	0
	.WORD	0FFFFH

**************************************************************************
*                                                                        *
* CLSCRACH - CLEAR SCRATCH PAD						 *
* NOTE: DESTROYS A0,A1,A2,A3						 *
*                                                                        *
**************************************************************************
CLSCRACH
	PULL	A3
*CLEAR SCRATCHPAD RAM
	CLR	A0
	MOVI	SCRATCH,A1
	MOVI	(SCRATCHX-SCRATCH)/32,A2
SCTLP	MOVL	A0,*A1+
	DSJ	A2,SCTLP
	JUMP	A3

**************************************************************************
*                                                                        *
* SYSTEM ROUTINES AND PROCESSES						 *
*                                                                        *
**************************************************************************
*GAME RAM INITIALIZATION
GRAMINIT
	MMTM	SP,A0,A1,A2	
	MOVI	GRAMSTRT,A1
	MOVI	GRAMEND,A2
	JRUC	RAMINIT
*WAVE RAM INITIALIZATION
WRAMINIT
	MMTM	SP,A0,A1,A2	
	MOVI	WRAMSTRT,A1
	MOVI	WRAMEND,A2
RAMINIT
	CLR	A0
RAMLOOP
	MOVE	A0,*A1+,W	;16 BITS AT A TIME, NO EXTRANEOUS CLEARS
	CMP	A2,A1		;DONE?
	JRLO	RAMLOOP		;NO!
	MMFM	SP,A0,A1,A2
	RETS

**************************************************************************
*                                                                        *
* SYSINITL - INITIALIZE LOW BYTE OF SYSTEM CONTROL REGISTER		 *
*                                                                        *
**************************************************************************
SYSINITL
	PUSH	A0
	MOVI	SYSCINIT,A0
	MOVE	A0,@SYSCOPY,W		;RE-INITIALIZE SYSTEM CONTROL REG
	MOVE	A0,@SYSCTRL,W

	.IF TUNIT=0
	MOVI	700H,A0
	MOVE	A0,@SECCHIP,W
	MOVE	A0,@SECCHIP,W
	.ENDIF ;!TUNIT

	PULL	A0
	RETS

**************************************************************************
*								         *
* IAUTOE - ROUTINE TO INITIALIZE THE TWO AUTO-ERASE LINES TO THEIR	 *
* 		DEFAULT COLOR.						 *
*								         *
**************************************************************************
IAUTOE
	PUSH	A0
	movi	ERASECOL,A0		;color 63, pal 0
	move	A0,@NewAECol
	dec	A0
	move	A0,@OldAECol
	PULLQ	A0
	rets

**************************************************************************
*                                                                        *
* INITIO - INITIALIZE THE GSP I/O REGISTERS				 *
*                                                                        *
**************************************************************************
INITIO
	MMTM	SP,B0,B2,B10
*INITIALIZE I/O
	MOVI	HESYNC,B2,L
	MOVI	INITDATA,B0,L
	MOVI	(IDATAEND-INITDATA)/16,B10
INITIOS:
	MOVE	*B0+,*B2+
	DSJS	B10,INITIOS

	MMFM	SP,B0,B2,B10
	RETS

*
*DUMMY FOR THE SWITCHES
DUMDIE	JAUC	SUCIDE		;NOTHING PROCESS

**************************************************************************
*                                                                        *
* BADTRAP - COME HERE WHEN A TRAP IS HIT THAT IS NOT DEFINED AND LOG IT. *
*                                                                        *
**************************************************************************
TVTRAP
	RETI
BADTRAP
	MOVI	1,A14
	CALLA	DUMP_IT
	AUDIT	AUDBADTRAP	;CLICK A SOFTWARE TRAP
	DINT	
	JRUC	$	;LET THE WATCH DOG CATCH US

* VIDEO CONTROL REGISTERS INITIAL VALUES
INITDATA:
	.IF NTSC

	.WORD	00015H			;0C0000000H -- hesync
	.WORD	0002dH			;0C0000010H -- heblnk
	.WORD	000f3H			;0C0000020H -- hsblnk
	.WORD	000fcH			;0C0000030H -- htotal
	.WORD   3H			;0C0000040H -- VESYNC
	.WORD   ENDVBLNK		;0C0000050H -- VEBLNK
	.WORD	0E0H+ENDVBLNK		;0C0000060H -- VSBLNK
	.WORD	0109H			;0C0000070H -- VTOTAL

	.ELSE

	.WORD	00015H			;0C0000000H -- hesync
	.WORD	32H ;0002dH			;0C0000010H -- heblnk
	.WORD	0FAH ;000f7H			;0C0000020H -- hsblnk
	.WORD	000fcH			;0C0000030H -- htotal
	.WORD   3H			;0C0000040H -- VESYNC
	.WORD   ENDVBLNK		;0C0000050H -- VEBLNK
	.WORD   0100H+(ENDVBLNK-1)	;0C0000060H -- VSBLNK
	.WORD   0120H			;0C0000070H -- VTOTAL

	.ENDIF

	.WORD	0F010H			;0C0000080H -- DPYCTL
	.WORD	DPYSTRT0
	.WORD	EOSINT			;0C00000A0H -- dpyint (HALF SCREEN)
	.WORD	INI_CTRL		;0C00000B0H -- control
	.WORD	00h			;0C00000C0H -- hstdata
	.WORD	00h			;0C00000D0H -- hstadrl
	.WORD	00h			;0C00000E0H -- hstadrh
	.WORD	00h			;0C00000F0H -- hstctll
	.WORD	00h			;0C0000100H -- hstctlh
	.WORD	00h			;0C0000110H -- intenbl
	.WORD	00h			;0C0000120H -- intpend
	.WORD	00h			;0C0000130H -- convsp
	.WORD	00h			;0C0000140H -- convdp
	.WORD	PXSIZE			;0C0000150H -- psize
	.WORD	00h			;0C0000160H -- pmask
	.WORD	00h			;0C0000170H -- RESERVED
	.WORD	00h			;0C0000180H -- RESERVED
	.WORD	00h			;0C0000190H -- RESERVED
	.WORD	00h			;0C00001A0H -- RESERVED
;	.WORD	00h			;0C00001B0H -- DPYTAP
	.WORD	1Ch			;0C00001B0H -- DPYTAP
					;SHAWN'S FIX TO MOVE WINDOW
IDATAEND:

IDATALEN	EQU	(IDATAEND-INITDATA)/16

*
*INITIALIZE ALL 32 TRAP VECTORS
*
	.SECT	"VECTORS"

	.LONG	BADTRAP		;TRAP 31
	.LONG	BADTRAP		;TRAP 30	ILLOP --- Illegal Opcode
	.LONG	TVTRAP		;TRAP 29	TV TRAP
	.LONG	BADTRAP		;TRAP 28
	.LONG	BADTRAP		;TRAP 27
	.LONG	BADTRAP		;TRAP 26
	.LONG	BADTRAP		;TRAP 25
	.LONG	BADTRAP		;TRAP 24
	.LONG	BADTRAP		;TRAP 23
	.LONG	BADTRAP		;TRAP 22
	.LONG	BADTRAP		;TRAP 21
	.LONG	BADTRAP		;TRAP 20
	.LONG	BADTRAP		;TRAP 19
	.LONG	BADTRAP		;TRAP 18
	.LONG	BADTRAP		;TRAP 17
	.LONG	BADTRAP		;TRAP 16
	.LONG	BADTRAP		;TRAP 15
	.LONG	BADTRAP		;TRAP 14
	.LONG	BADTRAP		;TRAP 13
	.LONG	BADTRAP		;TRAP 12
	.LONG	BADTRAP		;TRAP 11	WV --- Window Violation
	.LONG	DIRQ		;TRAP 10	DI --- Display Interrupt
	.LONG	BADTRAP		;TRAP 9		HI --- Host Interrupt
	.LONG	BADTRAP		;TRAP 8		NMI -- NonMaskable Interrupt
	.LONG	BADTRAP		;TRAP 7
	.LONG	BADTRAP		;TRAP 6
	.LONG	BADTRAP		;TRAP 5
	.LONG	BADTRAP		;TRAP 4
	.LONG	BADTRAP		;TRAP 3
	.LONG	ROMTRAP		;TRAP 2		INT2 --- External Interrupt 2
	.LONG	DMAINT		;TRAP 1		INT1 --- External Interrupt 1
	.LONG	POWERUP		;TRAP 0		Reset

	.END

