***
*** FILE: DISPEQU.ASM
***
*** JFL 14 JUL 92; FROM DREDD; MODS BEGIN
*** JFL 15 JUL 92; SCALE1TO1
*** JFL 21 JUL 92
*** JFL 23 JUL 92
*** JFL 24 JUL 92
*** JFL 28 JUL 92;ABSXYZMINMAX
*** JFL 03 AUG 92
*** JFL 04 AUG 92
*** JFL 05 AUG 92; OSCALEINV
*** JFL 12 AUG 92; M_HIT
*** JFL 18 AUG 92; OBJECTYBASE
*** JFL 09 SEP 92; OSTATE
*** JFL 14 SEP 92; M_GRAVITY
*** JFL 01 OCT 92; OBJ BLOCK REORDERED -- DMA PULL STUFF IN FRONT
*** JFL 08 OCT 92; OFLAGS REORDERED, M_PLANE
*** JFL 30 OCT 92; OSCALETYPE
*** JFL 10 JAN 93; OGCOLLINK
*** JFL 20 MAR 93; OFLASHPALORG
*** JFL 26 MAR 93
*** JFL 13 APR 93; OSCDAG
*** JFL 14 APR 93; OMDIRADJ
***

**************************************************************************
*								         *
* 	         AMUSEMENT PARK - DISPLAY EQUATE FILE			 *
* 									 *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
*************************************************************************

SCALE1TO1HALF	EQU	100H
SCALE1TO1	EQU	[100H,100H]

SCRTOP	EQU	0		;set to line after static top area
SCRBOT	EQU	255
SCRLFT	EQU	0
SCRRGT	EQU	399

*VARS
	.GLOBL	WALK_SCRIPT
	.GLOBL	SCRIPT_TAB
	.GLOBL	SCRIPT_X
	.GLOBL	SCRIPT_DIFF
	.GLOBL	SCRIPT_DIFF2
	.GLOBL	WALK1
	.GLOBL	FGLISTS
	.GLOBL BGLISTS
	.GLOBL ANIOBJS
	.GLOBL ANIFUNCS
	.GLOBL	BGPLANECT
	.GLOBL FGPLANECT
	.GLOBL	SCROLLX
	.GLOBL SCROLLY
	.GLOBL SCRNTL
	.GLOBL SCRNLR
	.GLOBL	DISPLAYON
	.GLOBAL	UNIVXMIN
	.GLOBL UNIVXMAX
	.GLOBL WORLDX
	.GLOBL WORLDY
	.GLOBL WORLDXY
	.GLOBAL	SUPPLSTS
	.GLOBL SUPPLSTSX
	.GLOBL DMARESTARTS

*FUNCS ******* UPDATE DISP.DOC WITH NEW FUNCTIONS !!!!!! ********************
	.GLOBL DO_TRANS
	.GLOBL DMAINT
	.GLOBL CLRDMAQ
	.GLOBL ANI
	.GLOBL GSAGOF
	.GLOBL DISPLAY
	.GLOBL QDMAN
	.GLOBL QDMAN2
	.GLOBL YZSORT
	.GLOBL SetPlaneXPos
	.GLOBL SetPlaneYPos
	.GLOBL GET_P_XPOS
	.GLOBL GET_P_YPOS
	.GLOBL OINIT
	.GLOBL GETOBJ
	.GLOBL INSPLANE
	.GLOBL INSERT_OBJ
	.GLOBL INSOBJ
	.GLOBL DELETE_OBJ
	.GLOBL ZAP_OBJ
	.GLOBL ZAPOBJ
	.GLOBL FPSTFOBJ0
	.GLOBL STFOBJ0
	.GLOBL CREATE_OBJ
	.GLOBL GETANIXY
	.GLOBL GETANIX
	.GLOBL SET_ANIP
	.GLOBL GANIOF
	.GLOBL STRT_ANIM
	.GLOBL COPY_OBJ
	.GLOBAL	STORE_ZVAL
	.GLOBL KILOBJ
	.GLOBL KILOBJ_ALL
	.GLOBL OBJTOPNT
	.GLOBL GET_SCRNREL
	.GLOBL GETAFARG_LONG
	.GLOBL DIST_FROM_PLANE
	.GLOBL PNT_WORLDREL
	.GLOBL CHANGEOID
	.GLOBAL	STOREZVAL


***CONSTANTS
MAXPLANES EQU	15


*EQUATES FOR SCORE AREA
SKYTOPOF 	.EQU	22
SCORDPYS 	.EQU	0FFFFFEDCH	;DPYSTRT VALUE FOR HIDING THE SCORE
SCORE_HEIGHT	.EQU	SKYTOPOF	;HEIGHT OF SCORE AREA

SCRNST	EQU	[0,0]		;TOP LEFT OF SCREEN
SCRNEND EQU	[SCRBOT+1,SCRRGT+1] ;BOT RIGHT OF SCREEN (for SCRNLR, clipper)
SCRWIDTH EQU	SCRRGT-SCRLFT+1
SCRHGHT	EQU	SCRBOT-SCRTOP+1
SCRNMID	EQU	[(SCRBOT+SCRTOP+1)/2,(SCRRGT+SCRLFT+1)/2] ;MIDPOINT OF SCREEN

*
*NEW OBJECT BLOCK INITIALIZATION TABLE
NEWIIMG	 .EQU	0
NEWICVEC .EQU	20H
NEWIOID	 .EQU	40H
NEWIFLAG .EQU	50H
NEWIFLAG2 .EQU	60H
NEWICFUNC .EQU	70H

SHADID	.EQU	00FFFH		;SHADOWS ARE HIGH PRI

;* PLANE TABLE STRUCT
*STRUCT PLANE
P_LSTHD	EQU	000H  	;UHL ptr to head of OBJECT LIST
P_LSTTL	EQU	020H	;UHL ptr to tail of OBJECT LIST
P_SORT	EQU	040H	;UHL SORT LIST
P_XPOS	EQU	060H	;UHL World Top Left X of OBJECT LIST
P_YPOS	EQU	080H	;UHL World Top Left Y
P_XYOFF	EQU	0A0H	;UHL Y:X integer temporary offset for shaking
P_XRATE	EQU	0C0H	;UHL SCROLLX multiplier for plane
P_YRATE	EQU	0E0H	;UHL SCROLLY multiplier for plane
P_FLAGS	EQU	100H	;UHW Flag bits for plane
*ENDSTRUCT
PLNSIZ	EQU	110H	;size of PLANE STRUCTURE

P_M_NOSHAKE	EQU	1	;NO SHAKE THIS PLANE..
P_B_NOSHAKE	EQU	0

;**** LSTHD, LSTTL offsets above must match OLINK, OBLINK offset of OBJ ****

;*OBJECT BLOCK LAYOUT
*STRUCT	OBJ
OLINK	  EQU	0000H   ;UHL Link to next object block
OBLINK	  EQU	0020H	;UHL Back Link to previous obj
OSORTLINK EQU	0040H	;UHL SORT LINK
K1	  EQU	0060H	; OFFSET
;
;PULL STARTS -- CLIPLOOP
OFSET	  EQU	K1+000H ;UHW PRECOMPUTED OFFSET
OCTRL	  EQU	K1+010H	;UHW CONTROL WORD
OSAG	  EQU	K1+020H	;UHL SOURCE ADDRESS (UNCLIPPED, ADJUSTED FOR FLIPS)
ODAG	  EQU	K1+040H	;UHL Screen Pos
OUSIZE	  EQU	K1+060H ;UHL UNSCALED SIZE
OPAL	  EQU	K1+080H ;UHW B(0-15) PALETTE; B(16-31) CONSTANT COLOR
OCONST	  EQU	K1+090H ;UHW CONSTANT COLOR
OSCALEDMA EQU	K1+0A0H ;UHL DMA #2 SCALE
OSIZE	  EQU	K1+0C0H ;UHL SCALED SIZE OF OBJECT -- USED FOR DMAPULLX TOO
K2	  EQU   K1+0E0H ; OFFSET
;PULL END
;
OSLINK	  EQU	K2+000H ;UHL Supplemental lists (OID class)
OVLINK    EQU	K2+020H ;UHL VEL ADD LINK
OPLINK	  EQU	K2+040H ;UHL Link to controlling process
OCVECT	  EQU	K2+060H ;UHL vector to collision table
OPART1	  EQU	K2+080H ;UHL PTR TO HEAD OF MULTI-PART OBJ
OPARTS	  EQU	K2+0A0H ;UHL LINK TO NEXT PART OF MULT-PART OBJ
OSHAD	  EQU	K2+0C0H ;UHL DMA TYPE SHADOW OBJ/PARENT OBJ
OSHADIMG  EQU	K2+0E0H ;UHL MULTIPART TYPE SHADOW OBJ
K3	  EQU	K2+100H ; OFFSET
;
;PULL START -- VELADD
OFLAGS	  EQU	K3+000H ;UHW FLAGS 
OID	  EQU	K3+010H ;UHW OBJ ID
OYACC	  EQU	K3+020H ;SHL Y ACCEL
OXVEL	  EQU	K3+040H ;SHL Z VELOCITY 16.16
OYVEL	  EQU	K3+060H ;SHL
OZVEL	  EQU	K3+080H ;SHL
OXVAL	  EQU	K3+0A0H ;SHL; UNDOPULL START
OYVAL	  EQU	K3+0C0H ;SHL
OZVAL	  EQU	K3+0E0H ;SHL
K4	  EQU	K3+100H ; OFFSET
; PULL END
;
OGCOL	  EQU	K4+000H ;UHL GROUND COLLISION VECTOR
OGCOLLINK EQU	K4+020H ;UHL LINK TO NEXT GCOL OBJ
OUANIOFF  EQU	K4+040H ;UHL UNSCALED ANIMATION OFFSET
OANIOFF	  EQU	K4+060H ;UHL ADJUSTED ANIMATION OFFSET
OIMG	  EQU	K4+080H ;UHL Pointer to image data table
OIMGTBL	  EQU	K4+0A0H ;UHL IMAGE TABLE FOR DIRECTION
OPARTSXY  EQU	K4+0C0H ;UHL multi part position offset
OZOFF	  EQU	K4+0E0H ;SHW OZOFF; UNDOPULL END
ODIR	  EQU	K4+0F0H ;UHW DIRECTION 00..FF; OUNDOPULL END
OPARTID   EQU	K4+100H ;UHW MULTI-PART OBJ PART NUMBER
OSCALEMUL EQU	K4+110H ;UHW INVERSE OF SCALE; 12 BITS MAX (APC.ASM)
OSCALETYPE EQU	K4+120H ;UHW TYPE OF SCALING
OIHOFF	  EQU	K4+130H ;UHW OFFSET TO IMAGE HEADER	; WBDNEW
OPLANE	  EQU	K4+140H ;UHW PLANE (LOWER BYTE USED)
OSTATE	  EQU	K4+150H ;UHW IMAGE STATE
OTBLOFF   EQU	K4+160H ;UHW IMAGE TABLE OFFSET (FOR UPDATING)
OGROW	  EQU	K4+170H ;UHW GROW COUNT
OSAVE1	  EQU	K4+180H ;UHL SAVE
OSAVE2	  EQU	K4+1A0H ;UHL SAVE
OSCALEMIN EQU	K4+1C0H ;UHL DMA:MUL
K5	  EQU	K4+1E0H ; OFFSET
;
;
OVAR1	  EQU	K5+000H ;UHL (NEVER USE OVAR LABEL DIRECTLY -- DEFINE BELOW)
OVAR2	  EQU	K5+020H ;UHL (NEVER USE OVAR LABEL DIRECTLY -- DEFINE BELOW)
OVAR3	  EQU	K5+040H ;UHL (NEVER USE OVAR LABEL DIRECTLY -- DEFINE BELOW)
OVAR4	  EQU	K5+060H ;UHL (NEVER USE OVAR LABEL DIRECTLY -- DEFINE BELOW)
OVAR5	  EQU	K5+080H ;UHL (NEVER USE OVAR LABEL DIRECTLY -- DEFINE BELOW)
OVAR6	  EQU	K5+0A0H ;UHL (NEVER USE OVAR LABEL DIRECTLY -- DEFINE BELOW)
OVAR7	  EQU	K5+0C0H ;UHL (NEVER USE OVAR LABEL DIRECTLY -- DEFINE BELOW)
OVAR8	  EQU	K5+0E0H ;UHL (NEVER USE OVAR LABEL DIRECTLY -- DEFINE BELOW)
OVAR9	  EQU	K5+100H ;UHL (NEVER USE OVAR LABEL DIRECTLY -- DEFINE BELOW)
ODATA     EQU	K5+120H ;SCRATCH SPACE FOR USER ROUTINES
ODATAX	  EQU	K5+160H ;NEXT SPACE IMMEDIATELY AFTER DATA AREA
*ENDSTRUCT
OBSIZ	EQU   	K5+160H ;Object Block Size
OCLRSIZ EQU	ODATAX	;GETOBJ WILL CLEAR UPTO AND NOT INCLUDING HERE
NOBJ	EQU   	400	;OBJECTS IN SYSTEM

******************************************************************

**
** AKA
**
OXPOS	EQU	OXVAL+10H
OYPOS	EQU	OYVAL+10H
OZPOS	EQU	OZVAL+10H
OANIOFFX EQU	OANIOFF     ; X ANIMATION OFFSET FROM TOP LEFT ADJUSTED FOR FLIP
OANIOFFY EQU	OANIOFF+10H ; Y ANIMATION OFFSET FROM TOP LEFT ADJUSTED FOR FLIP
OUSIZEX	EQU	OUSIZE		; X-SIZE
OUSIZEY	EQU	OUSIZE+10H	; Y-SIZE
OSIZEX	EQU	OSIZE		; X SIZE
OSIZEY	EQU	OSIZE+10H	; Y SIZE
OSCALEX	EQU	OSCALEDMA	; X-SCALE
OSCALEY	EQU	OSCALEDMA+10H	; Y-SCALE
OUANIOFFX EQU	OUANIOFF     ; X ANIMATION OFFSET FROM TOP LEFT ADJUSTED FOR FLIP
OUANIOFFY EQU	OUANIOFF+10H ; Y ANIMATION OFFSET FROM TOP LEFT ADJUSTED FOR FLIP
ODMAPULL  EQU	OFSET
ODMAPULLX EQU	OSIZE+20H
OPLANEPTR EQU	OPLINK

**
** ODATA -- CAR
**
OCAR	EQU	ODATA		;UHL CAR DATA

**
** ODATA -- CAR MULTI-PART
**
OMDATA	EQU	ODATA		;UHL
OMDIRADJ EQU	ODATA+20H	;UHW

**
** ODATA -- MISSILE OBJ
**
OMISHIT	  EQU	ODATA		;UHL OBJ MISSILE HIT
OMISAREA  EQU	ODATA+20H	;UHW AREA ON CAR MISL HIT
OMISOID	  EQU	ODATA+30H	;UHW OID OF CAR HIT

**
** ODATA -- LAND MINE
**
OLMINEMOM	EQU	ODATA		;UHL OBJ 

**
** ODATA -- ICON
**
OICONOID	EQU	ODATA		;UHW OID OF WHO GOT THIS
OICONVAL16	EQU	ODATA+10H	;UHW MISC DATA
OICONVAL32 	EQU	ODATA+20H	;UHL MISC DATA

**
** ODATA -- ARENA OBJECT AOL
**
OAOLVAL16	EQU	OICONVAL16	;UHW MISC DATA
OAOLVAL32 	EQU	OICONVAL32	;UHL MISC DATA

**
** ODATA -- DEATH BOOM
**
ODEATHID	EQU	ODATA		;UHW ID OF WHO TO THROW

**
** ODATA -- SCORE OBJECTS
**
OSCDAG		EQU	ODATA		;UHL ORG DAG OF OBJ

**
** OSAVE -- CAR
**
OFLASHPALORG	EQU	OSAVE1

**
** OVAR UNIONS
**
** OVAR1  ANIMNXT
** OVAR2  ANIMFRM
** OVAR3  ANIMSCR
** OVAR4  ANIMSLPA,ANIMSLPB
** OVAR5  ANIMARG
** OVAR6  ANIMIRQ
** OVAR7  OBOUNCEYVEL,OFLYDESTXY,OFLYHEIGHT
** OVAR8  OBOUNCEYACC,OFLYDIST
** OVAR9  ODANIMLINK,OAOL,OWORDPASS,OMOM
**
** JFL 15 SEP 92
** JFL 01 OCT 92
** JFL 02 DEC 92
** JFL 10 FEB 93
**
OWORDPASS EQU	OVAR9+10H ;UHW PASS A WORD FROM ONE ROUTINE TO ANOTHER

*STRUCT	ANIM+OBJ
ANIMNXT EQU	OVAR1	;UHL  LINK TO NEXT OBJ OF ANIMY LINKED LIST
ANIMFRM EQU	OVAR2	;UHL  PTR TO CURRENT ANIMATION FRAME
ANIMSCR EQU	OVAR3	;UHL  PTR TO ANIMATION SCRIPT
ANIMSLPA EQU	OVAR4	;UHW  RESET VALUE FOR ANIMSLP
ANIMSLPB EQU	OVAR4+10H ;UHW  # TIKS BEFORE NEXT ANI
*ENDSTRUCT

ANIMARG EQU	OVAR5	;STUFFED BY ANIMP FOR USE BY GETAFARG_XXXX

OBOUNCEYVEL EQU	OVAR7	;UHL LAST Y VEL, USED FOR BOUNCING OBJECTS
OBOUNCEYACC EQU	OVAR8	;UHL LAST Y ACC, USED FOR BOUNCING OBJECTS

ODANIMLINK EQU	OVAR9	;UHL DIRECTIONAL ANIMATIONS ON THIS OBJ
OAOL	EQU	OVAR9	;UHL ARENA OBJ INIT REC
OFLYDESTXY EQU	OVAR7	;UHL FOR SENDING ICONS TO SCORE BOX
OFLYDIST EQU	OVAR8	;UHL FOR SENDING ICONS TO SCORE BOX

OFLYBITS EQU	OVAR7	;UHW FOR ANIFLYLANDKILL 
ANIMIRQ EQU	OVAR6	;UHL WHEN ANIM WAS IN STALLED

********************************************************************

**
** OSCALETYPE TYPES
**
** JFL 30 OCT 92
**
STYPNONE	EQU	0		;NO SCALING
STYPZ		EQU	1		;Z SCALING
STYPGROWMAX	EQU	2		;SCALE FROM SMALL TO MAX
STYPGROW1TO1	EQU	3		;SCALE FROM SMALL TO 1TO1
STYPYZ		EQU	4		;YZ SCALING
STYPZMIN	EQU	5		;Z SCALING WITH MIN SCALE CHECK
STYPZOFF	EQU	8000H		;Z OFFSET

BQCELL	EQU	0C0H	;SIZE OF DMA QUEUE ELEMENT

;wfd
***********************
*  Values for OCTRL   *
***********************
M_WRZERO 	EQU  00001H	;Write Zero Data
M_WRNONZ 	EQU  00002H	;Write Non-Zero Data
M_CONZER 	EQU  00004H	;Replace Zero Data with constant
M_CONNON 	EQU  00008H	;Replace Non-Zero Data with constant
M_CONST		EQU  0000CH	;any constant data replacement
M_FLIPH		EQU  00010H	;Flip Horizontally
M_FLIPV		EQU  00020H	;Flip Vertically
M_LRCLIP	EQU  00040H
M_COMPRESS	EQU  00080H
M_INUSE		EQU  08000H	;obj not on free list

*BIT POSITIONS FOR OCTRL
B_WRZERO	EQU   	0
B_WRNONZ	EQU   	1
B_CONZER	EQU   	2
B_CONNON	EQU   	3
B_FLIPH		EQU  	4
B_FLIPV		EQU  	5
B_LRCLIP	EQU	6
B_COMPRESS	EQU	7
B_INUSE		EQU	15

***********************
*  Values for OFLAGS  *
***********************
M_XXX1		EQU  00001H	;
M_XXX2		EQU  00002H	;
M_NOPARTANI	EQU  00004H	;IF IN MULTI-SCRIPT, THEN DON'T ANIMATE
M_NOAUTOZ	EQU  00008H	;don't auto plane change on Z 
M_ANIMSHAD 	EQU  00010H	;ANIM CHANGES OSHADIMG SHADOWS -- FGOBJS ONLY
M_NOTFG	 	EQU  00020H	;
M_FLASHING 	EQU  00040H	;OBJ IS FLASHING
M_XXX4		EQU  00080H	;
M_SETPALCONST	EQU  00100H	;SET PAL&CONST
M_HIT	 	EQU  00200H	;SCALE VELOCITIES
M_NOCOLL	EQU  00400H	;Don't do regular collisions...
M_ANIM		EQU  00800H	;set if on ANIFLY list
M_NOSCROLL	EQU  01000H	;don't adjust to world coors..
M_XXX7		EQU  08000H	;

B_XXX1		EQU  0
B_XXX2		EQU  1
B_NOPARTANI	EQU  2
B_NOAUTOZ	EQU  3
B_ANIMSHAD 	EQU  4
B_NOTFG	 	EQU  5
B_FLASHING 	EQU  6
B_XXX4		EQU  7
B_SETPALCONST	EQU  8
B_HIT	 	EQU  9
B_NOCOLL	EQU  10
B_ANIM		EQU  11
B_NOSCROLL	EQU  12
B_XXX7		EQU  13

* AKA
M_BNODEL	EQU  M_NOAUTOZ	;do not pull BGND from list
B_BNODEL	EQU  B_NOAUTOZ
B_MASTER	EQU  B_NOAUTOZ
B_NOWORLD	EQU  B_NOSCROLL


* EOF
******************************* MPROCEQU.ASM ********************************
*VARS
	.GLOBL	TIMER
	.GLOBL	ACTIVE
	.GLOBL	FREE
	.GLOBL	PFREECNT
	.GLOBL	PRIORITY

*FUNCS
	.GLOBL	GETPRC
	.GLOBL	GETPPRC
	.GLOBL	KILALL
	.GLOBL	PINIT
	.GLOBL	SUCIDE
	.GLOBL	PRCSLP
	.GLOBL	PRCDSP
	.GLOBL	PRCLSP
	.GLOBL	KILLPROC_ALL
	.GLOBL	EXISTP_ALL

*
*SOUND ROUTINES AND CALLS

*
*PROCESS DATA STRUCTURE
*NOTE: MAKE SURE THIS IS EVENLY DIVISIBLE BY 32
*STRUCT	PRC
PLINK	EQU	0	;UHL LINK TO NEXT 32 BITS
PROCID	EQU	020H	;UHW PROCESS ID 16 BITS
PTIME	EQU	030H	;UHW SLEEP TIME X 16MSEC 16 BITS
PWAKE	EQU	0E0H	;UHL
PA8	EQU	0C0H	;UHL
PA9	EQU	0A0H	;UHL
PA10	EQU	080H	;UHL
PA11	EQU	060H	;UHL
PSPTR	EQU	040H	;UHL PROCESS STACK POINTER 32 BITS
PDATA	EQU	0100H	;UHL PROCESS DATA STORE
PSDATA	EQU	0500H	;UHL PROCESS STACK DATA
PTEMP1	EQU	PSDATA-0A0H	;UHL	;PROCESS TEMPORARY STORE AREAS
PTEMP2	EQU	PSDATA-080H	;UHL
PTEMP3	EQU	PSDATA-060H	;UHL
PTEMP4	EQU	PSDATA-040H	;UHL
PCTIME	EQU	PSDATA-020H	;UHW PROCESS CREATION TIME (DEBUGGING)
PCOMM	EQU	PSDATA-010H	;UHW PROCESS COMMUNICATION AREA
*ENDSTRUCT
PRCSIZ	EQU   0700H	;END OF DATA STRUCTURE
NPROC	EQU   120	;NUMBER OF PROCESSES
**************************************************************************
*								         *
* 	       AMUSEMENT PARK - CMOS RAM EQUATE FILE			 *
* 									 *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

**************************************************************************
*								         *
* 	COINAGE STUFF							 *
*								         *
**************************************************************************

CHUTES		EQU	4		;MAXIMUM COIN CHUTES IN GAME.

L_COIN_BIT	EQU	1H
C_COIN_BIT	EQU	4H
R_COIN_BIT	EQU	2H
X_COIN_BIT	EQU	80H
SLAM_BIT	EQU	8H

MENU_PID	EQU	0AC1H		;GET_MENU SLAVE
MDUN_PID	EQU	0AC2H		;MENU SLAVE CHANGES TO THIS WHEN DONE

LONG_SIZE	EQU	32
WORD_SIZE	EQU	16
BYTE_SIZE	EQU	8

C_LONG_SIZE	EQU	64
C_WORD_SIZE	EQU	32
C_BYTE_SIZE	EQU	16

BYTE_MASK	EQU	0FFH
BM		EQU	BYTE_MASK	;STINKY SHORT-HAND
WORD_MASK	EQU	0FFFFH

SX_MASK		EQU	0FFFFH
SY_MASK		EQU	0FFFF0000H

**************************************************************************
*                                                                        *
*          ASCII STUFF                                                   *
*                                                                        *
**************************************************************************

SPACE		EQU	20H
EX_PT		EQU	21H
LET_0		EQU	30H
LET_A		EQU	41H
LET_Z		EQU	5AH
UNDERSCORE	EQU	5FH
FONT_SPACE	EQU	7EH
FONT_RUB	EQU	FONT_SPACE+1
FONT_END	EQU	FONT_RUB+1
FONT_RQUOTE	EQU	FONT_END+1
FONT_EPOUND	EQU	FONT_RQUOTE+1
FONT_CR		EQU	FONT_EPOUND+1
ASCII_COMMA	EQU	2CH
RIGHT_PAREN	EQU	29H
ASCII_DQ	EQU	22H

**************************************************************************
*                                                                        *
*          AUDIT STRUCTURE                                               *
*                                                                        *
**************************************************************************

AUD_DATA	EQU	0	;THE COUNTER IS 4 BYTES STARTING AT ZERO
AUD_CKSUM	EQU	AUD_DATA+(4*C_BYTE_SIZE)  ;CHECKSUM = 2 BYTES
AUD_SIZE	EQU	AUD_CKSUM+C_WORD_SIZE
AUD_BYTES_TO_CHECK EQU	(AUD_SIZE/C_BYTE_SIZE)-2  ;# TO ADD FOR CHECKSUM

N_AUDITS	EQU	75		;ALLOCATE AMPLE AUDIT SPACE


**************************************************************************
*                                                                        *
*          ADJUSTMENTS                                                   *
*                                                                        *
**************************************************************************
ADJ_SIZE	EQU	C_LONG_SIZE
N_ADJUSTS	EQU	28		;28 NORMAL ADJUSTMENTS


**************************************************************************
*                                                                        *
*                                                                        *
*          CMOS STUFF FOR HSTD..........MOVE THIS TO SPECIAL EQUATE FILE *
*          SOME DAY                                                      *
*                                                                        *
*                                                                        *
**************************************************************************
*
*        High Score table (CMOS) entry data structure
*
NUM_INITS	EQU	3		;INITIALS IN EACH ENTRY..THIS MUST BE ODD
*
HS_SCORE	EQU	0			;LONG WORD.....8 DIGIT SCORE
HS_COL		EQU	HS_SCORE+C_LONG_SIZE	;PALETTE TO PLOT IN
HS_INITS	EQU	HS_COL+C_WORD_SIZE	;BYTE FOR FIRST INITIAL
HS_CKBYTE	EQU	HS_INITS+(NUM_INITS*C_BYTE_SIZE) ;BYTE FOR CHECKSUM
HS_SIZE		EQU	HS_CKBYTE+C_BYTE_SIZE	;SIZE OF STRUCTURE
HS_BYTES_TO_CHECK EQU	(HS_SIZE/C_BYTE_SIZE)-1	;# TO ADD FOR CHECKSUM
HS_SIZE_IN_WORDS  EQU	HS_SIZE/C_WORD_SIZE	;SIZE OF ENTRY IN WORDS
HS_SIZE_IN_BYTES  EQU	HS_SIZE/C_BYTE_SIZE	;SIZE OF ENTRY IN BYTES
HS_ROM_SIZE	EQU	HS_SIZE/2		;address size of rom entry

RHS_VALID	EQU	0
RHS_SCORE	EQU	RHS_VALID+WORD_SIZE
RHS_COL		EQU	RHS_SCORE+LONG_SIZE
RHS_INITS	EQU	RHS_COL+WORD_SIZE
RHS_CKBYTE	EQU	RHS_INITS+(NUM_INITS*BYTE_SIZE)
RHS_SIZE	EQU	RHS_CKBYTE+BYTE_SIZE

**************************************************************************
*                                                                        *
*         A HIGH SCORE TABLE IS DEFINED IN ROM BY THE FOLLOWING          *
*         STRUCTURE (THERE ARE AT LEAST 2 TABLES....ALL TIME             *
*         AND "TODAYS")                                                  *
*                                                                        *
**************************************************************************
TB_POINTER	EQU	0			;LONG-POINTER TO BEGINNING OF TABLE
TB_COUNT	EQU	TB_POINTER+LONG_SIZE	;WORD....# IN THE TABLE.
TB_VISIBLE	EQU	TB_COUNT+WORD_SIZE	;WORD....NUMBER DISPLAYED
TB_PAGE_BITS	EQU	TB_VISIBLE+WORD_SIZE	;WORD....STATUS WORD FOR CMOS PAGE
TB_FACTORY	EQU	TB_PAGE_BITS+WORD_SIZE	;LONG....ROM STARTUP TABLE
TB_ERROR_COUNT	EQU	TB_FACTORY+LONG_SIZE	;WORD....NUM ERRORS TO RE-INIT
*
CMOS		EQU	1400000H		;BASE OF CMOS
WPCMOS		EQU	1404000H		;WRITE PROTECTED CMOS
WP_READ		EQU	1C00010H		;PLACE TO READ WRITE PROTECT STATUS
SND_TALK	EQU	1C00020H		;SOUND BOARD TALK BACK.
WP_BIT		EQU	800H			;BIT WHERE WRITE ENABLE LIVES  0=NO WRITES
CMOS_PAGE_SELECT_BITS EQU 0C0H	;BITS 6 AND 7 OF SYSCTRL SELECT CMOS PAGE
CMOS_PAGE_SELECT_UNIT EQU 040H	;4 PAGES USE MULTIPLES OF THIS
*
**************************************************************************
*                                                                        *
*          CMOS ALLOCATION                                               *
*                                                                        *
**************************************************************************
*
*	4 PAGES OF 2K
*
*	EACH PAGE ..... LOW 1K = READ/WRITE
*			HIGH 1K = WRITE PROTECTED
*
*		PAGE 0	LOW HALF = HSTD TODAY
*
*		PAGE 1	LOW HALF = AUDITS
*			HIGH HALF = ADJUSTMENTS
*
*		PAGE 2	LOW HALF = HSTD ALL TIME
*
*		PAGE 3	LOW HALF = ERROR DUMP DATA
*
ALL_TIME_ORIGIN	EQU	CMOS
ALL_TIME_SELECT	EQU	CMOS_PAGE_SELECT_UNIT*2
ALL_TIME_VISIBLE EQU	10
TODAYS_ORIGIN	EQU	CMOS
TODAYS_SELECT	EQU	CMOS_PAGE_SELECT_UNIT*0
TODAYS_VISIBLE	EQU	10

AUDIT_SELECT	EQU	CMOS_PAGE_SELECT_UNIT*1
HSR_SELECT	EQU	AUDIT_SELECT		;HIGH SCORE RESET COUNTER
COIN_SELECT	EQU	AUDIT_SELECT		;COINS AND CREDITS
*
ADJUST_SELECT	EQU	CMOS_PAGE_SELECT_UNIT*1
*
DUMP_SELECT	EQU	CMOS_PAGE_SELECT_UNIT*3
DUMP_ORG	EQU	CMOS
DUMP_PTR	EQU	DUMP_ORG		;WORD....NUMBER OF ENTRIES!
DUMP_DATA	EQU	DUMP_PTR+C_WORD_SIZE	;DUMPS GO HERE!
*
*        AUDIT PAGE AUDIT DATA AND CREDITS
*
AUDITORG	EQU	CMOS				;AUDITS LIVE HERE
CREDITS		EQU	AUDITORG+(N_AUDITS*AUD_SIZE)	;BYTE FOR CREDITS
CUNITS		EQU	CREDITS+C_BYTE_SIZE		;WORD
BUNITS		EQU	CUNITS+C_WORD_SIZE		;WORD
MINUNITS	EQU	BUNITS+C_WORD_SIZE		;WORD
COIN_CKSUM	EQU	MINUNITS+C_WORD_SIZE		;BYTE
HSR_C		EQU	COIN_CKSUM+C_BYTE_SIZE		;LONG = HIGH SCORE RESET COUNTER
*
*	NEXT TWO ARE ASSUMED TO BE BACK TO BACK
*
HRESET_COUNTER	EQU	HSR_C+C_LONG_SIZE		;LONG = HIGH SCORE RESET COUNTER
HRESET_VERIFY	EQU	HRESET_COUNTER+C_LONG_SIZE	;LONG = 2ND COPY INVERTED.

COIN_CKSUM_START EQU	CREDITS
COIN_CKSUM_SIZE  EQU	COIN_CKSUM-COIN_CKSUM_START	;SIZE OF REGION TO CHECK
COIN_CKSUM_BYTES EQU	COIN_CKSUM_SIZE/C_BYTE_SIZE	;NUMBER OF BYTES TO ADD
*
*	CUSTOM MESSAGE DEFINITIONS
*
CMESS_CHARS	EQU	18				;25 CHARS/LINE OF CUSTOM MESSAGE
CMESS_LINES	EQU	3				;3 LINES
CMESS_LINE_SIZE	EQU	CMESS_CHARS*C_BYTE_SIZE
CMESS_SIZE	EQU	CMESS_LINES*CMESS_LINE_SIZE

VALID_VALUE	EQU	0EABCH			;STORED AT "VALID_CUSTOM" IF OK!

NAME_REV_SIZE	EQU	30			;NAME AND REV DATA

ADJUSTORG	EQU	WPCMOS				;FIRST ADJUSTMENT HERE
CUSTOM_MESSAGE	EQU	ADJUSTORG+(N_ADJUSTS*ADJ_SIZE)
VALID_CUSTOM	EQU	CUSTOM_MESSAGE+CMESS_SIZE	;WORD = EABC IF OK.
END_CK_REGION	EQU	VALID_CUSTOM+C_WORD_SIZE
ADJ_AREA_SIZE	EQU	END_CK_REGION-ADJUSTORG		;ADJUSTS+CUSTOM MESSAGE
ADJ_CKSUM	EQU	END_CK_REGION			;WORD CHECK FOR ADJUSTS
ADJ_BYTES_TO_CHECK EQU	ADJ_AREA_SIZE/C_BYTE_SIZE	;NUMBER OF BYTES IN CHECKSUM.
NAME_REV	EQU	ADJ_CKSUM+C_WORD_SIZE
END_ADJ		EQU	NAME_REV+(NAME_REV_SIZE*C_BYTE_SIZE)
*

**************************************************************************
*                                                                        *
*          COLOR STUFF -- PALETTE 0                                      *
*                                                                        *
**************************************************************************
COLOR_RED	EQU	0101H
COLOR_WHITE	EQU	0202H
COLOR_BLUE	EQU	0303H
COLOR_GREY	EQU	0404H
COLOR_YELLOW	EQU	0505H
COLOR_PURPLE	EQU	0606H
COLOR_GREEN	EQU	0707H
COLOR_BLACK	EQU	0808H
COLOR_DECAY	EQU	3C3CH
COLOR_BPR	EQU	3B3BH
COLOR_LF	EQU	3D3DH
COLOR_RGB	EQU	3E3EH
*COLOR + PALETTE [COLOR,PALETTE]
COLOR_PRED	EQU	01010303H
COLOR_PWHITE	EQU	02020303H
COLOR_PBLUE	EQU	03030303H
COLOR_PGREY	EQU	04040303H
COLOR_PYELLOW	EQU	05050303H
COLOR_PPURPLE	EQU	06060303H
COLOR_PGREEN	EQU	07070303H
COLOR_PBLACK	EQU	08080303H
COLOR_PBPR	EQU	3B3B0000H
COLOR_PDECAY	EQU	3C3C0000H
COLOR_PLF	EQU	3D3D0000H
COLOR_PRGB	EQU	3E3E0000H
***
*** SYSEQU.I
***
*** JFL 07 JAN 93; CLEARROMTRAP
*** JFL 15 JAN 93; ASSERT
***

**
** ASSEMBLY TIME CONDITIONAL VARIABLES
**
NOTFINAL EQU	1	;IF = 1, NOT PRODUCTION QUALITY PROGRAM
DEBUG	EQU	1	;THIS VERSION IS CURRENTLY UNDER CONSTRUCTION
ASSERT	EQU	1	;LEAVE IN FOR FINAL...
GERMAN	EQU	0	;ENGLISH RELEASE

YUNIT	EQU	0	;NOT REALLY TESTED WITH ROADKILL...
TUNIT	EQU	1

FORCEFREE EQU	0	;1 = GAME HARDWIRED FREE
FULLPRICE EQU	1	;1 = ALL THE PRICINGS ARE INCLUDED
NTSC	EQU	0	;IF 1, THEN SET THE VIDEO TO NTSC COMPATIBLE

**
** MACHINE TIMINGS
**
MACHINE_CYCLE	EQU	160	;NUMBER OF nanoSECONDS PER MACHINE CYCLE:
				;	40MHz = 200 ns
				;	48MHz = 166 ns
				;	50MHz = 160 ns
				;	60MHz = 133 ns
MICRO_SECOND	EQU	1000/MACHINE_CYCLE	;MACHINE CYCLES PER microSECOND
ONESECOND	EQU	55	;APPROX IRQS IN ONE SECOND

**
** GENERAL SYSTEM EQUATES
**
WDOGNUM	EQU	01A2B3C4DH	;"SYSTEM INITIALIZED" MARKER

**
** PIXBLT STUFF
**
PXSIZE    EQU		8
SCRN_PTCH EQU		512*PXSIZE
OFFSETVAL EQU		0
PLANEMSK  EQU		0
INI_CTRL  EQU		2CH

  .IF	TUNIT
SCRATCH		EQU	01000000h	;START OF SCRATCH
SCRATCHX	EQU	01400000h	;END OF SCRATCH
STCKST		EQU	SCRATCHX-10H	;TOP OF STACK
CMOS		EQU	01400000H	;START OF CMOS RAM
SCREEN		EQU	00h		;START OF SCREEN MEMORY
SCRNE		EQU	0200000h	;END OF SCREEN+1
COLRAM		EQU	01800000H	;COLOR RAM B0-B4 BLU, B5-B9 GRN, B10-B14 RED
PALSIZE		EQU	01000H		;PHYSICAL SIZE OF A PALETTE IN COLOR RAM
ROM		EQU	0FF800000h	;PROGRAM ROM
IROM		EQU	02000000h	;IMAGE ROM
IROMX		EQU	06000000h	;AFTER IMAGE ROM
CMAPSEL		EQU	01A80080h	;COLOR MAP SELECT (0-15)
SWITCH0		EQU	01600000h	;I/O (JAMMA CONNECTOR AND WIRED INPUTS)
SWITCH1		EQU	01600010H	;
COINS		EQU	01600010H	;
SWITCH2		EQU	01600020H	;I/O (WIRED INPUTS AND DIP SWITCHES) 
DIPSWITCH	EQU	01600030H	; DIP SWITCHES FOR Y UNIT
TALKPORT	EQU	01D00000h	;
SOUND		EQU	01D01030H	;SOUND I/O (B0-B7 = SOUND#)
COIN_COUNTERS	EQU	1D01020H	;COIN COUNTER DRIVERS
A2D_PORT	EQU	1D81040H	;A/D PORT
AUX_PORT	EQU	1D01010H	;AUXILLARY PORT
WDOG_BONE 	EQU	1D81070H	;ACCESS HERE TO DISABLE THE DOG
B_WDOG		EQU	4		;(L) FOR WATCHDOG TRIGGERED
B_A2D		EQU	5		;(L) FOR CONVERSION COMPLETE
B_SIRQ		EQU	7		;BIT TO READ FOR SOUND IRQ LINE
LEFT_COIN	EQU	01H		;LEFT COIN MASK
RIGHT_COIN	EQU	02H		;RIGHT COIN MASK
M_SW0BUTTONS	EQU	7070H		;ANY PLAYER BUTTONS
M_SW2BUTTONS	EQU	0070H		;ANY PLAYER BUTTONS
CLEARROMTRAP	EQU	1E00000H	;WRITE ANYTHING HERE
  .ELSE ;YUNIT
SCRATCH	EQU	01000000h	;START OF SCRATCH
SCRATCHX EQU	01100000h	;END OF SCRATCH
STCKST	EQU	010FFFF0h	;TOP OF STACK
CMOS	EQU	01400000H	;START OF CMOS RAM
SCREEN	EQU	00h		;START OF SCREEN MEMORY
SCRNE	EQU	0200000h	;END OF SCREEN+1
COLRAM	EQU	01810000H	;COLOR RAM B0-B4 BLU, B5-B9 GRN, B10-B14 RED
PALSIZE EQU	01000H		;PHYSICAL SIZE OF A PALETTE IN COLOR RAM
ROM	EQU	0FFC00000h	;PROGRAM ROM
IROM	EQU	02000000h	;IMAGE ROM
CMAPSEL	EQU	01A80080h	;COLOR MAP SELECT (0-15)
SWITCH	EQU	01C00000h	;I/O (JAMMA CONNECTOR AND WIRED INPUTS)
TALKPORT EQU	01C00010h	;
SWITCH2	EQU	01C00020H	;I/O (WIRED INPUTS AND DIP SWITCHES) 
COINS	EQU	01C00010H	;
DIPSWITCH EQU	01C00030H	; DIP SWITCHES FOR Y UNIT
SECCHIP	EQU	01C00060H	; LOCATION OF SECURITY CHIP
SOUND	EQU	01E00000h	;SOUND I/O (B0-B7 = SOUND#)
B_SIRQ	EQU	14		;BIT TO READ FOR SOUND IRQ LINE
LEFT_COIN EQU	0100H		;LEFT COIN MASK
RIGHT_COIN EQU	0200H		;RIGHT COIN MASK
M_SW1BUTTONS	EQU	  707H	;ANY BUTTONS
M_SW2BUTTONS	EQU	  007H	;ANY BUTTONS
  .ENDIF ;YUNIT

				;	    B8 =  MUSIC STROBE (0 EN)
				;	    B9 =  SOUND STROBE (0 EN)
				;	    B10 = RESET (0 EN)
SYSCTRL	EQU	01F00000H	;SYSTEM CONTROL LATCH
				;BIT 0 - UNUSED	-- SET ON
				;BIT 1 - UNUSED -- SET ON
				;BIT 2 - LED SELECT -- 1==ON
				;BIT 3 - UNUSED -- SET ON
				;BIT 4 - AUTO-ERASE ENABLE -- 0==ENABLED
				;BIT 5 - OBJECT PALETTE ENABLE -- 0==ENABLED
				;BIT 6 - ROMPROTECT 0==ENABLED
				;BIT 7 - 15 UNUSED -- SET ON

;	SYSTEM CONTROL LATCH ON Y UNIT
;
;	BIT 0	+ WATCHDOG CLOCK
;	BIT 1	+ WATCHDOG DATA
;	BIT 2	- LED ON
;	BIT 3	SET TO 1
;	BIT 4	- AUTO-ERASE ENABLE
;	BIT 5	- OBJECT PALETTE ENABLE
;	BIT 6	+ CMOS PAGE BIT 0
;	BIT 7 	+ CMOS PAGE BIT 1
;	BIT 8 - 11   4 BIT CONTROL CODE FOR SECURITY
;
**
** SYSTEM STUFF
**
AUTOERAS	EQU	10H
OBJPALET	EQU	20H
	.IF DEBUG
SYSCINIT	EQU	0FFBFH		; INITIAL SYSCTRL VALUE
	.ELSE ;!DEBUG
SYSCINIT	EQU	0FFFFH		; INITIAL SYSCTRL VALUE
	.ENDIF ;!DEBUG


**
** INTERRUPT CONSTANTS
**
	.IF	NTSC
ENDVBLNK	EQU	13H		;SCAN LINE TO END VERTICAL BLANKING
HSINT		EQU	108+ENDVBLNK	;HALF SCREEN
EOSINT		EQU	229+ENDVBLNK	;END OF SCREEN
DIRQ2INT	EQU	210+ENDVBLNK	;JUST BEFORE EOS
*SCOREINT	EQU	18+ENDVBLNK	;END OF SCORE AREA INTERRUPT
NORMDPYS 	EQU	0FEBCH		;NORMAL DPYSTRT VALUE
	.ELSE
ENDVBLNK	EQU	14H		;SCAN LINE TO END VERTICAL BLANKING
HSINT		EQU	135+ENDVBLNK	;HALF SCREEN
EOSINT		EQU	256+ENDVBLNK	;END OF SCREEN
DIRQ2INT	EQU	246+ENDVBLNK	;JUST BEFORE EOS
*SCOREINT	EQU	18+ENDVBLNK	;END OF SCORE AREA INTERRUPT
NORMDPYS 	EQU	-4		;NORMAL DPYSTRT VALUE
	.ENDIF

ERASELOC        EQU	COLRAM + 03F0H	;GAME AUTO ERASE COLOR LOCATION
ERASECOL        EQU	03F3F3F3FH	;GAME AUTO ERASE COLOR #

DPYSTRT0	EQU	-4
DPYSTRT1	EQU	-1004H
PAGE0ADR	EQU	[0,56]
PAGE1ADR	EQU	[100H,56]
PAGE0E		EQU	PAGE1ADR
PAGE1YO		EQU	100H		;FIRST LINE OF PAGE
ROWBITS		EQU	1000H		;BITS IN ONE DISPLAY ROW
AUTOELINE	EQU	510	     	;FIRST LINE OF AUTO ERASE

**
** DMA STUFF
**
DMAREGS:	EQU	01A800C0h	;BOTTOM OF DMA REGISTERS FOR MMTM

					;BIT 15:
					;1=START DMA (WRITE)
					;0=STOP DMA  (WRITE)
				
					;1=DMA BUSY (READ)
					;0=DMA IDLE (READ)
DMAOFFST:	EQU	01A80000h	;DMA OFFSET REGISTER
DMACTRL:	EQU	01A80010h	;DMA CONTROL REGISTER
DMASAGL:	EQU	01A80020h	;DMA DATA STARTING ADDRESS LOW 16 BITS
DMASAGH:	EQU	01A80030h	;DMA DATA STARTING ADDRESS HIGH 16 BITS
DMAHORIZ:	EQU	01A80040h	;DMA DESTINATION, X COORDINATE
DMAVERT:	EQU	01A80050h	;DMA DESTINATION, Y COORDINATE
DMAHSIZE:	EQU	01A80060h	;DMA DESTINATION, X SIZE	
DMAVSIZE:	EQU	01A80070h	;DMA DESTINATION, Y SIZE
DMACMAP:	EQU	01A80080h	;DMA COLOR MAP SELECT
DMACONST:	EQU	01A80090h	;DMA CONSTANT COLOR SUBSTITUTE
DMAXSCL:	EQU	01A800A0h	;DMA X SCALE REG
DMAYSCL:	EQU	01A800B0h	;DMA Y SCALE REG
DMATPLFT:	EQU	01A800C0h	;DMA TOP LEFT WINDOW BORDER
DMARTBOT:	EQU	01A800D0h	;DMA RT BOTTOM WINDOW BORDER
DMARSRVD1:	EQU	01A800E0h	;DMA Reserved Test Register
DMACONFIG:	EQU	01A800F0h	;DMA CONFIG REGISTER


*	LAYOUT OF DMA CONTROL REGISTER
DMAWZ	EQU	8001h	; Bit 0	     write zero data
DMAWNZ	EQU	8002h	; Bit 1	     write non-zero data
DMACZ	EQU	8004h	; Bit 2	     subst zero data with constant
DMACNZ	EQU	8008h	; Bit 3      subst non-zero data with constant
DMAWAL	EQU	8003h	; WRITE BOTH ZERO & NON-ZERO DATA
DMACAL	EQU	800ch	; WRITE CONSTANT ON BOTH ZERO & NON-ZERO DATA
DMAHFL	EQU	0010h	; Bit 4	     Horz flip
DMAVFL	EQU	0020h	; Bit 5	     Vert flip
DMACLP	EQU	0040h	; Bit 6	     Clip using UDLR method (0=offset method)
DMACMP	EQU	0080h	; Bit 7	     Zero Compression on
DMALDX	EQU	0300h	; Bits 8-9   Leading Zero Multiplier (0-3 = 1x,2x,4x,8x)
DMATRX	EQU	0c00h	; Bits 10-11 Trailing Zero Multiplier (0-3 = 1x,2x,4x,8x)
DMABPP	EQU	7000h	; Bits 12-14 Bits Per Pixel (1-7, 0=8)
DMAGO	EQU	8000h	; Bit 15     DMA Go/Halt
			;	    (one '0' write halts DMA,
			;     	     two '0' writes kills xfer,
			;     	     one '1' write restarts/starts) 

**
** LAYOUT OF DMA CONFIG REGISTER
**
DMAYWIN	EQU	0020H	; Bit 5	  (0 = rt/lft, 1 = top/bot)
DMACF4	EQU	0010H		;DMA CONFIG TIMING 4 BIT

**
** LAYOUT OF IMAGE HEADER
**
** JFL 12 NOV 92
** JFL 04 FEB 93; DEFINES FOR PT1..9
**
ISIZE		EQU    000H
ISIZEX		EQU    000H
ISIZEY		EQU    010H
ISAG		EQU    020H
IANIOFF		EQU    040H
IANIOFFX	EQU    040H
IANIOFFY	EQU    050H
ICTRL		EQU    060H
ICMAP		EQU    070H
IHDRSIZ		EQU    090H
IPT0		EQU    090H
IPT1		EQU    0B0H
IPT2		EQU    0D0H
IPT3		EQU    0F0H
IPT4		EQU    110H
IPT5		EQU    130H
IPT6		EQU    150H
IPT7		EQU    170H
IPT8		EQU    190H
IPT9		EQU    1B0H

IPTSIZEOF	EQU	5	; SIZEOF ONE POINT -- SHIFT
IPTSIZE		EQU	20H	; SIZE OF ONE POINT


*------- Register names for TMS34010 assembly language functions -------

*-----------------------------------------------------------------------
* Define names of I/O registers
*-----------------------------------------------------------------------
HESYNC	EQU	0C0000000h
HEBLNK	EQU	0C0000010h
HSBLNK	EQU	0C0000020h
HTOTAL	EQU	0C0000030h
VESYNC	EQU	0C0000040h
VEBLNK	EQU	0C0000050h
VSBLNK	EQU	0C0000060h
VTOTAL	EQU	0C0000070h
DPYCTL	EQU	0C0000080h
DPYSTRT	EQU	0C0000090h
DPYINT	EQU	0C00000A0h
CONTROL	EQU	0C00000B0h
HSTDATA	EQU	0C00000C0h
HSTADRL	EQU	0C00000D0h
HSTADRH	EQU	0C00000E0h
HSTCTLL	EQU	0C00000F0h
HSTCTLH	EQU	0C0000100h
INTENB	EQU	0C0000110h
INTPEND	EQU	0C0000120h
CONVSP	EQU	0C0000130h
CONVDP	EQU	0C0000140h
PSIZE	EQU	0C0000150h
PMASK	EQU	0C0000160h
* I/O register locations 23-27 are reserved for future expansion
HCOUNT	EQU	0C00001C0h
VCOUNT	EQU	0C00001D0h
DPYADR	EQU	0C00001E0h
REFCNT	EQU	0C00001F0h
*
hesync	EQU	0C0000000h
heblnk	EQU	0C0000010h
hsblnk	EQU	0C0000020h
htotal	EQU	0C0000030h
vesync	EQU	0C0000040h
veblnk	EQU	0C0000050h
vsblnk	EQU	0C0000060h
vtotal	EQU	0C0000070h
*	Display and memory control registers
dpyctl	EQU	0C0000080h
dpystrt	EQU	0C0000090h
dpyint	EQU	0C00000A0h
control	EQU	0C00000B0h
*	Host interface registers
hstdata	EQU	0C00000C0h
hstadrl	EQU	0C00000D0h
hstadrh	EQU	0C00000E0h
hstctll	EQU	0C00000F0h
hstctlh	EQU	0C0000100h
*	Interrupt control registers
intenb	EQU	0C0000110h
intpend	EQU	0C0000120h
*	Graphics I/O registers
convsp	EQU	0C0000130h
convdp	EQU	0C0000140h
psize	EQU	0C0000150h
pmask	EQU	0C0000160h
*
hcount	EQU	0C00001C0h
vcount	EQU	0C00001D0h
dpyadr	EQU	0C00001E0h
refcnt	EQU	0C00001F0h


X	EQU	1
Y	EQU	010000h
W	EQU	0
L	EQU	1

*-----------------------------------------------------------------------
* Masks for I/O register fields:
*-----------------------------------------------------------------------

*	STATUS BIT MASKS
CBIT	EQU	40000000H

*	DISPLAY CONTROL REGISTER BIT DEFINITIONS
HSD	EQU	01h		; Horizontal Sync Direction
DUDATE	EQU	0000001111111100B	; display update (2-9)
ORG	EQU	0400h		; ORiGin (1 = lower left; 0 = upper left)
SRT	EQU	0800h		; Shift Reg Transfer enable
SRE	EQU	01000h		; Screen Refresh Enable
DXV	EQU	02000h		; Disable eXternal Video
NIL	EQU	04000h		; Non-InterLaced video enable
ENV	EQU	08000h		; ENable Video

*	BIT FIELDS WITHIN CONTROL REGISTER
CD	EQU	08000h		;Mask for Cache Dis bit in CONTROL
PPOP	EQU	07C00h		;Mask for Pix Proc OPer in CONTROL
PBH	EQU	0200h		;Mask for PBH bit in CONTROL
PBV	EQU	0100h		;Mask for PBV bit in CONTROL
WIN	EQU	0C0h		;Mask for Window field in CONTROL
T	EQU	020h		;Mask for Transparency field in CONTROL
RR	EQU	018h		;Mask for dram Refresh Rate bit in CONTROL
RM	EQU	04h		;Mask for dram Refresh Mode bit in CONTROL

*	BITS WITHIN INTPEND AND INTENB
WVP	EQU	0800h		;Mask for Window Violation in INTPEND
DIE	EQU	0400h		;Mask for Disp Int in INTPEND
HIE	EQU	0200h		;Mask for Host Int in INTPEND
X2E	EQU	04h		;Mask for Ext Int 2 in INTPEND 
X1E	EQU	02h		;Mask for Ext Int 1 in INTPEND
B_X1E	EQU	1		;Bit Pos for Ext Int 1 in INTPEND
*	BIT POSITIONS IN INTPEND
DIP	EQU	10		;BIT TEST FOR DISPLAY INTERRUPT PENDING

*	FIELDS WITHIN HSTCTLL
MSGIN	EQU	07h	; Message from Host to GSP
INTIN_MSK	EQU	08h	; GSP can write 0 to this bit (ANDNI)
INTIN_BIT	EQU	03h		; GSP can write 0 to this bit (ANDNI)
INTOUT_MSK EQU	080h	; GSP can write 1 to this bit (ORI)
INTOUT_BIT EQU	07h		; GSP can write 1 to this bit (ORI)

* OPTIONS FOR WINDOW FIELD IN CONTROL REG
*W0	(ANDNI) No writes inhibited, no interrupt
W3	EQU 0C0h	;inhibit writes outside window, no interrupt
W2	EQU	080h	;Inhibit all writes, Int on attempt to write within window
W1	EQU	040h	;Int on attempt to write outside window.

*OPTIONS FOR PIXEL PROC OPERATIONS IN CONTROL REG 
* PPOP  (ANDNI)	replace
P_AND	EQU	0400h
P_ANDNOT	EQU	0800h
P_ZERO	EQU	0C00h
P_ORNOT	EQU	01000h
P_XNOR	EQU	01400h
P_NEG	EQU	01800h
P_NOR	EQU	01C00h
P_OR	EQU	02000h
P_NOP	EQU	02400h
P_XOR	EQU	02800h
P_NOTAND	EQU	02C00h
P_ONES	EQU	03000h
P_NOTOR	EQU	03400h
P_NAND	EQU	03800h
P_NOT	EQU	03C00h
P_ADD	EQU	04000h
P_ADDS	EQU	04400h
P_SUB	EQU	04800h
P_SUBS	EQU	04C00h
P_MAX	EQU	05000h
P_MIN	EQU	05400h

*-----------------------------------------------------------------------
* Define special A- and B-file registers
*-----------------------------------------------------------------------
* Special A-file registers:
***fp	EQU	A13		;Frame, param. stack
***pstk	EQU	A14		;Parameter stack pointer
***frame_pntr	EQU	A14	;Used by C Compiler
* Special B-file registers:
*
*	B FILE REGISTER GRAPHICS DEFINITIONS
*
* saddr	EQU	B0
* sptch	EQU	B1
* daddr	EQU	B2
* dptch	EQU	B3
* offset EQU	B4
* wstart EQU	B5
* wend	EQU	B6
* dydx	EQU	B7
* color0 EQU	B8
* color1 EQU	B9
* count	EQU	B10
* inc1	EQU	B11
* inc2	EQU	B12
* pattrn EQU	B13

SADDR	EQU	B0		;Source address register
SPTCH	EQU	B1		;Source pitch register
DADDR	EQU	B2		;Dest. address register
DPTCH	EQU	B3		;Dest. pitch register
OFFSET	EQU	B4		;XY offset register
* WSTART EQU	B5		;Window start register
* WEND	EQU	B6		;Window end register
DYDX	EQU	B7		;Delta X/delta Y register
COLOR0	EQU	B8		;Color 0 register
COLOR1	EQU	B9		;Color 1 register
* COUNT	EQU	B10
* INC1	EQU	B11
* INC2	EQU 	B12
* PATTRN EQU	B13

* EOF
***
*** FILE: APEQU.ASM
*** JFL 27 JUL 92; FROM DREDD
*** JFL 03 AUG 92; FROM DREDD
*** JFL 18 AUG 92
*** JFL 19 NOV 92
*** JFL 18 FEB 93; MISL SUPL
*** JFL 21 FEB 93; BARREL
*** JFL 14 MAR 93; FF
***

**************************************************************************
*								         *
* 	         AMUSEMENT PARK - MASTER EQUATE FILE			 *
* 									 *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

*SYMBOLS IN FILE T2TRIG.ASM
	.GLOBL	GETCOS, GETSIN
*SYMBOLS IN FILE T2PALL.ASM
	.GLOBAL	GETFPAL, PALTRANS, CLRBPAL, INITPAL, CLRFPAL, FINDPAL
	.GLOBAL	GETBPAL, INITBPAL, CLRPAL, DELPAL, DELETE_PAL, FREEPAL
	.GLOBAL	CHANGE_PAL, GET_PALID, INC_PALCNT, A_CHANGE_PAL, CLR_0PALS
	.GLOBAL	CHANGE_PAL_MULTI
*SYMBOLS IN FILE T2UTIL.ASM
	.GLOBAL	SCRCLR, CLR_SCRN, SETPPROC
	.GLOBAL SHVELCPY, SHVELFLP, FLP, XZCHK, CLRPDATA
	.GLOBAL	RANDU, RANDOM, SRAND, RANGRAND, RANDPER
	.GLOBL	RAND0, RANGERND
	.GLOBAL FRANIM, AUTOEOFF
	.GLOBAL	DMAQWAIT, DMAWAIT, DTIME, DMAN, DRAWBOX, DRAWBOX_OBJ
	.GLOBAL PSTOP, MIDPOINT, QBOXCK, QINSCRN, CLRPLAY
	.GLOBAL WHICHSID, ABOVBELO, ALIGNOBJ, GET_CPNT, GETCPNT, GETCENT
	.GLOBAL SLINEVEL, CLRBLOCK, FILBLOCK, CHKRANGE, FRAMSKIP, FILL_SCRN
	.GLOBAL	PNT_IN_RANGE, CENTEROBJ, CK_OBJ_CENT, CK_BOTTOM_CENT
	.GLOBAL	SET_ZPOS, SET_MZPOS, SET_TZPOS, GET_INIT_CPNT, ANIMATOR
	.GLOBAL	GET_BOTTOM_MID, ANIMATE_DEL, DMAWPAL
	.GLOBAL OSINK, OSINKANI
	.GLOBAL	STOPPED, SKIP_ANIMATION, KILL_DESTRUCTIBLES, PNTINBOX
	.GLOBAL	X_ETA, ANIMATE_TIME, SLINEVEL_LOAD, DTIME2
	.GLOBAL	BLNKAREA, BLNKAREA2, FILLAREA, FILLAREA2, YFLP, NOYFLP
	.GLOBAL	MAX, MIN, ABSMAX, ABSMIN, ABSINC, ABSDEC, ABSADD, ABSSUB
	.GLOBAL	TOGL_YFLP
	.GLOBAL	DOBIGSHAKE, DOSMALLSHAKE
	.GLOBAL PreFrag0, PreFrag1, PreFrag2, PreFrag3, PreFragUp, PreFragGun
	.GLOBAL	Fragger, FlshWyte, PreFragLR
	.GLOBAL	COLLS_OFF, COLLSOFF, ALL_COLLS_OFF, GET_CPNT_SCRNREL

*SYMBOLS IN FILE T2AFUNC.ASM
	.GLOBAL	A_STRT_ANIM, A_TOGGLE_FLPS, A_DEL_DAMAGE, A_SET_OZVEL
	.GLOBAL	A_CLR_OXVEL, A_OFFSCRN_DEL, A_OFFOPP_DEL, DELETE_KILLP
	.GLOBAL	A_ONSCREEN, A_INC_AnimSLP, A_SET_OXVEL, A_RAND_AnimSLP
	.GLOBAL	A_DEL_OID_DAMAGE, A_OFF_DELETE_OBJ, A_PRINT_SCORE
	.GLOBAL	A_PreFrag1, A_FLIP_BRANCH, A_OFFSCREEN, A_OBJ_ON_CHANGE_PAL
	.GLOBAL	A_SET_OYACCEL, A_RAND_FLIP, A_TOGGLE_FLIP

*SYMBOLS IN FILE T2.ASM
	.GLOBAL	CALLPLAY, IAUTOE, GUNPOWER_TO_MAX
*SYMBOLS IN T2ENEMY.ASM
	.GLOBAL	INC_ENEMY_COUNT, DEC_ENEMY_COUNT, GET_ENEMY_COUNT, COUNT_KILL
	.GLOBAL	COUNT_PLAYER_KILL
*SYMBOLS IN FILE T2SCOR.ASM
	.GLOBAL	SCORAREA, SCORE, PRINT_SCORE
*SYMBOLS IN FILE T2COLL.ASM
****	.GLOBAL	COLL_START
	.GLOBAL	FUTURE_COLL, PRESENT_COLL, HIGHWAY_COLL
*SYMBOLS IN FILES T2BGND.ASM OR T2BGDATA.ASM
	.GLOBAL	BAKBITS, SINGLE_PLANE
*SYMBOLS IN T2DRIVER.ASM
	.GLOBAL	DRIVER_CLR, DRIVER_UPDATE, FLASH_LAMP, COIL_DRIVE, NCOIL_DRIVE
	.GLOBAL	COIL_ON_TIME, COIL_OFF_TIME
*SYMBOLS IN T2PLAYER.ASM
	.GLOBAL	PLAYER_PRAISE, DELAYED_PRAISE, PLAYER_SND, A_PLAYER_SND
	.GLOBAL	POID_TO_PDATA
*SYMBOLS IN T2POWER.ASM
	.GLOBAL	GET_LOWEST_Y, CLIP_TO_Y

*
*GLOBAL DUMMY(NULL) ROUTINES
*
	.GLOBAL	DUMRETS, DUMCOLL, DUMCRETS, DUMBGND, DUMSCRIPT, DUMRETP
	.GLOBAL	DUMFGND, DUMDIE, DUMSRETS

	.GLOBAL	DUMPPRINT


**************************************************************************
*								         *
* PROCESS I.D. EQUATES							 *
*      	       15                   0					 *
* PID FORMAT --	NEWI IIPP IIII IIII					 *
* 	N = NON-DESTRUCTIBLE						 *
* 	E = WAVE END WAIT						 *
* 	W = WAVE END WILL NOT KILL THESE				 *
* 	I = PROC. SPECIFIC I.D.						 *
* 	P = RESERVED FOR BASE PLAYER PROCESS I.D.'S			 *
*								         *
**************************************************************************

PID_IND		EQU	0001H		;INDEPENDENT, KILLABLE
PID_MAIN	EQU	0002H		;MAIN PROCESS
PID_DRAG	EQU	0010H		;DRAG REACE MASTER
PID_DRAGONE	EQU	0020H		;ONE DRAG RACE


*COIN SWITCH PIDs
LC_PID          EQU     08000H   ;LEFT COIN      
CC_PID          EQU     08002H   ;CENTER COIN    
RC_PID          EQU     08004H   ;RIGHT COIN     
XC_PID		EQU	08006H	; FOURTH COIN SLOT
SLAM_PID        EQU     08008H  ;SLAM TILT PROCESS
COINCTR_PID	EQU	0800AH	; COIN COUNTER PROCESS
DIAG_PID	EQU	08100H	; DIAGNOSTICS PROCESS


**************************************************************************
*								         *
* OBJECT I.D. EQUATES							 *
* OID FORMAT --	VMPP TTTT SSSS IIII					 *
* 	V = AUTO VEL ADD						 *
* 	M = MISCELLANEOUS						 *
* 	P = RESERVED FOR PLAYERS					 *
* 	T = OBJECT TYPE							 *
* 	S = SUPPLEMENTAL LIST #						 *
* 	I = IDENTIFIER(SUB-TYPE)					 *
*								         *
**************************************************************************
;0000 0000 xxxx 0000 (OID) xxxx=bit positions of supp field
;If # of bits changed, fix size of ram table SUPPLSTS
SL_SUPL	EQU	24	;SHIFTS TO ISOLATE SUPL (SHIFT LEFT FIRST)
SR_SUPL	EQU	28
SL_POID EQU	18	;SHIFTS TO ISOLATE PLAYER NUMBER (SHIFT LEFT FIRST)
SR_POID EQU	30	
SL_TYPE	EQU	16+4	;SHIFTS TO ISOLATE TYPE (LEFT FIRST)
SR_TYPE	EQU	16+4+8
SL_SUBTYPE EQU	32-4	;SHIFT LEFT FIRST
SR_SUBTYPE EQU	32-4

B_SUPL	EQU	4	;BIT NUMBER OF SUPL ID

**
** MASKS
** JFL 18 AUG 92
**
MASK_PLAYER	EQU	03000H		;PLAYER I.D. FIELD MASK
MASK_TYPE	EQU	00F00H		;GET TYPE
M_OIDFAUTOVEL	EQU	8000H		;AUTO VEL ADD
B_OIDFAUTOVEL	EQU	15
M_OIDFHITBOX	EQU	4000H		;BOX OVERLAP IS GOOD FOR HIT DETECTION
B_OIDFHITBOX	EQU	14

**
** TYPES
** JFL 18 AUG 92
** JFL 11 JAN 93
**
TYPE_MISC	EQU	00000H		;MISC TYPE
TYPE_ARENA	EQU	00100H		;ARENA PIECE TYPE
TYPE_MISSILE	EQU	00200H		;MISSILE
TYPE_BG		EQU	00300H		;BACKGROUND
TYPE_POWERUP	EQU	00400H		;POWERUP
TYPE_CARPART	EQU	00500H		;CAR PART

**
** SUPPLEMENTAL LIST DEFINES
** JFL 27 JUL 92
**
SUPLIST_CAR	EQU	1		;CARS
SUPLIST_FOBJ	EQU	2		;FOBJS
SUPLIST_ARROW	EQU	3		;ARROW?
SUPLIST_MISL	EQU	4		;MISSILES
SUPLIST_MINE	EQU	5		;MINES
SUPLIST_FF	EQU	6		;FF
SUPLIST_BAR	EQU	7		;BARRIERS
SUPLIST_RUN	EQU	8		;RUNNER

;SUPL MASKS
SUPLM_CAR	EQU	SUPLIST_CAR*16 
SUPLM_FOBJ	EQU	SUPLIST_FOBJ*16
SUPLM_ARROW	EQU	SUPLIST_ARROW*16
SUPLM_MISL	EQU	SUPLIST_MISL*16
SUPLM_MINE	EQU	SUPLIST_MINE*16
SUPLM_FF	EQU	SUPLIST_FF*16
SUPLM_BAR	EQU	SUPLIST_BAR*16
SUPLM_RUN	EQU	SUPLIST_RUN*16

;SUPL OFFSETS
SUPL_CAR	EQU	SUPLIST_CAR*32 
SUPL_FOBJ	EQU	SUPLIST_FOBJ*32
SUPL_ARROW	EQU	SUPLIST_ARROW*32
SUPL_MISL	EQU	SUPLIST_MISL*32
SUPL_MINE	EQU	SUPLIST_MINE*32
SUPL_FF		EQU	SUPLIST_FF*32
SUPL_BAR	EQU	SUPLIST_BAR*32
SUPL_RUN	EQU	SUPLIST_RUN*32

**
** OBJECT IDS
** JFL 27 JUL 92
** JFL 03 AUG 92
** JFL 18 AUG 92
** JFL 19 NOV 92; OID_P0
** JFL 18 FEB 93; MISL SUPL
** JFL 21 FEB 93; BARREL
** JFL 14 MAR 93; FF
**
;CAR OIDS
OID_P0		EQU	00000H|SUPLM_CAR ;NO SUCH ID, USED FOR MASK
OID_P1		EQU	01000H|SUPLM_CAR
OID_P2		EQU	02000H|SUPLM_CAR
OID_P3		EQU	03000H|SUPLM_CAR
OID_DRONE	EQU	00000H|SUPLM_CAR
OID_RUNNER	EQU	00000H|SUPLM_RUN ;MUST OR WITH PLAYER ID

;MISC OIDS
OID_JUNK	EQU	TYPE_MISC
OID_FOBJ	EQU	TYPE_MISC|SUPLM_FOBJ
OID_FLOATER	EQU	TYPE_MISC|M_OIDFAUTOVEL
OID_PART	EQU	TYPE_MISC
OID_ARROW	EQU	TYPE_MISC|SUPLM_ARROW
OID_ARENA	EQU	TYPE_ARENA
OID_MISSILE	EQU	TYPE_MISSILE|SUPLM_MISL|M_OIDFAUTOVEL
OID_BG		EQU	TYPE_BG
OID_ICONEASY	EQU	TYPE_POWERUP|SUPLM_FOBJ|M_OIDFHITBOX
OID_ICONHARD	EQU	TYPE_POWERUP|SUPLM_FOBJ
OID_ICONMEDIUM	EQU	TYPE_POWERUP|SUPLM_BAR
OID_BARREL	EQU	TYPE_MISC|SUPLM_BAR
OID_LMINE	EQU	TYPE_MISSILE|SUPLM_MINE
OID_FF		EQU	TYPE_MISSILE|SUPLM_FF|M_OIDFAUTOVEL
OID_CARPART	EQU	TYPE_CARPART

*
*PALETTE ALLOCATOR EQUATES
*
*PALETTE ALLOCATION RAM
*FOR EACH COLOR PALETTE ID 32 BITS, PALETTE COUNT 16 BITS
*IF PALCNT>0 PALETTE IS ALLOCATED, IF PALCNT=0 PALETTE IS FREE
*
	.IF	YUNIT
NUMPAL	.SET	16	;(JFL WAS 32) NUMBER OF DYNAMICS ALLOCATED PALETTES
NMFPAL	.SET	6	;(JFL WAS 16) NUMBER OF FOREGROUND PALETTES
NMBPAL	.SET	10	;(JFL WAS 16) NUMBER OF BACKGROUND PALETTES
	.ELSE
NUMPAL	.SET	128	;NUMBER OF DYNAMICS ALLOCATED PALETTES
NMFPAL	.SET	64	;NUMBER OF FOREGROUND PALETTES
NMBPAL	.SET	64	;NUMBER OF BACKGROUND PALETTES
	.ENDIF

*
*PALETTE ENTRY DATA STRUCTURE
PALID	.SET	0		;PALETTE I.D.				(32)
PALCNT	.SET	020H		;PALETTE ALLOCATION COUNT		(16)
PALTIME	.SET	030H		;TIME WHEN PAL WAS DELETED
PALRSIZ	.SET	040H		;SIZE OF PALETTE ALLOCATION RAM
*
*PALETTE TRANSFER RAM DATA STRUCTURE
PLDCNT	.SET	0	;COLOR COUNT					(16)
PALSRC	.SET	010H  	;SOURCE ADDRESS OF PALETTE COLOR DATA 		(32)
PALDEST	.SET	030H	;DESTINATION PALETTE|START COLOR		(16)
PTRSIZ	.SET	040H	;SIZE OF EACH CELL
NUMPTR	.SET	32	;NUMBER OF TRANSFERS ALLOWED

*
*FIXED COLOR CYCLE EQUATES
*
CYCOLORS	.EQU	COLRAM+300H	;CYCLABLE COLORS LAST LINE OF 1st PALETTE
COLROFFST	.EQU	090H  		;OFFSET TO START COLORS
COLRCNT		.EQU	6	     	;TOTAL NUMBER OF COLORS TO CYCLE

PCYCLEPAL	.EQU	0H		;PLAYER CYCLERS
PCOLROFFST	.EQU	300H+090H	;OFFSET TO 1st PLAYER CYCLER
PCOLRCNT	.EQU	2		;NUMBER OF PLAYER CYCLERS

*
*DISPLAY FLAGS FOR FORE/BACKGROUND OBJECTS
M_SPAWNP EQU	80H		;SPAWN A PROCESS WITH THIS OBJECT IN A8
B_SPAWNP EQU	7

*
*BUY-IN WINDOW CONSTANTS
*
BUYTIME	.EQU	10
BUYSLP	.EQU	4
BUYTICK	.EQU	52/BUYSLP

*
*BACKGROUND UPDATER EQUATES
BLSTSTRT	.EQU	08000H
BLSTEND		.EQU	08001H

*
*FLASH LAMP EQUATES
*
P1_FLASH1	.EQU	0
P1_FLASH2	.EQU	1
P1_FLASH3	.EQU	2
P1_FLASH4	.EQU	3
P2_FLASH1	.EQU	4
P2_FLASH2	.EQU	5
P2_FLASH3	.EQU	6
P2_FLASH4	.EQU	7

**
** CREATE_OBJ TABLE STRUCT
**
** JFL 15 OCT 92
**
COIMG		EQU	000H	;UHL
COCVECT		EQU	020H	;UHL
COID		EQU	040H	;UHW
COCTRL		EQU	050H	;UHW
COFLAGS		EQU	060H	;UHW
COSCALETYPE	EQU	070H	;UHW
COCFUNC		EQU	080H	;UHL
COSIZE		EQU	0A0H	; SIZE

*
*ALLPLYR - MACRO TO CALL A ROUTINE ON ALL PLAYERS.
*P1=ROUTINE-->A7
*
ALLPLYR	.macro	P1
 	MOVI	:P1:,A7
	CALLA	CALLPLAY
	.endm

* Declarations for condition codes in Macros
GT	.set	'GT'
GE	.set	'GE'
LT	.set	'LT'
LE	.set	'LE'
EQ	.set	'EQ'
NE	.set	'NE'
Z	.set	'Z'
NZ	.set	'NZ'
NC	.set	'NC'
UC	.set	'UC'
N	.set	'N'
LO	.SET	'LO'
LS	.SET	'LS'
HI	.SET	'HI'
HS	.SET	'HS'
V	.SET	'V'

	.GLOBAL	JLOCKED	;IN DR.ASM

LOCKUP	.MACRO
	PUSHST	
	DINT
	CALLA	JLOCKED
	POPST
	.ENDM

LOCKON	.MACRO	op
	JR:op:	lab?
	JRUC	lab2?
lab?
	PUSHST
	DINT
	CALLA	JLOCKED
	POPST
lab2?
	.ENDM

TLOCKUP	.MACRO
	TRAP	29
	.ENDM

TLOCKON	.MACRO	op
	JR:op:	lab?
	JRUC	lab2?
lab?
	TRAP	29
lab2?
	.ENDM

LOCKNROM .MACRO REG
	CMPI	ROM,REG
	LOCKON	LO
	.ENDM

MOVW	.macro R1,R2
	MOVE	:R1:,:R2:,W
	.endm

MOVL	.macro R1,R2
	MOVE	:R1:,:R2:,L
	.endm

SLEEPTA .MACRO TIME,ADR
	MOVI	:ADR:,A7
	.IF	TIME < 33
	MOVK	:TIME:,A0
	.ELSE
	MOVI	:TIME:,A0
	.ENDIF
	JAUC	PRCLSP
	.ENDM

BSTATE	.MACRO
	GETPC	B9
	.ENDM

	;QDIST SC:REG1,REG2 OUT:REG3	
QDIST	.MACRO	OBJ1,OBJ2,REG1,REG2,REG3
	MOVW	*:OBJ1:(OXPOS),:REG1:
	MOVW	*:OBJ2:(OXPOS),:REG3:
	SUB	:REG1:,:REG3:
	ABS	:REG3:
	MOVW	*:OBJ1:(OZPOS),:REG1:
	MOVW	*:OBJ2:(OZPOS),:REG2:
	SUB	:REG1:,:REG2:
	ABS	:REG2:
	CMP	:REG2:,:REG3:
	JRHS	QD3?
	MOVE	:REG3:,:REG1:    	
	MOVE	:REG2:,:REG3:
	MOVE	:REG1:,:REG2:
QD3?
	SRL	2,:REG2:
	ADD	:REG2:,:REG3:
	.ENDM

	;QDISTZOFF SC:REG1,REG2 OUT:REG3	
QDISTZOFF .MACRO OBJ1,OBJ2,REG1,REG2,REG3
	MOVW	*:OBJ1:(OZPOS),:REG1:
	MOVW	*:OBJ1:(OZOFF),:REG3:
	ADD	:REG3:,:REG1:
	MOVW	*:OBJ2:(OZPOS),:REG2:
	MOVW	*:OBJ2:(OZOFF),:REG3:
	ADD	:REG3:,:REG2:
	SUB	:REG1:,:REG2:
	ABS	:REG2:
	MOVW	*:OBJ1:(OXPOS),:REG1:
	MOVW	*:OBJ2:(OXPOS),:REG3:
	SUB	:REG1:,:REG3:
	ABS	:REG3:
	CMP	:REG2:,:REG3:
	JRHS	QD3?
	MOVE	:REG3:,:REG1:    	
	MOVE	:REG2:,:REG3:
	MOVE	:REG1:,:REG2:
QD3?
	SRL	2,:REG2:
	ADD	:REG2:,:REG3:
	.ENDM

	;QDISTXY X1,Y1,X2,Y2 SC:X2 OUT:Y2
QDISTXY	.MACRO	X1,Y1,X2,Y2
	SUB	:X1:,:X2:
	ABS	:X2:
	SUB	:Y1:,:Y2:
	ABS	:Y2:
	CMP	:X2:,:Y2:
	JRHS	QDXY?
	XOR	:X2:,:Y2:
	XOR	:Y2:,:X2:
	XOR	:X2:,:Y2:
QDXY?
	SRL	2,:X2:
	ADD	:X2:,:Y2:
	.ENDM

QRAND8	.MACRO	DST
	MOVW	@REFCNT,:DST:
	SLL	32-3-2,:DST:
	SRL	32-3,:DST:
	.ENDM

* EOF
**************************************************************************
*								         *
* 	           AMUSEMENT PARK - MENU EQUATE FILE			 *
* 									 *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

**************************************************************************
*								         *
* 	SCREEN_WIDE							 *
* 									 *
* 	CONSTANT FOR MENU SCREEN SIZE DEFINITIONS			 *
* 									 *
* 	= 0	400 X 256 ( TROG, T2, AMUSEMENT PARK )			 *
* 									 *
* 	= 1 	512 X 400 ( NARC )					 *
*								         *
**************************************************************************
SCREEN_WIDE	EQU	0

*
*	FOR EACH ENTRY IN THE MENU
*
MENU_TEXT_PTR	EQU	0		;OFFSET OF TEXT POINTER
MENU_ROUTINE	EQU	LONG_SIZE	;OFFSET OF ROUTINE
MENU_HELP	EQU	MENU_ROUTINE+LONG_SIZE
MENU_ENTRY_SIZE	EQU	3*LONG_SIZE   
*
BLNK_HELP	EQU	0		;NO HELP BOX FOR THIS ENTRY
NO_HELP		EQU	00000001H	;NO HELP AREA IN THIS MENU 
ADJ_HELP	EQU	00000002H	;PASS STRUCTURE POINTER TO ADJUSTMENT HELP ROUT
SND_HELP	EQU	00000003H	;CALLED ON SOUND TEST MENU
SND_PLAY	EQU	00000004H	;CALLED FROM SOUND "PLAY" SELECTIONS
*
SND_MESS_Y       EQU	190
SND_BOX_H        EQU	57

*
*	SPACING BETWEEN BOXES ON SCREEN
*
	.IF	SCREEN_WIDE
BOX_YGAP EQU	6
BOX_XGAP EQU	6
	.ELSE
BOX_YGAP EQU	3
BOX_XGAP EQU	5
	.ENDIF
*
*
*	A CENTERED BOX NEEDS TO BE MOVED LEFT THIS AMOUNT
*	(PIXELS) TO CORRECTELY FRAME CENTERED TEXT AT
*	THE SAME POSITION
*
*C_KLUDGE EQU	3		;BEFORE "SPACE WIDTH" BUG FIX
C_KLUDGE EQU	1
*
*	THESE DETERMINE THE THICKNESS OF THE BOX LINES
*
	.IF	SCREEN_WIDE
MB_XWID	EQU	5		;NARC VALUES
MB_YWID	EQU	5
	.ELSE
MB_XWID	EQU	3
MB_YWID	EQU	3
	.ENDIF

*
*	GAP BETWEEN A MENU BORDER BOX AND
*	THE SELECTION BAR
*
GAP	EQU	2		;GAP BETWEEN BORDER AND SELECTION BAR
*
*	CONSTANT TO PASS TO "DO_BORDER" FOR OUR
*	BOX SIZE
*
BORDER_SIZE	EQU	(MB_YWID*10000H)+MB_XWID

*******************************TEST TITLE CONSTANTS****************************
*
*	THESE ARE USED TO SET TOP BOX AND MAIN TITLE.
*	THE MENUS AND HELP SCREENS WILL SQUARE OFF 
*	TO THE NUMBERS SET HERE.
*
	.IF	SCREEN_WIDE
TM_X	EQU	256		;USED TO POSITION TITLE AND BOX TOGETHER
TM_Y	EQU	24
	.ELSE
TM_X	EQU	200
TM_Y	EQU	24
	.ENDIF

	.IF	SCREEN_WIDE
TIT_ULX	EQU	TM_X-212
TIT_LRX	EQU	TM_X+204
TIT_ULY	EQU	TM_Y-09
TIT_LRY	EQU	TM_Y+49
	.ELSE
TIT_ULX	EQU	TM_X-195
TIT_LRX	EQU	TM_X+189
TIT_ULY	EQU	TM_Y-06
TIT_LRY	EQU	TM_Y+32
	.ENDIF

********************************MAIN MENU CONSTANTS***************************

INST_ULY	EQU	TIT_LRY+BOX_YGAP	;Y RANGE FOR INSTRUCTION BOX
	.IF	SCREEN_WIDE
INST_LRY	EQU	INST_ULY+40
BAR_DY		EQU	-12
BAR_WID		EQU	235
MENU_DY		EQU	42
BAR_HITE	EQU	40
BAR_DX		EQU	8
	.ELSE
INST_LRY	EQU	INST_ULY+29
BAR_DY		EQU	-8
BAR_WID		EQU	183
;BAR_WID	EQU	(TIT_LRX-TIT_ULX)
;MENU_DY	EQU	27
MENU_DY		EQU	23
BAR_HITE	EQU	26
BAR_DX		EQU	6
	.ENDIF

MENU_X		EQU	TIT_ULX+GAP+MB_XWID+(BAR_WID/2)+C_KLUDGE
MENU_Y		EQU	INST_LRY+BOX_YGAP+MB_YWID+GAP-BAR_DY
*
*	HELP DRAWER CONSTANTS
*
HELP_X_MARGIN	EQU	10		;MARGIN FOR LEFT JUSTIFIED HELP TEXT
HELP_Y_MARGIN	EQU	8		;TOP OF BOX TO 1ST ENTRY
HELP_YLO_MARGIN	EQU	HELP_Y_MARGIN-4	;BOTTOM MARGIN IS A TOUCH LESS DUE
*					;TO SPACING
HELP_DY		EQU	12		;SCREEN UNITS PER ITEM.
*
*
*	ADJUSTMENT MENU CONSTANTS
*
*	"CURRENT SETTING" BOX
*
CUR_ULY		EQU	125
CUR_LRX		EQU	TIT_LRX
CUR_LRY		EQU	CUR_ULY+(INST_LRY-INST_ULY)	;SAME HEIGHT AS TOP BOX
CUR_ULY2	EQU	180
CUR_LRY2	EQU	CUR_ULY2+(INST_LRY-INST_ULY)
*
ADJ_ULY		EQU	CUR_LRY2+BOX_YGAP		;USE OUR "FIXED" SPACING.
ADJ_CULY	EQU	ADJ_ULY-50			;COIN UPPER LEFT Y
ADJ_PULY	EQU	ADJ_ULY-28
*
;COIN_HEAD_Y	EQU	CUR_ULY+91	;1ST OF TOP COIN INFO LINES
COIN_HEAD_Y	EQU	CUR_ULY+71	;1ST OF TOP COIN INFO LINES
MESS_CTS	EQU	COIN_HEAD_Y+35	;START/CONTINUE PLACE

**************************************************************************
*								         *
* 		COIN SELECT TABLE OFFSETS				 *
*								         *
**************************************************************************
*
*	IF "CHUTES" VALUE CHANGES.....EXTRA WORDS MUST BE PUT HERE
*
CS_LMULT	EQU	0
CS_CMULT	EQU	CS_LMULT+WORD_SIZE
CS_RMULT	EQU	CS_CMULT+WORD_SIZE
CS_XMULT	EQU	CS_RMULT+WORD_SIZE
CS_UCRED	EQU	CS_XMULT+WORD_SIZE
CS_UBON		EQU	CS_UCRED+WORD_SIZE
CS_UMIN		EQU	CS_UBON+WORD_SIZE
*CS_STRT	EQU	CS_UMIN+WORD_SIZE     
*CS_CONT	EQU	CS_STRT+WORD_SIZE     
CS_CDIV		EQU	CS_UMIN+WORD_SIZE
CS_FRAC		EQU	CS_CDIV+WORD_SIZE
CS_COPY		EQU	CS_FRAC+WORD_SIZE	;UP TO HERE IS COPIED AS ADJUSTMENTS
CS_LVAL		EQU	CS_COPY
CS_CVAL		EQU	CS_LVAL+WORD_SIZE
CS_RVAL		EQU	CS_CVAL+WORD_SIZE
CS_XVAL		EQU	CS_RVAL+WORD_SIZE
CS_LMES		EQU	CS_XVAL+WORD_SIZE
CS_RMES		EQU	CS_LMES+LONG_SIZE
CS_PROMPT	EQU	CS_RMES+LONG_SIZE
CS_TITLE	EQU	CS_PROMPT+LONG_SIZE
CS_LIST		EQU	CS_TITLE+LONG_SIZE
CS_PICK		EQU	CS_LIST+LONG_SIZE	;WHICH LINE TO ADD TO 2 TO START...1 TO
CS_SLOTS	EQU	CS_PICK+WORD_SIZE	;TEXT DESCRIBING COIN SLOTS
CS_SIZE		EQU	CS_SLOTS+LONG_SIZE
*
*
*	ADJUSTMENT STRUCTURE.   THIS STRUCTURE IS
*	POINTED TO BY THE 2ND MENU LONG WORD (WHERE NORMALLY
*	THE ROUTINE LIVES).  
*
AD_ROUT		EQU	0			;LONG...ROUTINE TO RUN WHEN SELECTED.
AD_TITLE	EQU	AD_ROUT+LONG_SIZE	;LONG...POINTER TO TITLE FOR RIGHT COLUMN
AD_HELP		EQU	AD_TITLE+LONG_SIZE	;LONG...POINT TO HELP STRUCT FOR EXPLANATION
AD_CMOS		EQU	AD_HELP+LONG_SIZE	;WORD...GET_ADJ / PUT_ADJ NUMBER.
AD_MIN		EQU	AD_CMOS+WORD_SIZE	;LONG...MINIMUM VALUE FOR ADJ.
AD_MAX		EQU	AD_MIN+LONG_SIZE	;LONG...MAXIMUM VALUE FOR ADJ.
AD_DELTA	EQU	AD_MAX+LONG_SIZE	;LONG...UNITS BETWEEN VALUES.
AD_ZEQU		EQU	AD_DELTA+LONG_SIZE	;LONG...NUMBER TO STORE AS A ZERO.
AD_NAMEIT	EQU	AD_ZEQU+LONG_SIZE	;LONG...ROUTINE TO PRINT VALUES.
AD_FLAGS	EQU	AD_NAMEIT+LONG_SIZE	;WORD...bit zero non zero says wrap 
						;	bit one non zero says BCD
						;	bit two says flag "1st 8 coinage changed"  (ADJVIRGIN)
						;	bit three says flag 1st 6 changed  (ADJ1st6)
						;	bit four says its hsr counter
AD_NAMPTR	EQU	AD_FLAGS+WORD_SIZE	;LONG...POINTER TO DATA FOR NAMEIT ROUTINE
AD_MAIN		EQU	AD_NAMPTR+LONG_SIZE	;LONG...MAIN MENU STRING

WRAP_BIT	EQU	0
BCD_BIT		EQU	1
VIRG_BIT	EQU	2
SIX_BIT		EQU	3
HSR_BIT		EQU	4
WRAP_VAL	EQU	1
BCD_VAL		EQU	2
VIRG_VAL	EQU	4
SIX_VAL		EQU	8
HSR_VAL		EQU	16
*
*	FOR CSELECT TABLE......
*
*	A1 = 1  PLOT ONLY THE STRING LIST (1 OR 2 POINTERS
*		CENTERED APPROPRIATELY
*
*	A1 = 2  PLOT THE 1ST LINE OF THE STRING LIST ALONG
*		WITH THE 2 CREDITS TO START...1 TO CONTINUE
*        
*	A1 = 3  PLOT THE 2ND LINE OF THE STRING LIST ALONG
*		WITH THE 2 CREDITS TO START...1 TO CONTINUE
*
CSM_LIST	EQU	1
CSM_1W_21	EQU	2
CSM_2W_21	EQU	3
CSM_3W_21	EQU	4
CSM_LAST	EQU	4

*
*	FOR CS_PICK:
*
SHOW_NONE	EQU	0		;JUST USE 2/1 BY ITSELF 
SHOW_1		EQU	2		;SHOW 1ST LINE
SHOW_2		EQU	3		;SHOW 2ND LINE
SHOW_3		EQU	4		;SHOW 3RD LINE

**************************************************************************
*								         *
* 	         AMUSEMENT PARK - DIPSWITCH EQUATE FILE			 *
* 									 *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************
;
;	DIP SWITCH ( 1C00030 )
;
DPMIRROR	EQU	0001H		;MIRROR DISPLAY SWITCH
DPMIRROR_RAW	.EQU	0080H		;RAW POSITION FROM PORT (THANX CARY)

DPUSECMOS	EQU	0002H		;USE CMOS MASK
DPCOINAGE	EQU	001CH		;COINAGE MASK
DPCREDITS	EQU	00E0H		;CREDITS TO START/CONTINUE MASK
DPCOUNTRY	EQU	0300H		;COUNTRY MASK
DPUNUSED1	EQU	0400H		;UNUSED BIT 1
DPCOUNTER	EQU	0800H		;NUMBER OF COIN COUNTERS
DPPLAYERS	EQU	1000H		;NUMBER OF HARDWARE PLAYERS
DPFREEZE	EQU	4000H		;FREEZE SWITCH
DPTEST		EQU	8000H		;TEST SWITCH
;
;	0 = OFF
;	1 = ON
;
;	THANKS TO MARK LOFFREDO FOR REAMING ME OVER AND REVERSING THE
;	DIP SWITCHES
;
;	DPMIRROR ( DS1 - 1 )
;
;	0 	= VIDEO SCREEN VIEWED THROUGH A MIRROR (IN CABINET)
;	1 	= VIDEO SCREEN VIEWED NORMALLY (FOR TEST BENCH)
;
;	DPUSECMOS ( DS1 - 2 )
;
;	0 	= DIP SWITCH COINAGE USED
;	1	= CMOS COINAGE USED
;
;	DPRIGHTSLOT ( DS1 - 5 4 3 ) 
;
;	000 	= 1 COIN / 1 CREDIT
;	001	= 2 COIN / 1 CREDIT 
;	010	= 3 COIN / 1 CREDIT
;	011	= 4 COIN / 1 CREDIT
;	100	= 1 COIN / 2 CREDIT
;	101	= 1 COIN / 3 CREDIT
;	110	= 1 COIN / 4 CREDIT
;	111	= FREEPLAY
;
;	DPUNUSED ( DS1 - 6 )
;
;	DPUNUSED ( DS1 - 7 )
;
;	DPUNUSED ( DS1 - 8 )
;
;	DPCOUNTRY ( DS2 - 2 1 )
;
;	00	= USA
;	01	= GERMAN
;	10	= FRENCH
;	11	= OUTERSPACE
;
;	DPUNUSED ( DS2 - 3 )
;
;	DPCOUNTER ( DS2 - 4 )
;
;	0	= 1 COUNTER 
;	1	= 2 COUNTERS
;
;	DPPLAYERS ( DS2 - 5 )
;
;	0	= GAME CONFIGURED FOR 2 PLAYERS
;	1	= GAME CONFIGURED FOR 1 PLAYER
;
;	DPUNUSED ( DS2 - 6 )
;
;	DPFREEZE ( DS2 - 7 )
;
;	0	= DON'T FREEZE SCREEN
;	1	= FREEZE SCREEN ( NOTE : MUST HAVE A TRANSITION TO WORK )
;
;	DPTEST ( DS2 - 8 )
;
;	0	= NORMAL NON-TEST
;	1	= TEST MODE
;
**************************************************************************
*								         *
* 	 	AUDIT AND ADJUSTMENT EQUATE FILE			 *
* 									 *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

*OFTEN REFERENCED CMOS ROUTINES
	.GLOBAL	GET_ADJ, AUD, AUD1, STORE_AUDIT, CLR_AUDR, GET_AUD, BAD_AUD

*
*        AUDITS
*
*        AUDITS ARE HANDLED BY AUDITS NUMBER OFF OF THE BASE
*        OF THE AUDIT REGION
*
*
*        IF "CHUTES" VALUE IS CHANGED....EXTRA VALUES MUST
*        BE PUT IN THIS TABLE.  (AND ADJUSTMENT TABLE OF COURSE)
*
AUDNULL		EQU	0

AUDLCOIN	EQU	1	;TOTAL COINS IN LEFT CHUTE
AUDCCOIN	EQU	2	;TOTAL COINS IN CENTER CHUTE
AUDRCOIN	EQU	3	;TOTAL COINS IN RIGHT CHUTE
AUD4COIN	EQU	4	;TOTAL COINS IN FOURTH CHUTE
AUDSCOIN	EQU	5	;TOTAL SERVICE CREDITS
AUDPAIDC	EQU	6	;TOTAL PAID CREDITS
*
FRST_C		EQU	AUDLCOIN	;FOR CLEARING COINS
LAST_C		EQU	AUDPAIDC
*
AUDSTART	EQU	7	;PLAYER STARTS

AUD1TIME	EQU	15	;TIME 1 PLAYER ONLY
AUD2TIME	EQU	16	;TIME 2 PLAYER SIMULTANEOUS

AUDPTIME	EQU	19	;TOTAL PLAY TIME
AUDAVGTL	EQU	20	;AVERAGE TIME/LIFE
AUDAVGTC	EQU	21	;AVERAGE TIME/CREDIT

AUDMAXWAVE	EQU	22	;MAX WAVE REACHED

AUDDEARNED	EQU	25	;DINOS EARNED 
AUDMAXBOZO	EQU	26	;MAXIMUM BOZO LEVEL ACHIEVED
AUDSLAMS	EQU	27	;NUMBER OF TIMES BEEN SLAMMED
AUDUPTIME	EQU	28	;GAME TOTAL UPTIME ( POWER ON TIME )
AUDCONTOFFER	EQU	29	;GAME CONTINUES OFFERED
AUDCONTTAKEN	EQU	30	;GAME CONTINUES TAKEN
AUDONTIME	EQU	31	;GAME POWER ON TIME
AUDAUTO		EQU	32	;AUTO CYCLE PASSES
AUDDOGGY	EQU	33	;WATCHDOG HITS
AUDAVGGC	EQU	34	;AVERAGE GAME COST
AUDNUMTL	EQU	35	;DIVISOR FOR TIME/LIFE
AUDNUMTC	EQU	36	;DIVISOR FOR TIME/CREDIT
AUDNUMTG	EQU	37	;GAMES COMPLETED

AUDWARNING	EQU	39	;SOFTWARE WARNING
AUDBADTRAP	EQU	40	;SOFTWARE TRAPS
AUDSECURITY	EQU	41	;SECURITY BREECH COUNT
AUDWAVECNT	EQU	42	;COUNTER FOR AVG WAVE REACHED
AUDFINISH	EQU	43	;GAMES THAT HAVE BEEN FINISHED
*
LAST_AUDIT	EQU	43	;LAST AUDIT FOR AUDIT CLEAR INFO
*
FRSTGAUD	EQU	AUDSTART
LASTGAUD	EQU	LAST_AUDIT

AUDCAL1UL	EQU	LAST_AUDIT+1	;PLAYER 1 UPPER LEFT CALIBRATION
AUDCAL1CENT	EQU	LAST_AUDIT+2	;PLAYER 1 CENTER CALIBRATION
AUDCAL1LR	EQU	LAST_AUDIT+3	;PLAYER 1 LOWER LEFT CALIBRATION
AUDCAL2UL	EQU	LAST_AUDIT+4	;PLAYER 2 UPPER LEFT CALIBRATION
AUDCAL2CENT	EQU	LAST_AUDIT+5	;PLAYER 2 CENTER CALIBRATION
AUDCAL2LR	EQU	LAST_AUDIT+6	;PLAYER 2 LOWER LEFT CALIBRATION
*
CALIBRATE_START	.EQU	AUDCAL1UL
CALIBRATE_END	.EQU	AUDCAL2LR

*
*        ADJUSTMENTS ARE ALL LONG WORDS REFERENCED BY ADJUSTMENT
*        NUMBER.
*
ADJNULL         EQU     0
ADJPRICE        EQU     1			;MASTER PRICING
ADJLMULT        EQU     2			;LEFT SLOT MULTIPLIER
ADJC1           EQU     ADJLMULT		;FIRST COIN TABLE ADJUSTMENT
ADJCMULT        EQU     3			;CENTER SLOT MULTIPLIER
ADJRMULT        EQU     4			;RIGHT SLOT MULTIPLIER
ADJ4MULT	EQU	5			;FOURTH SLOT MULTIPLIER
ADJCUNIT        EQU     6
ADJBUNIT        EQU     7
ADJMUNIT        EQU     8
ADJCDIV         EQU     9
ADJFRAC         EQU     10      ;NON ZERO SAYS SHOW HALF CREDITS
ADJCX           EQU     ADJFRAC           ;LAST COIN TABLE ADJUSTMENT
ADJCSTRT        EQU     11      ;CREDITS REQUIRED TO START
ADJCCONT        EQU     12      ;CREDITS REQUIRED TO CONTINUE
ADJDIFF         EQU     13
ADJHSRES        EQU     14
ADJLIVES        EQU     15
ADJEXTRA        EQU     16      ;EXTRA MAN EVERY
ADJNUMEXTRA     EQU     17      ;MAXIMUM NUMBER EXTRA MEN/COIN
ADJMUSIC        EQU     18	;ATTRACT MODE SOUND
ADJMAXC         EQU     19      ;MAXIMUM CREDITS
ADJFREPL        EQU     20      ;NON-ZERO MEANS FREE PLAY
ADJVIRGIN       EQU     21      ;NON-ZERO MEANS 1ST 8 OF COIN ADJUST BLOCK UNTOUCHED
ADJBOMBS	EQU	22	;NUMBER OF BOMBS PER GAME
ADJ1ST6         EQU     23      ;NON-ZERO MEANS 1ST 6 UNTOUCHED.
ADJNOCPAG       EQU     24
ADJBUYIN        EQU     25
ADJHSON		EQU	26	;IF = 0, DON'T ALLOW HIGH SCORE ENTRY
ADJMINTIME	EQU	27	;MINIMUM TIME GUARANTEED PER CREDIT	
LAST_ADJUST     EQU     27



