***
*** FILE: DRB.ASM
*** JFL 15 JUL 92; FROM DREDD
*** JFL 16 JUL 92
*** JFL 17 JUL 92
*** JFL 20 JUL 92
*** JFL 24 JUL 92; FIRST ROADBLOCKS
*** JFL 27 JUL 92
*** JFL 28 JUL 92
*** JFL 29 JUL 92
*** JFL 09 JUL 92; PERSPECTIVE PLANE
*** JFL 24 JAN 93; BACKGROUNDS REDONE
*** JFL 26 MAR 93; AR6
*** JFL/JMS 12 APR 93; MERGE
*** JFL 16 APR 93; A6E
***
 	.MLIB	"APMACS.LIB"
	.FILE	"DRB.ASM"
	.TITLE	" <<< DRB -- DERBY RACE BACKGROUND DATA >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**
** COMPILE FLAGS
**
DOGHOST		EQU	8	;WHICH GHOST MAP IS AVAIL

**************************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

	.INCLUDE	"AP.H"
	.INCLUDE	"BGNDTBL.GLO"
	.INCLUDE	"BGNDEQU.H"
	.INCLUDE	"APBG.I"
	.INCLUDE	"DRXY.I"
	.INCLUDE	"DRMO.I"
	.INCLUDE	"DRB.I"

** OTHERS USE
	.DEF	STARTPLANES	;DRB.ASM

** WE USE
	.REF	OBJINITRAMBG	;DRRAM.ASM
	.REF	OBJIHDRRAM	;DRRAM.ASM
	.REF	PREQLIST	;APD.ASM	
	.REF	DISPLISTPREQ	;APD.ASM
	.REF	BSA_X		;DREQUIP.ASM
	.REF	BSA_Y		;DREQUIP.ASM

**
** DEFINES
**
BLIMPZBG	EQU	64		;Z OF BACKGROUND

	.TEXT
	.EVEN

**
** PLANETBL
**
** SEE DRB.I
**
** JFL 16 OCT 92
**
PLANETBL
	;MISC BACKGROUNDS
	.LONG	PLANES_PRESENTS
	.LONG	PLANES_TITLE
	.LONG	PLANES_PICKCAR
	.LONG	PLANES_WIN
	.LONG	PLANES_WEPSEL
	.LONG	PLANES_PLYRSEL
	.LONG	PLANES_ENTER
	.LONG	PLANES_HIGHSCR

	;FIRST ARENA BACKGROUNDS
	.LONG	PLANES_ARENA1
	.LONG	PLANES_ARENA2
	.LONG	PLANES_ARENA3
	.LONG	PLANES_ARENA4
	.LONG	PLANES_ARENA5
	.LONG	PLANES_ARENA6
	.LONG	PLANES_ARENA7
	.LONG	PLANES_ARENA8

	;DEVELOPMENT BACKGROUNDS
	.LONG	PLANES_PERSPECTIVE
	.LONG	PLANES_GHOST1
	.LONG	PLANES_GHOSTARENA1
	.LONG	PLANES_GHOST2
	.LONG	PLANES_GHOSTARENA2
	.LONG	PLANES_GHOST3
	.LONG	PLANES_GHOSTARENA3
	.LONG	PLANES_GHOST4
	.LONG	PLANES_GHOSTARENA4
	.LONG	PLANES_GHOST5
	.LONG	PLANES_GHOSTARENA5
	.LONG	PLANES_GHOST6
	.LONG	PLANES_GHOST8

PLANETBLX

**
** STARTPLANES
**
** IN
**   A2 PLANE ID
** 
** TRASHES A10
**
** JFL 16 OCT 92
**
STARTPLANES
	MMTM	SP,A0,A1,A4,A5,A6,A7,A8,A9,A10,A11

	;
	SLL	5,A2		;SIZEOF PLANETBL
	ADDI	PLANETBL,A2
	.IF DEBUG
	CMPI	PLANETBLX,A2
	TLOCKON	HS
	.ENDIF ;DEBUG
	MOVL	*A2,A2
	CALLR	BGSTART ;IN:A2 BGPTR

	;PRE Q ALL THE DMA FOR THE BACKGROUND
	;THIS CLEANS OUT THE LIST
	;MUST BE DONE BEFORE CALL TO @ARENAINIT
	CALLA	DISPLISTPREQ

	MMFM	SP,A0,A1,A4,A5,A6,A7,A8,A9,A10,A11
	RETS


**
** MODULE STRUCT
**
** JFL 24 JAN 93
**
MODSIZEX	EQU	000H	;UHW
MODSIZEY	EQU	010H	;UHW
MODCOUNT	EQU	020H	;UHW
MODBLOCKS	EQU	030H	;UHL
MODHDRS		EQU	050H	;UHL
MODPALS		EQU	070H	;UHL
MODSIZE		EQU	090H	; SIZE

**
** MODULE BLOCK STRUCT
**
** JFL 24 JAN 93
**
MBFLAGS		EQU	000H	;UHW
MBX		EQU	010H	;UHW
MBY		EQU	020H	;UHW
MBHDR		EQU	030H	;UHW
MBSIZE		EQU	040H	; SIZE

**
** MBFLAGS
**
** ZZZZ ZZZZ DDDD PPPP
**
** ZZZZZZZZ ZOFF
** DDDD DMA FLAGS
** PPPP PAL BITS 0-3
**
** JFL 24 JAN 93

**
** BGSTART
**
** IN
**   A2 BGPTR (PLANES_XXX)
** OUT
** SCRATCH:A0-A11
**
** JFL 24 JAN 93
**
BGSTART
	MOVE	A2,A11

BGSLOOP
	;GET NEXT MODULE
	MOVL	*A11+,A10		;MODULE PTR
	CMPI	-1,A10
	JREQ	BGSX
	
	;GET X&Y OFFSETS
	MOVL	*A11+,A9		;Y:X OFFSET
	
	;------ DUMMY TEMP KLUDGE -------
	CMPI	PLANES_ARENA6+(2*32),A11
	JREQ	BGSTARTAR6	

	;START THE MODULE
	CALLR	BGMOD ;A9,A10 MODPTR,Y:X

	;LOOP
	JRUC	BGSLOOP
BGSX
	RETS

	.REF	ARENA_1_A	;IMGTBLB1.ASM
	.REF	ARENA_1_B	;IMGTBLB1.ASM
	.REF	AR1BOOB		;IMGTBLB1.ASM
OBJINITAR6
	.LONG	ARENA_1_A	;IMAGE
	.LONG	0		;COLLISION VECTOR
 	.WORD	OID_JUNK  	;OID
	.WORD	DMAWNZ		;OCTRL
	.WORD	0		;OFLAGS
	.WORD	STYPNONE	;OSCALTYP
 	.LONG	0		;CFUNC
	.LONG	0		;Z:X

	.LONG	ARENA_1_B	;IMAGE
	.LONG	0		;COLLISION VECTOR
 	.WORD	OID_JUNK  	;OID
	.WORD	DMAWNZ		;OCTRL
	.WORD	0		;OFLAGS
	.WORD	STYPNONE	;OSCALTYP
 	.LONG	0		;CFUNC
	.LONG	0		;Z:X

	.LONG	AR1BOOB		;IMAGE
	.LONG	0		;COLLISION VECTOR
 	.WORD	OID_JUNK  	;OID
	.WORD	DMAWNZ		;OCTRL
	.WORD	0		;OFLAGS
	.WORD	STYPNONE	;OSCALTYP
 	.LONG	0		;CFUNC
	.LONG	[6EH,0CEH]	;Z:X

	.LONG	0		;TERM

**
** BGSTARTAR6
**
** !! KLUDGE (COULDNT GET TO A WORKING BLIMP!)
**
** IN
**   A9 Z:X OFFSET
**
** JFL 26 MAR 93
**
BGSTARTAR6
	MOVI	OBJINITAR6,A5		;BLOCK INIT DEF
	MOVE	A9,A7

BSA6LOOP
	MOVL	*A5,A14
	JRZ	BSA6X

	CALLA	CREATE_OBJ
	JRZ	BSA6X

	;DEFAULT PLANE
	MOVI	PREQLIST,B0		;PLANE

	;SET THE COORDS
	MOVL	*A5+,A3
	JRZ	BSA6COORD

	;SPECIAL OVERLAY
	MOVI	FGLISTS,B0		;PLANE
	ADDXY	A9,A3
	JRUC	BSA6COK
BSA6COORD
    	MOVE	A7,A3			;MODULE Y:X OFFSET
BSA6COK
	MOVW	A3,*A0(OXPOS)		;SET X
	SRL	16,A3
	MOVW	A3,*A0(OZPOS)		;SET Z

	;SET SO NEXT COORD IS += HORIZ SIZE
	MOVW	*A0(OUSIZEX),A14
	ADDXY	A14,A7

	;SET SCALE
	MOVI	SCALE1TO1,A14
	MOVL	A14,*A0(OSCALEDMA)
	MOVW	A14,*A0(OSCALEMUL)

	;INSERT THE OBJ INTO THE PLANE LIST
	CALLA	INSPLANE ;B0 PLANEPTR

	JRUC	BSA6LOOP
BSA6X
	RETS	
	
**
** BGZTBL
**
** .LONG DISPLAYLIST,BGMJUMP
**
** INDEXED BY BLIMPZ - BLIMPZFIRST <- 64
**
** JFL 31 JAN 93
**
BGZTBL
	.LONG	PREQLIST,BGMBGSTATIC		;Z=64
	.LONG	FGLISTS,BGMFGOVERLAY		;Z=65
	.LONG	BGLISTS,BGMBGOVERLAY		;Z=66
BGZTBLX

BLIMPZFIRST	EQU	64			;DEFAULT BLIMP Z
BGZTBLSIZEOF	EQU	6

**
** BGMOD
**
** IN
**   A9	Y:X OFFSET
**  A10 MODPTR
** OUT
**
** JFL 24 JAN 93
**
BGMOD
	;LOAD UP FOR THIS MODULE
	MOVL	*A10(MODBLOCKS),A7	
	MOVL	*A10(MODHDRS),A6	
	MOVL	*A10(MODPALS),A4	
	JRUC	BGMFIRST

BGMLOOP
	;REG USE
	;  A0
	;  A1
	;  A2
	;  A3
	;  A4 MODPALS
	;  A5
	;  A6 MODHDRS
	;  A7 MODBLOCKS
	;  A8
	;  A9 Y:X OFFSET OF MODULE
	; A10 MODPTR
	; A11 PLANEPTR

	;USE THE RAM COPY OF THE OBJ INIT BLOCK
	MOVI	OBJIHDRRAM,A0

	;GET A FEW PAL BITS
	MOVW	*A7(MBHDR),A1		;BITS 12-15 ARE BITS 4-7 OF PAL INDEX
	MOVE	A1,A14
	SLL	16,A14			;THROW AWAY EXTEND BITS
	SRL	28,A14			;KEEP BITS PAL BITS
	SLL	4,A14			;SHIFT PAL BITS INTO PLACE

	;GET PTR TO IMAGE HEADER (80BITS PER ENTRY)
	SLL	20,A1		;THROW AWAY ALL BUT HDR BITS
	MOVE	A1,A3
	SRL	20-4,A3	  	;16BITS
	SRL	20-6,A1		;64BITS
	ADD	A3,A1
	ADD	A6,A1		;GET PARTIAL IMAGE HEADER PTR
	MOVL	*A1(ISIZE),*A0(ISIZE)
	MOVL	*A1(ISAG),*A0(ISAG)

	;PAL
	MOVW	*A7(MBFLAGS),A2
	MOVE	A2,A3
	SLL	28,A2		;DROP ALL BUT PAL BITS
	SRL	28,A2
	OR	A14,A2		;COMBINE THESE BITS WITH PAL BITS 4 AND 5
	SLL	5,A2   		;SIZEOF PAL ENTRY
	ADD	A4,A2		;ADD IN PAL TBL
	MOVL	*A2(0),*A0(ICMAP) ;SET PAL IN RAM OBJ

	;DMA CTRL WORD
	MOVI	DMAWNZ,A2	;CTRL
	SRL	4,A3		;DROP PAL BITS
	SLL	30,A3		;DROP ALL BUT FLIP BITS	
	JRC	BGMNZ		;DONT WRITE ZERO DATA
	INC	A2		;SET TO WRITE ZERO DATA
BGMNZ
	SRL	26,A3		;LINE UP FLIP BITS
	OR	A3,A2
	MOVW	*A1(040H),A14	;GET DMA CTRL BITS FROM PARTIAL IHDR
	OR	A14,A2
	MOVW	A2,*A0(ICTRL)	;SET IN OUR RAM FULL IHDR

	;SET UP THE CREATE OBJECT BLOCK
	MOVI	OBJINITRAMBG,A5
	MOVL	A0,*A5(COIMG)	;SET IHDR ADDRESS IN INIT BLOCK
	CALLA	CREATE_OBJ
	TLOCKON	Z

	;SET OIMG SO ITS NOT AT THE TMP RAM BUFFER
	MOVL	A1,*A0(OIMG)

	;GET COORDS
	MOVL	*A7(MBX),A3		;Y:X
	MOVW	*A7(MBFLAGS),A14	;ZOFF FROM BLIMP -- DETERMINE PLANE		
	SLL	16,A14			;ISOLATE Z
	SRL	16+8,A14
	SUBI	BLIMPZFIRST,A14
	TLOCKON	N
	SLL	BGZTBLSIZEOF,A14	
	ADDI	BGZTBL,A14
	.IF DEBUG
	CMPI	BGZTBLX,A14
	TLOCKON	HS
	.ENDIF ;DEBUG
	MOVL	*A14+,A2		;DISPLAY LIST
	MOVE	A2,B0
	MOVL	*A14,A14
	JUMP	A14

BGMBGOVERLAY

	;
	;BG OBJECT OVERLAY, MAKE Z COORD AT BOTTOM FOR PROPER SORTING
	;
	MOVW	*A0(OUSIZEY),A5
	SLL	16,A5
	ADDXY	A5,A3			;Y:X += YSIZE:0
	SRL	16,A5
	NEG	A5
	MOVW	A5,*A0(OZOFF)		;OZOFF = -YSIZE
	JRUC	BGMBGSTATIC

BGMFGOVERLAY

	;
	;FG OBJECT OVERLAY, MAKE ANIM POINT AT BOTTOM FOR PROPER SORTING
	;
	MOVL	*A0(OUSIZE),A5
	MOVE	A5,A14
	SRL	16,A14			;KEEP ONLY Y SIZE
	SLL	16,A14
	MOVE	A14,A1			;SETUP ANI OFF
	ADDXY	A14,A3			;COMPENSATE FOR ANIM POINT

	;TEST FOR FLIPS
	BTST	B_FLIPH,A2
	JRZ	BGMNOH

	;COMPENSATE FOR FLIPPING
	MOVE	A5,A14
	ZEXT	A14,W
	ADDXY	A14,A3
BGMNOH

	BTST	B_FLIPV,A2
	JRZ	BGMNOV

	;COMPENSATE FOR FLIPPING
	MOVE	A5,A14
	SRL	16,A14
	SLL	16,A14
	ADDXY	A14,A3
BGMNOV

	;SET ANI OFF
	MOVL	A1,*A0(OUANIOFF)
	MOVL	A1,*A0(OANIOFF)

BGMBGSTATIC
	;
	;SIMPLE BG OBJ
	;

	;SET THE COORDS
	ADDXY	A9,A3			;MODULE Y:X OFFSET
	MOVW	A3,*A0(OXPOS)		;SET X
	SRL	16,A3
	MOVW	A3,*A0(OZPOS)		;SET Z
		  
	;SET SCALE
	MOVI	SCALE1TO1,A14
	MOVL	A14,*A0(OSCALEDMA)
	MOVW	A14,*A0(OSCALEMUL)

	;INSERT THE OBJ INTO THE PLANE LIST
	CALLA	INSPLANE ;B0 PLANEPTR

BGMNEXT
	;NEXT BLOCK
	ADDI	MBSIZE,A7
BGMFIRST
	;CHECK IF THIS IS END OF BLOCK ENTRY
	MOVW	*A7,A14
	CMPI	-1,A14
	JRNE	BGMLOOP

BGMX
	RETS


***
*** PLANE DEFINITIONS -----------------------------------------------------
***

PLANES_PRESENTS
	.LONG	TITLEBMOD		;MODULE
	.WORD	0,0			;X,Y 
	.LONG	-1			;TERM

PLANES_WIN
	.LONG	WINBMOD			;MODULE
	.WORD	0,0			;X,Y
	.LONG	-1			;TERM

PLANES_WEPSEL
	.LONG	WEAPONBMOD		;MODULE
	.WORD	BSA_X,BSA_Y		;X,Y
	.LONG	-1 			;TERM

PLANES_PLYRSEL
	.LONG	PLYRCARBMOD		;MODULE
	.WORD	0,0			;X,Y
	.LONG	-1 			;TERM

PLANES_ENTER
	.LONG	ENTERBMOD		;MODULE
	.WORD	0,0			;X,Y
	.LONG	-1			;TERM

PLANES_HIGHSCR
	.LONG	HIGHSCRBMOD		;MODULE
	.WORD	0,0			;X,Y
	.LONG	-1			;TERM

PLANES_TITLE
	.LONG	TITLEBMOD		;MODULE
	.WORD	60,10			;X,Y
	.LONG	-1			;TERM

PLANES_PICKCAR
	.LONG	TITLEBMOD	;MODULE
	.WORD	15,20			;X,Y
	.LONG	-1			;TERM

PLANES_GHOST1
	.IF DOGHOST==1
	.LONG	GHOST1BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_GHOSTARENA1
	.IF DOGHOST==1
	.LONG	GHOST1BMOD		;MODULE
	.WORD	ARENAX,ARENAY-GHOSTCOLORHEIGHT ;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_ARENA1
	.LONG	ARENA1BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM

PLANES_GHOST2
	.IF DOGHOST==2
	.LONG	GHOST2BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_GHOSTARENA2
	.IF DOGHOST==2
	.LONG	GHOST2BMOD		;MODULE
	.WORD	ARENAX,ARENAY-GHOSTCOLORHEIGHT ;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_ARENA2
	.LONG	ARENA2BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM

PLANES_GHOST3
	.IF DOGHOST==3
	.LONG	GHOST3BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_GHOSTARENA3
	.IF DOGHOST==3
	.LONG	GHOST3BMOD		;MODULE
	.WORD	ARENAX,ARENAY-GHOSTCOLORHEIGHT ;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_ARENA3
	.LONG	ARENA3BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM

PLANES_GHOST4
	.IF DOGHOST==4
	.LONG	GHOST4BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_GHOSTARENA4
	.IF DOGHOST==4
	.LONG	GHOST4BMOD		;MODULE
	.WORD	ARENAX,ARENAY-GHOSTCOLORHEIGHT ;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_ARENA4
	.LONG	ARENA4BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM

PLANES_GHOST5
	.IF DOGHOST==5
	.LONG	GHOST5BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_GHOSTARENA5
	.IF DOGHOST==5
	.LONG	GHOST5BMOD		;MODULE
	.WORD	ARENAX,ARENAY-GHOSTCOLORHEIGHT ;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_ARENA5
	.LONG	ARENA5BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM

PLANES_GHOST6
	.IF DOGHOST==6
	.LONG	GHOST6BMOD			;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_ARENA6
	.LONG	0 ;DUMMY		;MODULE
	.WORD	ARENAX,ARENAY+3		;X,Y
	.LONG	-1			;TERM

PLANES_ARENA7
	.LONG	ARENA7BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM

PLANES_ARENA8
	.LONG	ARENA8BMOD		;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM

PLANES_GHOST8
	.IF DOGHOST==8
	.LONG	GHOST8BMOD			;MODULE
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM
	.ENDIF ;DOGHOST

PLANES_PERSPECTIVE
	.LONG	prspctvBMOD
	.WORD	ARENAX,ARENAY		;X,Y
	.LONG	-1			;TERM

* EOF

