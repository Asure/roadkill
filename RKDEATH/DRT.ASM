***
*** FILE: DRT.ASM
*** DERBY RACE TERRAIN ROUTINES
***
*** JFL 21 SEP 92
*** JFL 22 SEP 92
*** JFL 23 SEP 92
*** JFL 28 SEP 92
*** JFL 30 SEP 92
*** JFL 08 OCT 92
*** JFL 12 OCT 92
*** JFL 13 OCT 92; VEC
*** JFL 14 OCT 92; NEW MAP
*** JFL 16 OCT 92; REDID TOPOTILT
*** JFL 03 NOV 92; APRI
*** JFL 16 NOV 92
*** JFL 03 DEC 92; TILT CHANGES DIR
*** JFL 23 DEC 92; NEW VEC
*** JFL 07 JAN 93
*** JFL 12 JAN 93
*** JFL 09 FEB 93
*** JFL 01 MAR 93; SLOPEJ
*** JFL 26 MAR 93; AR6
*** JFL 12 APR 93; NO LAPS IN SCORE BOX
*** JFL 16 APR 93; MEDUP/DOWN
***

	.MLIB	"APMACS.LIB"
	.FILE	"DRT.ASM"
	.TITLE	"<<< DERBY RACE -- TERRAIN >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST
**
** COMPILE FLAGS
**
SCORELAPS	EQU	1	;SCORE FOR A FINISHED LAP
WINLAPS		EQU	1	;WIN WHEN LAPS >= LAPSTOWIN

***********************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
*************************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"
	.INCLUDE	"DR.I"
	.INCLUDE	"DRXY.I"
	.INCLUDE	"DRT.I"
	.INCLUDE	"DRS.I"
	.INCLUDE	"DRC.I"
	.INCLUDE	"DRVEC.I"
	.INCLUDE	"DRV.I"
	.INCLUDE	"DRINP.I"
	.INCLUDE	"DRSND.I"
	.INCLUDE	"DRFGHOST.I"
	.INCLUDE	"DRFSHOW.I"

** OTHERS USE
	.DEF	TOPOREACT	;DRT.ASM
	.DEF	HITCARTOPO	;DRT.ASM
	.DEF	INITTOPO	;DRT.ASM
	.DEF	SETARENA	;DRT.ASM
	.DEF	TOPOXZ		;DRT.ASM
	.DEF	MISBLOWUPTBL	;DRT.ASM
	.DEF	MISBLOWUPTBLX	;DRT.ASM
	.DEF	DRONEAVOIDTBL	;DRT.ASM
	.DEF	DRONEAVOIDTBLX	;DRT.ASM

** WE USE
	.REF	AR1TMAP		;DRARENA.ASM
	.REF	AR1TRACKINFO	;DRARENA.ASM
	.REF	AR1INIT		;DRARENA.ASM
	.REF	AR1ACTOBJS	;DRARENA.ASM
	.REF	AR2TMAP		;DRARENA.ASM
	.REF	AR2TRACKINFO	;DRARENA.ASM
	.REF	AR2INIT		;DRARENA.ASM
	.REF	AR2ACTOBJS	;DRARENA.ASM
	.REF	AR3TMAP		;DRARENA.ASM
	.REF	AR3TRACKINFO	;DRARENA.ASM
	.REF	AR3INIT		;DRARENA.ASM
	.REF	AR3ACTOBJS	;DRARENA.ASM
	.REF	AR4TMAP		;DRARENA.ASM
	.REF	AR4TRACKINFO	;DRARENA.ASM
	.REF	AR4INIT		;DRARENA.ASM
	.REF	AR4ACTOBJS	;DRARENA.ASM
	.REF	AR5TMAP		;DRARENA.ASM
	.REF	AR5TRACKINFO	;DRARENA.ASM
	.REF	AR5INIT		;DRARENA.ASM
	.REF	AR5ACTOBJS	;DRARENA.ASM
	.REF	AR6TMAP		;DRARENA.ASM
	.REF	AR6TRACKINFO	;DRARENA.ASM
	.REF	AR6INIT		;DRARENA.ASM
	.REF	AR6ACTOBJS	;DRARENA.ASM
	.REF	AR7TMAP		;DRARENA.ASM
	.REF	AR7TRACKINFO	;DRARENA.ASM
	.REF	AR7INIT		;DRARENA.ASM
	.REF	AR7ACTOBJS	;DRARENA.ASM
	.REF	AR8TMAP		;DRARENA.ASM
	.REF	AR8TRACKINFO	;DRARENA.ASM
	.REF	AR8INIT		;DRARENA.ASM
	.REF	AR8ACTOBJS	;DRARENA.ASM

	.REF	LAPCHECKPOINTS	;DR.ASM
	.REF	LAPSTOWIN	;DR.ASM
	.REF	WINNER		;DR.ASM
	.REF	SCOREVALADD	;DRS.ASM
	.REF	TTRIG		;DR.ASM
	.REF	AREAAWAY180TBL	;DRH.ASM
	.REF	ADDTIREVEC	;DR.ASM
	.REF	CLEARVEC	;DR.ASM
	.REF	CLEARINPVEC	;DR.ASM
	.REF	CARTHROWUP	;DRC.ASM
	.REF	CARDISABLE	;DRC.ASM
	.REF	SETCARDIR	;DR.ASM
	.REF	SHAKESCREEN	;DR.ASM
	.REF	CHANGECARSPEED	;DR.ASM
	.REF	ARENASND	;DRSND.ASM
	.REF	RANDOMSPIN	;DRH.ASM
	.REF	ANISPAWNFROMTBL	;DRA.ASM
	.REF	COMPTODIRVEC	;DR.ASM
	.REF	MISPICKUP	;DRMIS.ASM
	.REF	CARHITAOLOBJ	;DRH.ASM

	.REF	WAVEIRQS
** WE USE -- RAM
	.REF	ARENATMAP	;DRRAM.ASM
	.REF	ARENATRACKINFO	;DRRAM.ASM
	.REF	ARENAINIT	;DRRAM.ASM
	.REF	ARENAACTOBJS	;DRRAM.ASM
	.REF	DEBUGOBJ	;DRRAM.ASM	   

	.TEXT
	.EVEN

**
** DEFINES
**
TOPOTHROWDUR		EQU	1	;SHOULD BE BASED ON DAMAGE
TILTSPEEDEFFECT		EQU	6	;BIGGER IS MORE EFFECT
GHOSTMAPEDGE		EQU	[SCRBOT-2,SCRRGT-1] ;LAST VALID

**
** MISC
**
CRASHTRACKDAM	EQU	0FH		;IF !(CNT&THIS) DO DAMAGE 
M_THEIGHT	EQU	0FH		;MASK TO GET HEIGHT
TMAXHEIGHT	EQU	0FH		;MAX HEIGHT

***
*** ----------------------- INIT ------------------------------------------
***

**
** INITTOPO
**
** JFL 25 SEP 92
**
INITTOPO
	RETS

***
*** TOPO FUN ----------------------------------------------------------------
***

**
** TOPOXZ
**
** IN
**   A2 Z:X
**   A3 SCRATCH
** OUT
**   C SET IF OFFSCREEN
**   A2 TOPOC
**   A3 TOPOBA AS BYTES 
**
** JFL 12 JAN 93
**
TOPOXZ
	;TEST FOR SCREEN EDGES
	CLR	A14
	CMPXY	A14,A2
	JRXN	TXZOFFLEFT
	JRYN	TXZOFFTOP
	MOVI	GHOSTMAPEDGE,A14	;Y:X
	CMPXY	A14,A2
	JRXGT	TXZOFFRIGHT
	JRYGT	TXZOFFBOTTOM

	;TURN POSITION INTO AN INDEX
	MOVE	A2,A3
	SRL	16+GHOSTFROMZ,A3
	SLL	GHOSTROWSHIFT,A3	;ROW OFFSET
	ZEXT	A2,W
	SRL	GHOSTFROMX,A2
	SLL	GHOSTENTRYSHIFT,A2	;COLUMN OFFSET
	ADD	A3,A2			;OFFSET
	MOVL	@ARENATMAP,A3
	ADD	A3,A2
	MOVB	*A2,A2
	SLL	25,A2			;0..127
	SRL	25,A2

	;MAP COLOR TO TOPOA & TOPOB
	MOVE	A2,A3
	SLL	ETSIZEOF,A3		;SIZEOF ELEVTBL ENTRY
	ADDI	ELEVTBL,A3
	.IF DEBUG
	CMPI	ELEVTBLX,A3
	TLOCKON	HS
	JRLO	TXXXX
	MOVI	ELEVTBL,A3
TXXXX
	;TLOCKON	HS
	.ENDIF ;DEBUG
	MOVW	*A3,A3

	CLRC		;ONSCREEN
	RETS

TXZOFFLEFT
	MOVK	ETS_TRACK,A3		;TOPOBA
	JRUC	TXZOFF
TXZOFFTOP
	MOVI	0C0H<<8+ETS_TRACK,A3	;TOPOBA
	JRUC	TXZOFF
TXZOFFRIGHT
	MOVI	080H<<8+ETS_TRACK,A3	;TOPOBA
	JRUC	TXZOFF
TXZOFFBOTTOM
	MOVI	040H<<8+ETS_TRACK,A3	;TOPOBA

TXZOFF
	CLR	A2	;TOPOC
	SETC		;OFFSCREEN
	RETS
	
**
** HITCARTOPO
**
** IN
**   A0 CAR
**   A7 CD
**
** BREAKS: A1,A2,A3,A4,A5,A6,A8,A9,A10,A11
**
** JFL 22 JUL 92
** JFL 23 JUL 92
** JFL 28 JUL 92
** JFL 05 AUG 92; SCALE HIT POINTS
** JFL 09 AUG 92; ONLY CHECK TIRES
** JFL 17 AUG 92; M_IMMOBILE FLAG
** JFL 16 SEP 92; REWORKED FOR HITCARTOPO
** JFL 18 SEP 92; SCRATCH A2,A3,A14,B0-B5
** JFL 28 SEP 92
** JFL 06 OCT 92; SCALETIREPOINTS
** JFL 09 NOV 92
** JFL 12 JAN 93
**
HITCARTOPO
	;SCALE THE TIRE POINTS
	CALLR	SCALETIREPOINTS ;IN:A0,A2-A6,A7,A8-A9 OBJ,SC,CD,SC

 	;OBJ0 -- GET Z:X OF OBJECT
	MOVW	*A0(OXPOS),A1
	MOVW	*A0(OZPOS),A14
	SLL	16,A14
  	MOVY	A14,A1			;Z:X 

	;OBJ0 -- GET COLLISION DATA
	MOVE	A7,A5
	ADDI	CDTP0,A5
	MOVK	TIREAREAS,A6
	MOVI	GHOSTMAPEDGE,A8		;Y:X (OR Z:X)
	MOVL	@ARENATMAP,A4
	CLR	A9
	CLR	A10
	CLR	A11

	;REGS
	;  A0 OBJ
	;  A1 Y:X OF OBJ
	;  A2 SCRATCH
	;  A3 SCRATCH
	;  A4 ARENA TERRAIN MAP
	;  A5 POINTPTR
	;  A6 TIRE COUNT
	;  A7 CD
	;  A8 SCRBOT:SCRRGT
	;  A9 TOPOA
	; A10 TOPOB
	; A11 TOPOC

HCTLOOP
	;GET POINT & CHECK IF ITS OFF SCREEN
	MOVL	*A5+,A2			;Z:X OFFSET OF POINT
	ADDXY	A1,A2			;Z:X
	JRXN	HCTOFFLEFT
	JRYN	HCTOFFTOP
	CMPXY	A8,A2
	JRXGT	HCTOFFRIGHT
	JRYGT	HCTOFFBOTTOM

	;TURN POSITION INTO AN INDEX
	MOVE	A2,A3
	SRL	16+GHOSTFROMZ,A3
	SLL	GHOSTROWSHIFT,A3	;ROW OFFSET
	ZEXT	A2,W
	SRL	GHOSTFROMX,A2
	SLL	GHOSTENTRYSHIFT,A2	;COLUMN OFFSET
	ADD	A2,A3			;OFFSET

	;PULL COLOR FROM GHOST MAP
	ADD	A4,A3
	MOVB	*A3,A3			;GET MAP ENTRY
	SLL	25,A3			;0..127
	SRL	25,A3
	OR	A3,A11			;TOPOC
	
	;MAP COLOR TO TOPOA & TOPOB
	SLL	ETSIZEOF,A3		;SIZEOF ELEVTBL ENTRY
	ADDI	ELEVTBL,A3
	.IF DEBUG
	CMPI	ELEVTBLX,A3
	TLOCKON	HS
	.ENDIF ;DEBUG
	MOVW	*A3,A3			;TOPOB:TOPOA
	MOVE	A3,A2
	SLL	24,A2
	SRL	24,A2
	SLL	24-8,A3
	SRL	24,A3
	OR	A2,A9			;TOPOA
	OR	A3,A10			;TOPOB

HCTNEXT
	;MOVE ON TO NEXT TIRE
	RL	24,A9
	RL	24,A10
	RL	24,A11
	DSJ	A6,HCTLOOP

	;CHECK IF WE ARE IN SPECIAL TOPO MODE
	MOVB	*A7(CDFLAGS+B_CDFTOPO-7),A14
	JRN	HCTSPECIAL

	;STORE RESULTS
	MOVE	A7,A8
	ADDI	CDTOPOA,A8
	MOVL	A9,*A8+		;TOPOA
	MOVL	A10,*A8+	;TOPOB
	MOVL	A11,*A8+	;TOPOC
	RETS

HCTOFFLEFT
	;TOPOB
	ORI	ETS_TRACK,A9		;TOPOA
	JRUC	HCTNEXT
HCTOFFTOP
	ORI	0C0H,A10		;TOPOB
	ORI	ETS_TRACK,A9		;TOPOA
	JRUC	HCTNEXT
HCTOFFRIGHT
	ORI	080H,A10		;TOPOB
	ORI	ETS_TRACK,A9		;TOPOA
	JRUC	HCTNEXT
HCTOFFBOTTOM
	ORI	040H,A10		;TOPOB
	ORI	ETS_TRACK,A9		;TOPOA
	JRUC	HCTNEXT

HCTSPECIAL
	MOVL	*A7(CDTOPOSPECJUMP),A14
	JRZ	HCTSX
	JUMP	A14 ;IN:A0,A7,A9,A10,A11 OBJ,CD,TOPOA,TOPOB,TOPOC
	            ;SC:A1-A6,A8-A11
HCTSX
	;CLEAR TOPO MODE FLAG
	SETF	1,0,0
	MOVE	SP,*A7(CDFLAGS+B_CDFTOPO),0
	SETF	16,1,0
	
	RETS

**
** SCALETIREPOINTS
**
** IN
**   A0 CAR OBJ
**   A1-A6 SCRATCH
**   A7 CD
**   A8,A9 SCRATCH
**
** JFL 06 OCT 92
** JFL 12 NOV 92; REDONE
** JFL 25 MAR 93; SINGLE-PART
**
SCALETIREPOINTS

	;LOAD UP DIR & SCALEMUL
	MOVB	*A0(ODIR),A2
     	MOVW	*A0(OSCALEMUL),A4	

	;DO SCALES MATCH
	MOVW	*A7(CDTPSCALE),A3
	CMP	A3,A4
	JRNE	STPDO

	;DO DIRECTIONS MATCH
	MOVB	*A7(CDTPDIR),A3
	CMP	A2,A3
	JREQ	STPX
STPDO
	;MARK THIS DIR & SCALE DONE
	MOVW	A2,*A7(CDTPDIR)
	MOVW	A4,*A7(CDTPSCALE)

	;GET IMAGE FOR THIS DIR -- ALWAYS IN STATE ZERO!
	MOVL	*A0(OIMGTBL),A6

	;INDEX
	SLL	24,A2			;CLEAN OFF SIGN SHIT
	SRL	24+SR_DIR2CAR,A2	;
	SLL	SL_CAR2OFF,A2		;
	ADD	A2,A6
    	MOVW	*A6(20H),A2		;CTRL BITS
	MOVL	*A6,A6			;IHDR

	;SET UP FOR LOOP

	;REG USE
	;  A0 OBJ
	;  A1 ANIOFF Y:X
	;  A2 DST SCALED POINTS
	;  A3 MUL TMP
	;  A4 SCALEMUL
	;  A5 TIRE COUNT
	;  A6 SRC UNSCALED POINTS
	;  A7 CD
	;  A8 SCRATCH
	;  A9 SCRATCH

	BTST	B_FLIPH,A2
	JRNZ	STPHFLIP

	MOVE	A7,A2
	ADDI	CDTP0,A2		;DST
	MOVK	TIREAREAS,A5
	MOVL	*A6(IANIOFF),A1

	;START OF TIRE POINTS
	ADDI	IPT0,A6
	SETF	8,1,1
	SETF	32,1,0
STPLOOP

	;FIND POINTY:X - ANIOFFY:X
	MOVE	*A6+,A14,0		;UNSCALED POINT Y:X
	SUBXY	A1,A14			;PT Y:X - ANIM Y:X

	;SCALE DIFF X
	MOVE	A14,A8
	ZEXT	A14,W			;ISOLATE X	
	MOVE	A4,A3			;RELOAD SCALE FACTOR
	MPYS	A14,A3
	SRA	MPYSCALE,A3		;SCALED X

	;SCALE DIFF Y
	SRA	16,A8			;ISOLATE Y
	MOVE	A4,A9			;RELOAD SCALE FACTOR
	MPYS	A8,A9
	SRA	MPYSCALE,A9		;SCALED Y

	;STORE DIFF Y:X
	SLL	16,A9
	MOVX	A3,A9
	MOVE	A9,*A2+,0
	
	;NEXT
	DSJ	A5,STPLOOP
	JRUC	STPLDONE

STPHFLIP

	MOVE	A7,A2
	ADDI	CDTP0,A2		;DST
	MOVK	TIREAREAS,A5
	MOVL	*A6(IANIOFF),A1

	;AFTER TIRE POINTS
	ADDI	IPT0+(IPTSIZE*TIREAREAS),A6
	SETF	8,1,1
	SETF	32,1,0
STPHFLOOP
	
	;FIND ANIX - POINTX
	MOVE	*-A6,A8,0		;UNSCALED POINT Y:X
	MOVE	A8,A14
	MOVE	A1,A3
	SUBXY	A14,A3			;ANIY:X - PTY:X
	MOVE	A3,A14

	;SCALE DIFF X
	ZEXT	A14,W			;ISOLATE X	
	MOVE	A4,A3			;RELOAD SCALE FACTOR
	MPYS	A14,A3
	SRA	MPYSCALE,A3		;SCALED X

	;FIND POINTY - ANIY & SCALE DIFF Y
	SUBXY	A1,A8			;PTY:X - ANIY:X
	SRA	16,A8			;ISOLATE Y
	MOVE	A4,A9			;RELOAD SCALE FACTOR
	MPYS	A8,A9
	SRA	MPYSCALE,A9		;SCALED Y

	;STORE DIFF Y:X
	SLL	16,A9
	MOVX	A3,A9
	MOVE	A9,*A2+,0

	;NEXT
	DSJS	A5,STPHFLOOP

STPLDONE
	SETF	16,1,0
	SETF	32,1,1
	
STPX
	RETS

***
*** -----------------------------------------------------------------------
***

**
** TOPOREACT
**
**  A0 CAROBJ
**
** BREAKS: A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11
** BREAKS: B0
**
** JFL 16 SEP 92
** JFL 18 SEP 92; SCRATCH A2,A3,A14,B0-B5
** JFL 21 SEP 92
** JFL 23 SEP 92
** JFL 28 SEP 92
** JFL 06 OCT 92; ETSAIRTBL
** JFL 08 OCT 92; REDONE
** JFL 13 OCT 92; VEC
** JFL 14 OCT 92; NEW MAP
**
TOPOREACT
	
	;ARE ANY AREAS SPECIAL
	MOVL	*A7(CDTOPOA),A1		;DO MATCH COUNT ON A
	MOVE	A1,A9
	JRZ	TRDOTILT

	;COUNT MATCHING TERRAIN TYPES
	MOVK	TIREAREAS,A8
	CLR	A2
	MOVI	0FFH,A10		;MASK
	MOVE	A10,A6			;COPY OF MASK
TRCMLOOP	

	;CHECK IF THIS POSITION HAS ALREADY MATCHED
	MOVE	A2,A14
	SLL	24,A14
	SRL	24,A14
	JRNZ	TRCMNEXT

	;ISOLATE SRC BYTE
	MOVE	A9,A1	
	AND	A10,A1

	;FORM COMPARE MONSTER
	RL	8,A1
	MOVE	A1,A11
	RL	8,A1
	OR	A1,A11
	RL	8,A1
	OR	A1,A11

	;DO THE COMPARE
	MOVE	A9,A14
	XOR	A14,A11			;A11 RESULT
	RL	24,A11			;GET SRC MATCH OUT OF WAY
	RL	8,A6			;ALREADY MATCHED MASK

	MOVK	3,A3

TRCMTALLY
	;TALLY THE RESULTS
	MOVE	A11,A14
	AND	A10,A14
	JRNZ	TRCMNOTEQ1
	INC	A2
	OR	A6,A2			;MARK AS ALREADY MATCHED
TRCMNOTEQ1
	RL	24,A11			;ROLL RESULT
	RL	8,A6			;ROLL ALREADY MATCHED MASK
	DSJS	A3,TRCMTALLY

TRCMNEXT
	RL	24,A2			;COUNT
	RL	24,A9			;SRC
	DSJ	A8,TRCMLOOP

	;CHECK IF ANY TIRES ARE IN SPECIAL AREAS
	MOVL	*A7(CDTOPOA),A1

	;
	;HANDLE TERRAIN FEATURES
	;

	;  A0 OBJ
	;  A1 TOPO A 3:2:1:0
	;  A2 TOPO COUNT 3:2:1:0
	;  A3 TERRAIN TYPE INDEX (SLL 3)
	;  A4 SCRATCH
	;  A5 TOPO B 3:2:1:0
	;  A6 VECTOR TO MOVE CAR
	;  A7 CD
	;  A8 AREA (NOTE: COUNTS DOWN)
	;  A9 SCRATCH
	; A10 VECTOR TMP
	; A11 VECTOR TMP

	MOVK	TIREAREAS,A8			;NUM TIRES
	MOVL	*A7(CDTOPOB),A5			;TOPO B
	RL	8,A1				;SLIDE TOPOA 2:1:0:3
	RL	8,A2				;SLIDE COUNT 2:1:0:3
	RL	8,A5				;SLIDE TOPOB 2:1:0:3
	JRUC	TOFFFIRST

TOFFLOOP
	;SET UP FOR NEXT
	RL	8,A1		;SLIDE TOPO A OVER
	RL	8,A2		;SLIDE TOPO COUNT OVER
	RL	8,A5		;SLIDE TOPO B OVER
	
TOFFFIRST
	;CHECK IF THIS AREA IS SPECIAL
	MOVE	A1,A3	
	SLL	ETS_LCLEAN,A3
	JRZ	TONEXT		;JR NOT SPECIAL

	;GET TYPE OF SPECIAL TERRAIN
	SRL	ETS_RCLEAN,A3
	SLL	3,A3			;SIZEOF TBL ENTRY

	;CHECK NUMBER OF TIRES IN AREA
	MOVE	A3,A4
	ADDI	ETSTIRECOUNTTBL,A4
	.IF DEBUG
	CMPI	ETSTIRECOUNTTBLX,A4
	LOCKON	HS
	.ENDIF ;DEBUG
	MOVB	*A4,A4
	JRN	TOCHECKAIR		;AFFECT FOR EACH TIRE

	;CHECK NUMBER OF TIRES IN AREA
	MOVE	A2,A14
	SLL	24,A14			;ISOLATE COUNT
	SRA	24,A14
	JRN	TONEXT			;ALREADY MATCHED
	CMP	A4,A14
	JRLT	TONEXT			;TOO FEW TIRES IN AREA

TOCHECKAIR
	;CHECK AIR TBL
	MOVE	A3,A4
	ADDI	ETSAIRTBL,A4
	.IF DEBUG
	CMPI	ETSAIRTBLX,A4
	LOCKON	GE
	.ENDIF ;DEBUG
	MOVB	*A4,A4
	JRZ	TOEFFECT		;ZERO ALWAYS EFFECTS
	MOVL	*A0(OYVAL),A14		;NEG IS IN AIR
	SRA	16,A14			;JUST KEEP SIGN
	CMPXY	A4,A14			;COMPARE SIGNS
	JRNE	TONEXT
	
TOEFFECT
	;GET HANDLER
	MOVE	A3,A4
	SLL	2,A4			;3+2 SIZEOF ETSHANDLERTBL
	ADDI	ETSHANDLERTBL,A4
	.IF DEBUG
	CMPI	ETSHANDLERTBLX,A4
	LOCKON	GE
	.ENDIF ;DEBUG
	MOVL	*A4,A4
	JRZ	TONEXT

	;DO HANDLER
	CALL	A4

TONEXT
	DSJ	A8,TOFFLOOP


	;
	;SETUP TILT FOR CAR
	;

TRDOTILT
	.IF SHOWSTATES==0

	;DO TOPO TILT OR NOT
	MOVW	*A7(CDANIPRI),A14
	JRP	TRX ;CMPI APRITOPO, JRGT TRX

	CALLR	TOPOTILT ;IN:A0,A7 OBJ,CD ;OUT:A2,A3 STATE_XXX,TILTVAL

	.IF DEBUG
	MOVL	@DEBUGOBJ,A14
	CMP	A0,A14
	JRNE	TRDTXX
  	NOP
TRDTXX
	.ENDIF ;DEBUG

	;IS THIS THE SAME ANIM?
	MOVW	*A0(OSTATE),A14
	CMP	A2,A14
	JREQ	TRX			;SAME ANIM

	;CHECK IF THIS STATE HAS BEEN STABLE LONG ENOUGH
	MOVL	*A0(ANIMIRQ),A14
	MOVL	@WAVEIRQS,A1
	CMP	A14,A1
	JRLT	TRX			;NOT LONG ENOUGH

	;OLD ANIM HAS BEEN STABLE LONG ENOUGH, SWITCH IT OUT FOR A FRESH ONE
	ADDK	3,A1
	MOVL	A1,*A0(ANIMIRQ)		;WHEN ITS OK TO CHANGE TO NEXT ANIM
	MOVW	A2,*A0(OSTATE)
	.ENDIF ;SHOWSTATES==0

TRX
	RETS

**
** TILTDIRCHANGE
**
** IN
**   A0 CAR
**   A2 LASTTILTV
**   A3 TILTV
**   A7 CD
**
** JFL 03 DEC 92
**
TILTDIRCHANGE
	;ENTERING OR LEAVING A SLOPE?
	MOVE	A3,A3	
	JRN	TDCLEAVING

	;ENTERING A SLOPE
	SLL	24,A2  				;TURN SLOPE DIR INTO INDEX
	SRL	24+4,A2
	SLL	3,A2				;SIZEOF SLOPEDIRTBL
	ADDI	SLOPEDIRTBL,A2
	MOVB	*A2,A2
	MOVW	A2,*A7(CDSLOPEDIRADJ)		;REMEMBER FOR EXIT
	MOVB	*A0(ODIR),A14
	ADD	A2,A14
	MOVW	A14,*A0(ODIR)

TDCLEAVING
	;EXITING A SLOPE
	MOVB	*A0(ODIR),A14
	MOVB	*A7(CDSLOPEDIRADJ),A2
	SUB	A2,A14
	MOVW	A14,*A0(ODIR)

TDCX
	RETS

SDTURN1		EQU	DIR180/8
SDTURN2		EQU	DIR180/8
**
** SLOPEDIRTBL
**
** INDEX BY DIR OF SLOPE
** ADD VALUE TO CAR DIR WHEN GOING FROM FLAT->SLOPE, AND SUB FROM SLOPE->FLAT
**
** JFL 03 DEC 92
**
SLOPEDIRTBL
	.BYTE	0,SDTURN1,SDTURN2,SDTURN1
	.BYTE	0,-SDTURN1,-SDTURN2,-SDTURN1
	.BYTE	0,SDTURN1,SDTURN2,SDTURN1
	.BYTE	0,-SDTURN1,-SDTURN2,-SDTURN1

***
*** TERRAIN HANDLERS ------------------------------------------------------
***

**
** SLOPELHANDLER
** SLOPEHHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX (SLL 3), SCRATCH
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 SCRATCH
** A10 SCRATCH
** A11 SCRATCH
**  B0 SCRATCH
**
** JFL 08 OCT 92
** JFL 09 OCT 92
** JFL 13 OCT 92; VEC
** JFL 14 OCT 92; NEW MAP
** JFL 16 NOV 92
** JFL 09 DEC 92; ROLL IF SIDEWAYS
** JFL 23 DEC 92
**
SLOPELHANDLER
	RETS

SLOPEHHANDLER
	MOVI	SLOPEHTHROWVEL,A11	;VEL

SHDOIT
	MOVE	A2,B0			;SAVE

	;GET DIRECTION SUPPLIED WITH THIS SPECIAL TERRAIN
	MOVE	A5,A10			;GET DIR
	SLL	24,A10
	SRL	24,A10

	;IF DRIVING FAST ENOUGH & FACING DOWN SLOPE, DONT ADD SPEED
	MOVW	*A7(CDDRIVEMAG),A14
	ABS	A14
	CMPI	MINSLOPEVEL,A14
	JRLE	SHMOVE			;NOT FAST ENOUGH

	;GET DIR OF DRIVING
	MOVB	*A0(ODIR),A4
	MOVB	*A7(CDFLAGS+B_CDFREV-7),A14
	JRNN	SHDIROK
	ADDI	DIR180,A4
SHDIROK
	SLL	24,A4
	SRL	24,A4
	SUB	A10,A4
	MOVI	DIR180/16,A14
	ADD	A14,A4
	JRN	SHMOVE			;NOT FACING DOWN
	CMP	A14,A4
	JRGT	SHMOVE
	JRLE	SHX
	

SHMOVE

	;SET UP FOR VECTOR ADD
	CALLA	ADDTIREVEC ;IN: A2,A7,A10,A11 SC,CD,DIR,MAG

SHX
	MOVE	B0,A2			;RESTORE
	RETS

SLJ0	EQU	CDTOPOA+(0*8)
SLJ1	EQU	CDTOPOA+(1*8)
SLJ2	EQU	CDTOPOA+(2*8)
SLJ3	EQU	CDTOPOA+(3*8)

**
** SLOPEJLEADINGTBL
**
** .LONG [CDOFFSET,CDOFFSET]
**
** JFL 01 MAR 93
**
SLOPEJLEADINGTBL
	.LONG	[SLJ0,SLJ3]
	.LONG	[SLJ0,SLJ3]
	.LONG	[SLJ0,SLJ3]
	.LONG	[SLJ2,SLJ3]
	.LONG	[SLJ2,SLJ3]
	.LONG	[SLJ2,SLJ3]
	.LONG	[SLJ2,SLJ1]
	.LONG	[SLJ2,SLJ1]
	.LONG	[SLJ2,SLJ1]
	.LONG	[SLJ2,SLJ1]
	.LONG	[SLJ2,SLJ1]
	.LONG	[SLJ0,SLJ1]
	.LONG	[SLJ0,SLJ1]
	.LONG	[SLJ0,SLJ1]
	.LONG	[SLJ0,SLJ3]
	.LONG	[SLJ0,SLJ3]

**
** SLOPEJHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX (SLL 3), SCRATCH
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 SCRATCH
** A10 SCRATCH
** A11 SCRATCH
**  B0 SCRATCH
**
** JFL 01 MAR 93
**
SLOPEJHANDLER
	;CHECK NUMBER OF TIRES IN THE AREA
	;MOVE	A2,A14
	;SLL	24,A14
	;SRL	24,A14
	;SUBK	2,A14		;TEST FOR 2 OR MORE TIRES 
	;JRN	SJHX 		;NEED MORE TIRES IN AREA

	;GET DIRECTION SUPPLIED WITH THIS SPECIAL TERRAIN
	MOVE	A5,A10			;GET DIR
	SLL	24,A10
	SRL	24,A10

	;GET DIR OF MOTION & MAKE SURE ITS WITHIN 180 DEGREES OF WALL DIR
	MOVW	*A7(CDTOTDIR),A4
	SUB	A4,A10	   		;DIR = WALLDIR - CARDIR
	SLL	24,A10
	SRL	24,A10
	SUBI	DIR180/2,A10
	JRN	SJHCLRX			;ANGLE TOO SMALL
	SLL	25,A10			;CHECK TOP BIT
	JRC	SJHCLRX			;ANGLE TOO BIG

	;CHECK IF LEADING TIRES ARE IN THE AREA
	MOVW	*A0(ODIR),A11
	SUB	A4,A11
	SLL	24,A11
	SRL	28,A11
	SLL	5,A11
	ADDI	SLOPEJLEADINGTBL,A11
	MOVL	*A11,A11		;CDOFFSET:CDOFFSET
	MOVE	A11,A6
	ZEXT	A6,W
	SRL	16,A11
	ADD	A7,A6
	ADD	A7,A11
	MOVB	*A6,A6
	MOVE	A1,A14			;GET TOPOA OF TIRE THAT GOT US HERE
	SLL	24,A14
	SRL	24,A14
	CMP	A6,A14
	JRNE	SJHX
	;JREQ	SJHSET			;NEITHER LEADING ARE IN AREA
	MOVB	*A11,A11
	CMP	A11,A14
	JRNE	SJHX			;NEITHER LEADING ARE IN AREA
	CMP	A6,A11
	JRNE	SJHX

SJHSET
	;SET SPECIAL MODE
	SETF	1,0,0
	MOVK	1,A14
	MOVE	A14,*A7(CDFLAGS+B_CDFTOPO),0
	SETF	16,1,0
	
	MOVI	SLOPEJSPECIALHANDLER,A14
	MOVL	A14,*A7(CDTOPOSPECJUMP)

	MOVL	@WAVEIRQS,A14
	MOVL	A14,*A7(CDTOPOSPECA)
SJHX
	RETS

SJHCLRX
	;SET SPECIAL MODE
	SETF	1,0,0
	MOVE	SP,*A7(CDFLAGS+B_CDFTOPO),0
	SETF	16,1,0
	RETS


**
** SLOPEJSPECIALHANDLER
**
** IN
**   A0 OBJ
**   A7 CD
**   A9 TOPOA
**  A10 TOPOB
**  A11 TOPOC
** SCRATCH:A1-A6,A8-A11
**
** JFL 01 MAR 93
**
SLOPEJSPECIALHANDLER
	;SAVE NEW TOPO
	MOVE	A7,A8
	ADDI	CDTOPOA,A8
	MOVL	A9,*A8+
	MOVL	A10,*A8+
	MOVL	A11,*A8+
	
	MOVL	@WAVEIRQS,A1
	MOVL	*A7(CDTOPOSPECA),A2
	SUB	A2,A1
	SUBK	2,A1
	JRN	SJSHX			;SET THIS SAME FRAME
	JRP	SJSHNOX			;HAPPENED TOO LONG AGO

	;
	;JUMP
	;
	;THROW THE CAR
	MOVK	CCIDBUMP,A2
	CALLA	CARTHROWUP ;IN: A0,A2,A7 OBJ,CCID,CD

SJSHNOX
	;CLR SPECIAL MODE
	SETF	1,0,0
	MOVE	SP,*A7(CDFLAGS+B_CDFTOPO),0
	SETF	16,1,0

SJSHX
	RETS

**
** BARRIERHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX (SLL 3), SCRATCH
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 SCRATCH
** A10 SCRATCH
** A11 SCRATCH
**  B0 SCRATCH
**
** JFL 08 OCT 92
** JFL 09 OCT 92
** JFL 13 OCT 92
** JFL 22 OCT 92
** JFL 05 NOV 92
** JFL 16 NOV 92
**
BARRIERHANDLER
	RETS


**
** CLIFFHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX (SLL 3), SCRATCH
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 SCRATCH
** A10 SCRATCH
** A11 SCRATCH
**  B0 SCRATCH
**
** JFL 08 OCT 92
** JFL 09 OCT 92
** JFL 13 OCT 92
** JFL 22 OCT 92
** JFL 07 JAN 93
**
CLIFFHANDLER
TRACKHANDLER
	MMTM	SP,A2

	MOVE	A2,B0

	;GET DIRECTION SUPPLIED WITH THIS SPECIAL TERRAIN
	MOVE	A5,A10			;ISOLATE WALLDIR
	SLL	24,A10
	SRL	24,A10

	;GET TOTAL VECTOR DIR&MAG
	MOVL	*A7(CDTOTDIR),A11	;AND CDTOTMAG MAG:DIR
	MOVE	A11,A4
	SRL	16,A11			;ISOLATE MAG
	JRZ	CHNOMOVEMENT

	;FIGURE DIR OF IMPACT
	ZEXT	A4,W			;ISOLATE CARDIR
	MOVE	A10,A6
	SUB	A4,A6	  		;WALLDIR-CARDIR
	SLL	24,A6
	SRL	24,A6	  		;TURN INTO 0..FF

	;AFTER SUBTRACTION:
	;BETWEEN AREA 1&6 IS ZERO DEGREE DIFFERENCE
	;BETWEEN AREA 3&4 IS A DEAD ON HIT
	;
	;	     ^
	;	  1  *	6
	;	     *
	;	**   *	 ***
	;	  *******
	;	    ***
	;	 2 * * * 5
	;	   * * *
	;	  * 3*4 *
	;	 *   *	 *
	;

	;WHAT AREA
	CMPI	DIR180/2-DIR180/16,A6		;CHECK FOR AREA 1
	JRLT	CHNOTOPPOSED
	CMPI	DIR180+DIR180/2+DIR180/16,A6	;CHECK FOR AREA 6
	JRGT	CHNOTOPPOSED

	;CHECK HOW MANY TIRES ARE IN THIS AREA TO SEE IF WE SHOULD ROLL
	SLL	24,B0
	SRA	24,B0		;0==1 TIRE,1==2 TIRES...
	TLOCKON	N 		;SHOULDNT BE NEG
	SUBK	2,B0		;CHECK FOR 3 TIRES OR MORE
	JRNN	CHROLLDOWN

	;WHAT AREA
	CMPI	DIR180-DIR180/14,A6		;CHECK FOR AREA 2
	JRLE	CHOPPOSED
	CMPI	DIR180+DIR180/14,A6 		;CHECK FOR AREA 5
	JRGE	CHOPPOSED

CHBOUNCEBACK
	;
	;AREAS 3&4
	;

	;STOP EXTERNAL FORCES -- TURBO
	SETF	1,0,0
	MOVK	1,A14
	MOVE	A14,*A7(CDFLAGS+B_CDFSTOPEXT),0
	SETF	16,1,0

	;CLEAR ALL MOTION
	CALLA	CLEARVEC ;IN: A2-A3,A7 SC,CD

	;ADD TO TIRE VEC ONCE	
	CALLA	ADDTIREVEC ;IN: A2,A7,A10,A11 SC,CD,DIR,MAG
	
	;USE SLIDE TO BOUNCE CAR BACK
	SRL	1,A11			;FRACTION OF VEL INTO WALL
	CMPI	CLIFFMINPUSHVEL,A11
	JRGE	CHBBVOK
	MOVI	CLIFFMINPUSHVEL,A11
CHBBVOK
	;SETUP SLIDE
	SLL	16,A11
	MOVX	A10,A11			;CDSLIPMAG:CDSLIPDIR
	MOVL	A11,*A7(CDSLIPDIR)	;AND CDSLIPMAG
	MOVI	[50H,(PERCENT100/1)<<SLIPFFRAC],A14
	MOVL	A14,*A7(CDSLIPFACTOR)	;AND CDSLIPDECAY

	JRUC	CHX

CHROLLDOWN
	;SETUP SLIDE
	MOVI	CLIFFMINPUSHVEL,A11
	SLL	16,A11
	MOVX	A10,A11			;CDSLIPMAG:CDSLIPDIR
	MOVL	A11,*A7(CDSLIPDIR)	;AND CDSLIPMAG
	MOVI	[20H,(PERCENT100/1)<<SLIPFFRAC],A14
	MOVL	A14,*A7(CDSLIPFACTOR)	;AND CDSLIPDECAY

	;SPIN A LITTLE
	CALLA	RANDOMSPIN ;IN:A7 CD

	;PASS IN THE SLOPE DIRECTION TO ALLOW CHOICE OF ANIM
	MOVW	A10,*A0(OWORDPASS)

	;TOSS CAR UP
	MOVI	CCIDCLIFFROLL,A2
	CALLA	CARTHROWUP ;IN: A0,A2,A7 OBJ,CCID,CD

	JRUC	CHX

CHNOTOPPOSED
	;
	;AREAS 1&6
	;

	;WE KNOW CAR WAS MOVING IN THE SAME DIR AS THE WALL...
	;MAKE SURE CAR WAS DRIVING -- IT COULD HAVE BEEN PUSHED
	MOVL	*A7(CDDRIVEDIR),A2	;CDDRIVEMAG:CDDRIVEDIR
	MOVE	A2,A14
	SRA	16,A14			;CHECK FOR MIN VEL
	ABS	A14
	SUBK	32,A14			;MIN VEL
	JRN	CHNOBIGDEAL		;NOT FAST ENOUGH

	;MAKE SURE CAR WAS DRIVING IN THIS DIR
	;SLL	24,A2			;ISOLATE DIR
	;SRL	24,A2
	;SUB	A10,A2			;DRIVEDIR-WALLDIR
	;ADDI	DIR180/4,A2
	;JRN	CHNOBIGDEAL
	;CMPI	DIR180/2,A2
	;JRGT	CHNOBIGDEAL

	;TOSS CAR UP
	MOVI	CCIDBUMP,A2
	CALLA	CARTHROWUP ;IN: A0,A2,A7 OBJ,CCID,CD
	JRUC	CHX
	
CHNOBIGDEAL
	;
	;NOT OPPOSED, BUT DOESNT QUALIFY FOR JUMP
	;

	NOP

CHNOMOVEMENT
	;
	;NO MOVEMENT
	;
	NOP


CHOPPOSED
	;
	;AREAS 2&5
	;

	;ADD TO TIRE VEC ONCE	
	CALLA	ADDTIREVEC ;IN: A2,A7,A10,A11 SC,CD,DIR,MAG

	;USE SLIDE TO BOUNCE CAR
	CMPI	CLIFFMINPUSHVEL,A11
	JRGE	CHNOVOK
	MOVI	CLIFFMINPUSHVEL,A11
CHNOVOK
	;FIND REFLECTION ANGLE (DIR180+2*WALLDIR-CARDIR)
	ADD	A6,A10		;(WALLDIR-CARDIR)+WALLDIR
	ADDI	DIR180,A10	;+DIR180

	;SETUP SLIDE
	SLL	16,A11
	MOVX	A10,A11			;CDSLIPMAG:CDSLIPDIR
	MOVL	A11,*A7(CDSLIPDIR)	;AND CDSLIPMAG
	MOVI	[40H,(PERCENT100/1-PERCENT100/4)<<SLIPFFRAC],A14
	MOVL	A14,*A7(CDSLIPFACTOR)	;AND CDSLIPDECAY

CHX
	MMFM	SP,A2
	RETS

**
** CHECKPOINTHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX, SCRATCH
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 
** A10 SCRATCH
** A11 SCRATCH
**  B0 SCRATCH
**
** JFL 23 SEP 92
** JFL 28 SEP 92; NEW SCRATCH
** JFL 07 OCT 92
** JFL 14 OCT 92
** JFL 12 APR 93; NO LAPS IN SCORE BOX
**
CHECKPOINTHANDLER
	MMTM	SP,A2

	;GET CHECKPOINT MASK
	MOVE	A5,A14 				;ISOLATE THIS CKPT MASK
	SLL	24,A14
	SRL	24,A14

	;MAKE SURE THEY GO SOMEWHERE ELSE NEXT
	MOVW	*A7(CDLASTCHECKPT),A10
	SLL	24,A10
	SRL	24,A10
	CMP	A10,A14
	JRNE	CPHX

	;MARK AS CHECKED IN
	MOVW	*A7(CDCHECKPOINTS),A11		;COMBINE IT WITH OTHERS
	OR	A14,A11
	
	;FIGURE NEXT CHECKPOINT
	SLL	24+1,A10			;NEXT CHECKPOINT SHIFT
	SRL	24,A10
	JRNZ	CPHNZ	
	MOVK	1,A10
CPHNZ
	MOVW	A10,*A7(CDLASTCHECKPT)		;RECORD

	;WAS THAT THE LAST CHECKPOINT WE JUST PASSED?
	MOVB	@LAPCHECKPOINTS,A14
	AND	A14,A10
	JRNE	CPHNOTLAST

	;YES, NEXT IS CHECKERED FLAG AREA
	MOVK	1,A10
	MOVW	A10,*A7(CDLASTCHECKPT)		;RECORD
CPHNOTLAST

	.IF SCORELAPS
	;SCORE FOR LAPS
	MOVE	A0,A2
	MOVI	SCORECHECKPT,A3
	CALLA	SCOREVALADD ;IN: A2,A3 OBJ,VALUE
	.ENDIF ;SCORELAPS

	;DOES THIS COMPLETE A LAP?
	MOVB	@LAPCHECKPOINTS,A14
	XOR	A11,A14				;COMPARE BYTE
	SLL	24,A14				;IGNORE SIGN
	JRNZ	CPHNOLAP
	
	;GIVE ONE MISSILE AS GIFT
	MOVE	A8,A10		;SAVE
	MOVE	A0,A8
	MOVK	1,A2
	CALLA	MISPICKUP ;IN:A2,A7,A8 COUNT,CD,OBJ 
	MOVE	A10,A8		;RESTORE

	;IS THERE ONLY ONE LAP LEFT?
	

	;LAP FINISHED!
	CLR	A11				;RESET CHECKPOINTS MET
	MOVW	*A7(CDLAPS),A10			;BUMP UP LAP COUNT
	INC	A10
	MOVW	@LAPSTOWIN,A14
	CMP	A14,A10
	JRGE	CPHLAPDONE

	;CHECK FOR ONE LAP LEFT
	DEC	A14				;ONE LAP LEFT?	
	CMP	A14,A10
	JRLT	CPHLAPDONE

	;ONE LAP LEFT
	MOVW	*A7(CDINPNUM),A14
	ADDI	SNDLAPLEADER1,A14
	CALLA	ARENASND ;IN:A14 SNDID
	JRUC	CPHNOSND

CPHWIN
	;WIN!	
	MOVW	*A7(CDINPNUM),A14
	ADDI	SNDLAPLEADER1,A14
	CALLA	ARENASND ;IN:A14 SNDID

	.IF SCORELAPS
	;MAKE SCORE MOVE
	MOVE	A0,A2
	MOVI	SCORELAPONE,A3
	CALLA	SCOREVALADD ;IN: A2,A3 OBJ,VALUE
	.ENDIF ;SCORELAPS

	.IF WINLAPS
	MOVL	A0,@WINNER
	.ENDIF ;WINLAPS
	JRUC	CPHNOSND
	
CPHLAPDONE
	;LAP COMPLETED
	MOVW	*A7(CDINPNUM),A14
	ADDI	SNDLAP1,A14
	CALLA	ARENASND ;IN:A14 SNDID

CPHNOSND
	MOVW	A10,*A7(CDLAPS)
CPHNOLAP
	MOVW	A11,*A7(CDCHECKPOINTS)
CPHX
	MMFM	SP,A2
	RETS


**
** TRIGGERHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 
** A10 SCRATCH
** A11 SCRATCH
**  B0 SCRATCH
**
** JFL 23 SEP 92
** JFL 25 SEP 92; FROM CHECKPOINT HANDLER
** JFL 28 SEP 92
**
TRIGGERHANDLER

	;GET TRIGGER TYPE
	MOVE	A5,A4
	SLL	24,A4
	SRL	24,A4
	.IF DEBUG
	CMPI	TRIGLAST,A4
	LOCKON	GT
	.ENDIF ;DEBUG

	SLL	5,A4			;SIZEOF TRIGHANDLERTBL
	ADDI	TRIGHANDLERTBL,A4
	.IF DEBUG
	CMPI	TRIGHANDLERTBLX,A4
	LOCKON	GE
	.ENDIF ;DEBUG
	MOVL	*A4,A4
	JRZ	THX
	
	CALL	A4
THX
	RETS


**
** TRIGFHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 
** A10 SCRATCH
** A11 SCRATCH
**  B0 SCRATCH
**
** JFL 23 SEP 92
** JFL 25 SEP 92; FROM CHECKPOINT HANDLER
** JFL 28 SEP 92
** JFL 04 JAN 93
**
TRIGFHANDLER

	;GET TRIGGER TYPE
	MOVE	A5,A4
	SLL	24,A4
	SRL	24,A4
	.IF DEBUG
	CMPI	TRIGFLAST,A4
	LOCKON	GT
	.ENDIF ;DEBUG

	SLL	5,A4			;SIZEOF TRIGHANDLERTBL
	ADDI	TRIGFHANDLERTBL,A4
	.IF DEBUG
	CMPI	TRIGFHANDLERTBLX,A4
	LOCKON	GE
	.ENDIF ;DEBUG
	MOVL	*A4,A4
	JRZ	TFHX
	
	CALL	A4
TFHX
	RETS

***
*** ---------------------- TRIGGER HANDLERS -----------------------------
***


**
** BUMPHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 
** A10 SCRATCH
** A11 SCRATCH
**
** JFL 25 SEP 92; FROM CHECKPOINT HANDLER
** JFL 28 SEP 92
** JFL 08 JAN 93; ROCK IF TOO SLOW
**
BUMPHANDLER
	MOVE	A2,B0		;SAVE

	MOVW	*A7(CDDRIVEMAG),A2	;GET DRIVING SPEED
	ABS	A2
	CMPI	MINBUMPVEL,A2
	JRGE	BUHFAST
	CMPI	SLOWVEL,A2
	JRLE	BUHX

	;ROCK CAR A LITTLE
	MOVI	[8,CCIDBUMPSLOW],A2
	CALLA	CARDISABLE ;IN: A0,A2,A7 OBJ,TIME:CCID,CD
	JRUC	BUHX

BUHFAST
	;THROW THE CAR
	MOVK	CCIDBUMP,A2
	CALLA	CARTHROWUP ;IN: A0,A2,A7 OBJ,CCID,CD

BUHX
	MOVE	B0,A2		;RESTORE
	RETS
	
**
** ROCKSHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 
** A10 SCRATCH
** A11 SCRATCH
**
** JFL 25 SEP 92; FROM CHECKPOINT HANDLER
** JFL 28 SEP 92
**
ROCKSHANDLER
	RETS

**
** WATERHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 
** A10 SCRATCH
** A11 SCRATCH
**
** JFL 25 SEP 92; FROM CHECKPOINT HANDLER
** JFL 28 SEP 92
** JFL 10 DEC 92; TRIGSPEC
** JFL 02 FEB 93
**
WATERHANDLER
PUDDLEHANDLER
	MOVE	A2,B0		;SAVE	

	;SLOW THE CAR DOWN
	MOVK	2,A2
	CALLA	CHANGECARSPEED ;IN: A0,A2,A7  OBJ,AMOUNT,CD

	MOVW	*A7(CDDRIVEMAG),A2		;DRIVE
	SLL	32-5,A2				;CHECK SPEED
	JRZ	WHX

	;TRY TO MAKE SOUND EVERY SO OFTEN
	MOVW	@WAVEIRQS,A2
	SLL	32-5,A2
	JRNZ	WHX
	
	;DRIVING IN WATER SOUND
	MOVW	*A7(CDINPNUM),A14
	ADDI	SNDDRIVEWATER1,A14
	CALLA	ARENASND ;IN:A14 SNDID

WHX
	MOVE	B0,A2		;RESTORE
	RETS


**
** MUDHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 
** A10 SCRATCH
** A11 SCRATCH
**
** JFL 25 SEP 92; FROM CHECKPOINT HANDLER
** JFL 28 SEP 92
**
MUDHANDLER
	MOVE	A2,B0		;SAVE

	MOVW	*A7(CDDRIVEMAG),A2	;GET DRIVING SPEED
	ABS	A2
	CMPI	MINBUMPVEL,A2
	JRLE	MHX

	;SPAWN MUD
	;MOVE	A8,A10		;SAVE
	;MOVE	A0,A8
	;MOVI	ASMUDTBL,A2
	;CALLA	ANISPAWNFROMTBL ;IN:A2,A8 ANISPAWNTBL,OBJ
	;MOVE	A10,A8		;RESTORE

MHX
	MOVE	B0,A2		;RESTORE
	RETS

**
** ROCKINGHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 
** A10 SCRATCH
** A11 SCRATCH
**
** JFL 25 SEP 92; FROM CHECKPOINT HANDLER
** JFL 28 SEP 92
**
ROCKINGHANDLER
	RETS


**
** FINDAOLOBJ
**
** IN
**   A2 AOLID
**   A3 SCRATCH
** OUT
**   A IF NOT FOUND, ELSE A3 IS OBJ
**
** JFL 28 JAN 93
**
FINDAOLOBJ
	MOVL	@SUPPLSTS+SUPL_FOBJ,A3	;GET 1ST FOBJ
	JRZ	FAOX

FAOLOOP
	;CHECK THIS ONE
	MOVL	*A3(OAOL),A14
	CMP	A14,A2
	JREQ	FAOX

	;NEXT
	MOVL	*A3(OSLINK),A3
	JRNZ	FAOLOOP
FAOX
	MOVE	A3,A3			;SET Z/NZ
	RETS



**
** POINTHANDLER
**
**  A0 OBJ
**  A1 TOPO A 3:2:1:0
**  A2 TOPO COUNT 3:2:1:0
**  A3 TERRAIN TYPE INDEX
**  A4 SCRATCH
**  A5 TOPO B 3:2:1:0
**  A6 SCRATCH
**  A7 CD
**  A8 AREA (NOTE: COUNTS DOWN)
**  A9 
** A10 SCRATCH
** A11 SCRATCH
**
** JFL 11 JAN 93
**
POINTHANDLER
	MMTM	SP,A2,A3

	;INDEX INTO POINT TBL
	MOVE	A5,A6
	SLL	24,A6
	SRL	24-TIPSIZEOF,A6
	MOVL	@ARENATRACKINFO,A14
	ADD	A14,A6
	ADDI	TIPOINTTBL,A6

	;CHECK FOR SPECIAL HANDLER
	MOVL	*A6(TIPDATA),A2
	JRZ	PHNOSPECIAL
	
	;
	;HANDLE AOL OBJS
	;

	;GET THE AOL OBJ
	SRL	4,A2
	SLL	4,A2
	CALLR	FINDAOLOBJ ;IN:A2,A3 AOLID,SC OUT:Z IF NOT,A3 OBJ
	JRZ	PHNOSPECIAL
	
	;SET UP FOR CALL
	CALLA	CARHITAOLOBJ ;IN:A0,A3,A2-A4,A10-A11 OBJ,AOL,SC,TIPOINT	
	JRUC	PHX

PHNOSPECIAL

	;SIGNAL TO STOP ANY EXTERNAL FORCES -- I.E. TURBO
	SETF	1,0,0
	MOVK	1,A14
	MOVE	A14,*A7(CDFLAGS+B_CDFSTOPEXT),0
	SETF	16,1,0

	;FIND DIR FROM POINT TO CAR
	MOVW	*A6(TIPXY),A14
	MOVW	*A0(OXPOS),A10
	SUB	A14,A10
	MOVW	*A6(TIPXY+10H),A14
	MOVW	*A0(OZPOS),A11
	SUB	A14,A11
	CALLA	COMPTODIRVEC ;IN: A10,A11 X,Z OUT: A10,A11 DIR,SC

	;FIND MAG OF MOVEMENT
	MOVW	*A7(CDTOTMAG),A11

	;ZERO VEC
	CALLA	CLEARVEC ;IN A2-A3,A7 SC,CD

	;ADD TO TIRE VEC ONCE	
	CALLA	ADDTIREVEC ;IN: A2,A7,A10,A11 SC,CD,DIR,MAG

	CMPI	MINHITMAG,A11
	JRGE	CHIVOK
	MOVI	MINHITMAG,A11
CHIVOK
	
	;SETUP SLIDE AWAY FROM COLLISION
	SLL	16-1,A11
	MOVX	A10,A11			;CDSLIPMAG:CDSLIPDIR
	MOVL	A11,*A7(CDSLIPDIR)	;AND CDSLIPMAG
	MOVI	[20H,(PERCENT100/1)<<SLIPFFRAC],A14
	MOVL	A14,*A7(CDSLIPFACTOR)	;AND CDSLIPDECAY

PHX
	MMFM	SP,A2,A3
	RETS



***
*** ---------------------------------------------------------------------
***

**
** TOPOTILT
**
** IN
**   A0 OBJ
**   A1 TOPOA 3:2:1:0
**   A5 TOPOB 3:2:1:0
**   A7 CD
** OUT
**   A2 STATE BASED ON TILT
**   A3 TILT DIR OR NEG
**
** BREAKS: ALL A EXCEPT A0,A7,A12,A13
**
** JFL 21 SEP 92
** JFL 23 SEP 92; REDONE
** JFL 24 SEP 92; TILTSPEED
** JFL 29 SEP 92; FRONT/BACK ROCK ONLY
** JFL 14 OCT 92; NEW MAP
** JFL 16 OCT 92; NEW TILT
** JFL 19 NOV 92
** JFL 22 DEC 92; REDONE TO GET RID OF JERK
** JFL 17 FEB 93; RETURN STATE
** JFL 01 MAR 93; SLOPEJ
** JFL 16 APR 93; MEDUP/DOWN ADDED THEN DISABLED FOR DEMO
**

TOPOTILT

	.IF DEBUG
	MOVL	@DEBUGOBJ,A14
	CMP	A0,A14
	JRNE	TTXX
	NOP
TTXX
	.ENDIF ;DEBUG

	;CHECK IF ALL ON FLAT
	MOVE	A1,A1
	JRZ	TTFLAT

	;INIT REGS
	MOVE	A7,A9
	ADDI	CDTILT0,A9		;LAST VALID FOR THIS TIRE
	MOVB	*A0(ODIR),A6		;DIR OF CAR
	CLR	A8			;RESULT	UP:LEFT
	MOVK	TIREAREAS,A3
TTLOOP


	;REG USE
	;  A0 OBJ
	;  A1 TOPOA
	;  A2 SCRATCH
	;  A3 TIRE COUNT
	;  A4 AREA INDEX
	;  A5 TOPOB
	;  A6 CARDIR
	;  A7 CD
	;  A8 RESULT [UP:LEFT]
	;  A9 LAST VALID RESULT FOR THIS TIRE
	; A10
	; A11

	;IS TIRE ON A SLOPE
	MOVE	A1,A14			;ISOLATE TOPOA FOR THIS TIRE
	SLL	24,A14
	SRL	24-5,A14		;SIZEOF TBL
	ADDI	ETSTILTJUMPTBL,A14
	.IF DEBUG
	CMPI	ETSTILTJUMPTBLX,A14
	LOCKON	HS
	.ENDIF ;DEBUG
	MOVL	*A14,A2
	JUMP	A2

TTJNOEFFECT
TTJBARRIER
	MOVL	*A9+,A2			;GET VALID
	ADDXY	A2,A8			;ADD IN THIS TIRE
	JRUC	TTNEXTTIRE

TTJFLAT
	CLR	A2
	MOVL	A2,*A9+			;STORE VALID
	ADDXY	A2,A8			;ADD IN THIS TIRE
	JRUC	TTNEXTTIRE

	;
	;HANDLE SLOPES
	;
TTJSLOPEJ
TTJSLOPEL
	;GET TBL BASE
	MOVI	TILTSLOPELTBL,A2
	JRUC	TTANYSLOPE
TTJCLIFF
TTJSLOPEH
	;GET TBL BASE
	MOVI	TILTSLOPEHTBL,A2
TTANYSLOPE
	;GET DIR OF SLOPE
	MOVE	A5,A14
	SLL	24,A14
	SRA	24,A14			;KEEP SIGN
	
	;GET CONTRIBUTION FROM THIS TIRE ON THIS SLOPE
	SUB	A6,A14			;GET SLOPEDIR-CARDIR
	SLL	24,A14
	SRL	24+4,A14		;TURN DIR INTO 0..F INDEX
	SLL	5,A14			;SIZEOF TILTTBL
	ADD	A14,A2			;ADD IN TABLE BASE
	MOVL	*A2,A2			;GET UP:LEFT TILT CONTRIBUTION
	MOVL	A2,*A9+			;STORE VALID
	ADDXY	A2,A8			;ADD IN THIS TIRE

TTNEXTTIRE
	;NEXT TIRE
	DSJ	A3,TTLOOP
	
	;
	;CHECK OUT THE RESULTS
	;
	MOVE	A8,A2
	MOVE	A2,A5			;SAVE FOR RETURN
	MOVE	A2,A14			;UP:LEFT
	MOVE	A2,A3
	SEXT	A3,W		
	SRA	16,A14
	ABS	A3			;LEFT
	ABS	A14			;UP
	CMP	A3,A14
	JRGE	TTUPDOWN

	;LEFT/RIGHT
	SEXT	A2,W
	JRZ	TTFLAT
	JRN	TTRIGHT
	JRUC	TTLEFT
TTUPDOWN
	SRA	16,A2
	JRZ	TTFLAT
	JRN	TTDOWN
TTUP
	ABS	A2
	CMPI	TILTMED*TIREAREAS,A2
	JRLT	TTUPLOW

	CMPI	TILTBIG*TIREAREAS,A2
	JRLT	TTUPMED

      	MOVK	STATE_MEDUP,A2 ;STATE_HIGHUP,A2
	JRUC	TTX
TTUPMED
      	MOVK	STATE_LOWUP,A2 ;STATE_MEDUP,A2
	JRUC	TTX
TTUPLOW
      	MOVK	STATE_LOWUP,A2
	JRUC	TTX
TTDOWN
	ABS	A2
	CMPI	TILTMED*TIREAREAS,A2
	JRLT	TTDOWNLOW

	CMPI	TILTBIG*TIREAREAS,A2
	JRLT	TTDOWNMED

      	MOVK	STATE_LOWDOWN,A2 ;STATE_HIGHDOWN,A2
	JRUC	TTX
TTDOWNMED
      	MOVK	STATE_LOWDOWN,A2 ;STATE_MEDDOWN,A2
	JRUC	TTX
TTDOWNLOW
      	MOVK	STATE_LOWDOWN,A2
	JRUC	TTX
TTLEFT
      	MOVK	STATE_ROLLLEFT,A2
	JRUC	TTX
TTRIGHT
      	MOVK	STATE_ROLLRIGHT,A2
	JRUC	TTX
TTFLAT
      	CLR	A2	;MOVK	STATE_FLAT,A2
TTX
	RETS


TILTU	EQU	1
TILTD	EQU	-1
TILTL	EQU	1
TILTR	EQU	-1
TILTMED	EQU	3
TILTBIG	EQU	5

**
** TILTTBL
**
** INDEX BY ((SLOPEDIR-CARDIR)&0xF0)>>4
** FORMAT IS [+ UP OR - DOWN, + LEFT OR - RIGHT]
** ADD UP FOR ALL TIRES
**
** THE TABLE IS INDEXED WITH THE DATA TYPE (SEE ETSDATATYPETBL)
**
** JFL 20 NOV 92
**
TILTSLOPELTBL
	.LONG	[TILTD,0]
	.LONG	[TILTD,0]
	.LONG	[TILTD,TILTL]
	.LONG	[0,TILTL]
	.LONG	[0,TILTL]
	.LONG	[0,TILTL]
	.LONG	[TILTU,TILTL]
	.LONG	[TILTU,0]
	.LONG	[TILTU,0]
	.LONG	[TILTU,0]
	.LONG	[TILTU,TILTR]
	.LONG	[0,TILTR]
	.LONG	[0,TILTR]
	.LONG	[0,TILTR]
	.LONG	[TILTD,TILTR]
	.LONG	[TILTD,0]
TILTSLOPELTBLX

TILTSLOPEHTBL
	.LONG	[TILTBIG*TILTD,0]
	.LONG	[TILTBIG*TILTD,0]
	.LONG	[TILTBIG*TILTD,TILTBIG*TILTL]
	.LONG	[0,TILTBIG*TILTL]
	.LONG	[0,TILTBIG*TILTL]
	.LONG	[0,TILTBIG*TILTL]
	.LONG	[TILTBIG*TILTU,TILTBIG*TILTL]
	.LONG	[TILTBIG*TILTU,0]
	.LONG	[TILTBIG*TILTU,0]
	.LONG	[TILTBIG*TILTU,0]
	.LONG	[TILTBIG*TILTU,TILTBIG*TILTR]
	.LONG	[0,TILTBIG*TILTR]
	.LONG	[0,TILTBIG*TILTR]
	.LONG	[0,TILTBIG*TILTR]
	.LONG	[TILTBIG*TILTD,TILTBIG*TILTR]
	.LONG	[TILTBIG*TILTD,0]
TILTSLOPEHTBLX

***
*** ---------------------------------------------------------------------
***

**
** ARENADEFS STRUCT
**
** JFL 26 OCT 92
**
ADTMAP		EQU	000H	;UHL
ADTRACKINFO	EQU	020H	;UHL
ADINIT		EQU	040H	;UHL
ADACTOBJS	EQU	060H	;UHL ACTIVE OBJECT LIST
ADSIZE		EQU	080H	; SIZE
ADSIZEOF	EQU	7	; SIZEOF SHIFT

**
** ARENADEFS
**
** INDEX USING ADIDXXX IN DRT.I
**
** JFL 27 OCT 92
** JFL 09 FEB 93
**
ARENADEFS
	.LONG	AR1TMAP,AR1TRACKINFO,AR1INIT,AR1ACTOBJS
	.LONG	AR2TMAP,AR2TRACKINFO,AR2INIT,AR2ACTOBJS
	.LONG	AR3TMAP,AR3TRACKINFO,AR3INIT,AR3ACTOBJS
	.LONG	AR4TMAP,AR4TRACKINFO,AR4INIT,AR4ACTOBJS
	.LONG	AR5TMAP,AR5TRACKINFO,AR5INIT,AR5ACTOBJS
	.LONG	AR6TMAP,AR6TRACKINFO,AR6INIT,AR6ACTOBJS
	.LONG	AR7TMAP,AR7TRACKINFO,AR7INIT,AR7ACTOBJS
	.LONG	AR8TMAP,AR8TRACKINFO,AR8INIT,AR8ACTOBJS
ARENADEFSX

**
** SETARENA
**
** IN
**   A2 ARENA ID
**
** JFL 26 OCT 92
** JFL 09 FEB 93
**
SETARENA
	SLL	ADSIZEOF,A2
	ADDI	ARENADEFS,A2
	.IF DEBUG	
	CMPI	ARENADEFSX,A2
	LOCKON	GE
	.ENDIF ;DEBUG
	MOVL	*A2(ADTMAP),A14
	MOVL	A14,@ARENATMAP
	MOVL	*A2(ADTRACKINFO),A14
	MOVL	A14,@ARENATRACKINFO
	MOVL	*A2(ADINIT),A14
	MOVL	A14,@ARENAINIT
	MOVL	*A2(ADACTOBJS),A14
	MOVL	A14,@ARENAACTOBJS
	RETS

***
*** ---------------------------------------------------------------------
***

**
** ELEVATION TERRAIN SPECIAL TABLE HANDLERS
**
** A ZERO INDICATES NO HANDLER
**
** JFL 23 SEP 92
** JFL 08 OCT 92
** JFL 09 OCT 92
** JFL 14 OCT 92; NEW MAP
** JFL 11 JAN 93; POINT
**
ETSHANDLERTBL
	.LONG	0			;FLAT
	.LONG	SLOPELHANDLER
	.LONG	SLOPEHHANDLER
	.LONG	CLIFFHANDLER
	.LONG	SLOPEJHANDLER
	.LONG	CHECKPOINTHANDLER
	.LONG	TRIGGERHANDLER
	.LONG	TRACKHANDLER
	.LONG	BARRIERHANDLER
	.LONG	TRIGFHANDLER
	.LONG	POINTHANDLER
	.LONG	WATERHANDLER
	.LONG	PUDDLEHANDLER
ETSHANDLERTBLX

**
** TRIGHANDLERTBL
**
** A ZERO INDICATES NO HANDLER
**
** JFL 25 SEP 92
** JFL 14 OCT 92; NEW MAP
**
TRIGHANDLERTBL
	.LONG	BUMPHANDLER
	.LONG	ROCKSHANDLER
	.LONG	MUDHANDLER
	.LONG	ROCKINGHANDLER
TRIGHANDLERTBLX

**
** TRIGFHANDLERTBL
**
** A ZERO INDICATES NO HANDLER
**
** JFL 25 SEP 92
** JFL 14 OCT 92; NEW MAP
**
TRIGFHANDLERTBL
TRIGFHANDLERTBLX

ETSTFLAT	EQU	0

**
** ELEVATION TERRAIN TYPE TILT JUMP TABLE
**
** THIS MUST WORK IN CONJUNCTION WITH TILTTBL
**
** JFL 16 OCT 92
** JFL 22 DEC 92; CHANGED TO JUMP TABLE
**
ETSTILTJUMPTBL
	.LONG	TTJFLAT		;FLAT
	.LONG	TTJSLOPEL	;SLOPEL
	.LONG	TTJSLOPEH	;SLOPEH
	.LONG	TTJBARRIER     	;CLIFF
	.LONG	TTJSLOPEJ     	;SLOPEJ
	.LONG	TTJNOEFFECT	;CHECKPOINT
	.LONG	TTJNOEFFECT	;TRIGGER
	.LONG	TTJBARRIER	;TRACK
	.LONG	TTJBARRIER	;BARRIER
	.LONG	TTJFLAT		;TRIGF
	.LONG	TTJFLAT		;POINT
	.LONG	TTJFLAT		;WATER
	.LONG	TTJFLAT		;PUDDLE
ETSTILTJUMPTBLX

**
** BYTE TABLES
**

**
** ELEVATION TERRAIN SPECIAL TIRE COUNT TABLE
**
** A NUMBER > 127 SIGNALS THIS EFFECTS CAR ONCE FOR EACH TIRE IN AREA
** ELSE 
**	0 == 1 2 3 OR 4 TIRES IN AREA EFFECTS CAR ONLY ONCE
**	1 == 2 3 OR 4 TIRES IN AREA EFFECTS CAR ONLY ONCE
**	2 == 3 OR 4 TIRES IN AREA EFFECTS CAR ONLY ONCE
**	3 == 4 TIRES IN AREA EFFECTS CAR ONLY ONCE
**
** JFL 22 SEP 92
** JFL 23 SEP 92
** JFL 08 OCT 92
** JFL 09 OCT 92
** JFL 14 OCT 92; NEW MAP
**
ETSTIRECOUNTTBL
	.BYTE	000H	;FLAT
	.BYTE	000H	;SLOPEL
	.BYTE	000H	;SLOPEH
	.BYTE	000H	;CLIFF
	.BYTE	000H	;SLOPEJ
	.BYTE	000H	;CHECKPOINT
	.BYTE	000H	;TRIGGER
	.BYTE	000H	;TRACK
	.BYTE	000H	;BARRIER
	.BYTE	000H	;TRIGF
	.BYTE	000H	;POINT
	.BYTE	003H	;WATER
	.BYTE	002H	;PUDDLE
ETSTIRECOUNTTBLX


**
** ELEVATION TERRAIN AIR
**
** A ZERO INDICATES AREA AFFECTS CAR ON GROUND OR IN AIR
** A POSITIVE VALUE INDICATES AREA AFFECTS CAR ON GROUND
** A NEGATIVE VALUE INDICATES AREA AFFECTS CAR IN AIR
**
** JFL 06 OCT 92
** JFL 08 OCT 92
** JFL 09 OCT 92
** JFL 14 OCT 92
**
ETSAIRTBL
	.BYTE	000H	;FLAT
	.BYTE	001H	;SLOPEL
	.BYTE	001H	;SLOPEH
	.BYTE	000H	;CLIFF
	.BYTE	000H	;SLOPEJ
	.BYTE	000H	;CHECKPOINT
	.BYTE	001H	;TRIGGER
	.BYTE	000H	;TRACK
	.BYTE	000H	;BARRIER
	.BYTE	000H	;TRIGF
	.BYTE	000H	;POINT
	.BYTE	000H	;WATER
	.BYTE	000H	;PUDDLE
ETSAIRTBLX


**
** MISBLOWUPTBL
**
** 00 NO
** 01 YES
** FF IF ANGLE IS AGAINST TOPO ANGLE
**
** JFL 12 JAN 93
**
MISBLOWUPTBL
	.BYTE	000H	;FLAT
	.BYTE	000H	;SLOPEL
	.BYTE	000H	;SLOPEH
	.BYTE	0FFH	;CLIFF
	.BYTE	000H	;SLOPEJ
	.BYTE	000H	;CHECKPOINT
	.BYTE	000H	;TRIGGER
	.BYTE	000H	;TRACK
	.BYTE	000H	;BARRIER
	.BYTE	000H	;TRIGF
	.BYTE	001H	;POINT
	.BYTE	000H	;WATER
	.BYTE	000H	;PUDDLE
MISBLOWUPTBLX

	
**
** DRONEAVOIDTBL
**
** 00 TO IGNORE THIS AREA
** 01 TO AVOID THIS AREA
**
** JFL 15 JAN 93
**
DRONEAVOIDTBL
	.BYTE	000H	;FLAT
	.BYTE	000H	;SLOPEL
	.BYTE	000H	;SLOPEH
	.BYTE	001H	;CLIFF
	.BYTE	000H	;SLOPEJ
	.BYTE	000H	;CHECKPOINT
	.BYTE	000H	;TRIGGER
	.BYTE	001H	;TRACK
	.BYTE	000H	;BARRIER -- NO SUCH THING NOW
	.BYTE	000H	;TRIGF
	.BYTE	001H	;POINT
	.BYTE	000H	;WATER
	.BYTE	000H	;PUDDLE
DRONEAVOIDTBLX

**
** ELEVTBL
**
** .BYTE TERRAINTYPE,DATA
**
** JFL 23 SEP 92
** JFL 29 SEP 92; GUARDRAIL
** JFL 07 OCT 92; ARENA2
** JFL 08 OCT 92; AWAY
** JFL 14 OCT 92; NEW ARENA
**
ELEVTBL
	.BYTE ETS_SLOPEL,000H		;  0
	.BYTE ETS_SLOPEL,010H		;  1
	.BYTE ETS_SLOPEL,020H		;  2
	.BYTE ETS_SLOPEL,030H		;  3
	.BYTE ETS_SLOPEL,040H		;  4
	.BYTE ETS_SLOPEL,050H		;  5
	.BYTE ETS_SLOPEL,060H		;  6
	.BYTE ETS_SLOPEL,070H		;  7
	.BYTE ETS_SLOPEL,080H		;  8
	.BYTE ETS_SLOPEL,090H		;  9
	.BYTE ETS_SLOPEL,0A0H		; 10
	.BYTE ETS_SLOPEL,0B0H		; 11
	.BYTE ETS_SLOPEL,0C0H		; 12
	.BYTE ETS_SLOPEL,0D0H		; 13
	.BYTE ETS_SLOPEL,0E0H		; 14
	.BYTE ETS_SLOPEL,0F0H		; 15

	.BYTE ETS_SLOPEH,000H		; 16 
	.BYTE ETS_SLOPEH,010H		; 17
	.BYTE ETS_SLOPEH,020H		; 18
	.BYTE ETS_SLOPEH,030H		; 19
	.BYTE ETS_SLOPEH,040H		; 20
	.BYTE ETS_SLOPEH,050H		; 21
	.BYTE ETS_SLOPEH,060H		; 22
	.BYTE ETS_SLOPEH,070H		; 23
	.BYTE ETS_SLOPEH,080H		; 24
	.BYTE ETS_SLOPEH,090H		; 25
	.BYTE ETS_SLOPEH,0A0H		; 26
	.BYTE ETS_SLOPEH,0B0H		; 27
	.BYTE ETS_SLOPEH,0C0H		; 28
	.BYTE ETS_SLOPEH,0D0H		; 29
	.BYTE ETS_SLOPEH,0E0H		; 30
	.BYTE ETS_SLOPEH,0F0H		; 31
	     
	.BYTE ETS_CLIFF,000H		; 32
	.BYTE ETS_CLIFF,010H		; 33
	.BYTE ETS_CLIFF,020H		; 34
	.BYTE ETS_CLIFF,030H		; 35
	.BYTE ETS_CLIFF,040H		; 36
	.BYTE ETS_CLIFF,050H		; 37
	.BYTE ETS_CLIFF,060H		; 38
	.BYTE ETS_CLIFF,070H		; 39
	.BYTE ETS_CLIFF,080H		; 40
	.BYTE ETS_CLIFF,090H		; 41
	.BYTE ETS_CLIFF,0A0H		; 42
	.BYTE ETS_CLIFF,0B0H		; 43
	.BYTE ETS_CLIFF,0C0H		; 44
	.BYTE ETS_CLIFF,0D0H		; 45
	.BYTE ETS_CLIFF,0E0H		; 46
	.BYTE ETS_CLIFF,0F0H		; 47
 
	.BYTE ETS_SLOPEJ,000H		; 48
	.BYTE ETS_SLOPEJ,010H		; 49
	.BYTE ETS_SLOPEJ,020H		; 50
	.BYTE ETS_SLOPEJ,030H		; 51
	.BYTE ETS_SLOPEJ,040H		; 52
	.BYTE ETS_SLOPEJ,050H		; 53
	.BYTE ETS_SLOPEJ,060H		; 54
	.BYTE ETS_SLOPEJ,070H		; 55
	.BYTE ETS_SLOPEJ,080H		; 56
	.BYTE ETS_SLOPEJ,090H		; 57
	.BYTE ETS_SLOPEJ,0A0H		; 58
	.BYTE ETS_SLOPEJ,0B0H		; 59
	.BYTE ETS_SLOPEJ,0C0H		; 60
	.BYTE ETS_SLOPEJ,0D0H		; 61
	.BYTE ETS_SLOPEJ,0E0H		; 62
	.BYTE ETS_SLOPEJ,0F0H		; 63

	.BYTE ETS_CHECKPOINT,001H	; 64
	.BYTE ETS_CHECKPOINT,002H	; 65
	.BYTE ETS_CHECKPOINT,004H	; 66
	.BYTE ETS_CHECKPOINT,008H	; 67
	.BYTE ETS_CHECKPOINT,010H	; 68
	.BYTE ETS_CHECKPOINT,020H	; 69
	.BYTE ETS_CHECKPOINT,040H	; 70
	.BYTE ETS_CHECKPOINT,080H	; 71
	 
	.BYTE ETS_FLAT,00H		; 72
	.BYTE ETS_FLAT,01H		; 73
	.BYTE ETS_FLAT,02H		; 74
	.BYTE ETS_FLAT,03H		; 75
	.BYTE ETS_FLAT,04H		; 76
	.BYTE ETS_FLAT,05H		; 77
	.BYTE ETS_FLAT,06H		; 78
	.BYTE ETS_FLAT,07H		; 79
	.BYTE ETS_FLAT,08H		; 80
	.BYTE ETS_FLAT,09H		; 81
	.BYTE ETS_FLAT,0AH		; 82
	.BYTE ETS_FLAT,0BH		; 83
	.BYTE ETS_FLAT,0CH		; 84
	.BYTE ETS_FLAT,0DH		; 85
	.BYTE ETS_FLAT,0EH		; 86
	.BYTE ETS_FLAT,0FH		; 87
	 
	.BYTE ETS_TRIGGER,TRIGBUMP	; 88 BUMP
	.BYTE ETS_TRIGGER,TRIGROCKS	; 89 ROCKS
	.BYTE ETS_WATER,0		; 90 WATER
	.BYTE ETS_TRIGGER,TRIGMUD	; 91 MUD
	.BYTE ETS_TRIGGER,TRIGROCKING	; 92 ROCKING
	.BYTE ETS_PUDDLE,0		; 93 PUDDLE

	.BYTE ETS_BARRIER,00H		; 94
	.BYTE ETS_BARRIER,10H		; 95
	.BYTE ETS_BARRIER,20H		; 96
	.BYTE ETS_BARRIER,30H		; 97
	.BYTE ETS_BARRIER,40H		; 98
	.BYTE ETS_BARRIER,50H		; 99
	.BYTE ETS_BARRIER,60H		;100 
	.BYTE ETS_BARRIER,70H		;101 

	.BYTE ETS_POINT,00H		;102 
	.BYTE ETS_POINT,01H		;103 
	.BYTE ETS_POINT,02H		;104 
	.BYTE ETS_POINT,03H		;105 
	.BYTE ETS_POINT,04H		;106 
	.BYTE ETS_POINT,05H		;107 
	.BYTE ETS_POINT,06H		;108 
	.BYTE ETS_POINT,07H		;109 
	.BYTE ETS_POINT,08H		;110 
	.BYTE ETS_POINT,09H		;111 
	.BYTE ETS_POINT,0AH		;112 
	.BYTE ETS_POINT,0BH		;113 
	.BYTE ETS_POINT,0CH		;114 
	.BYTE ETS_POINT,0DH		;115 
	.BYTE ETS_POINT,0EH		;116 
	.BYTE ETS_POINT,0FH		;117 

	.BYTE ETS_FLAT,00H		;118 
	.BYTE ETS_FLAT,00H		;119 
	.BYTE ETS_FLAT,00H		;120 
	.BYTE ETS_FLAT,00H		;121 
	.BYTE ETS_FLAT,00H		;122 
	.BYTE ETS_FLAT,00H		;123 
	.BYTE ETS_FLAT,00H		;124 
	.BYTE ETS_FLAT,00H		;125 
	.BYTE ETS_FLAT,00H		;126 
	.BYTE ETS_FLAT,00H		;127 

ELEVTBLX

	.EVEN

	
***
*** ---------------------------------------------------------------------
***


***
*** MAKE GHOST MAP
***
	.IF MAKEGHOST
	.DEF MAKEGHOSTMAP

**
** TO MAKE A NEW GHOST MAP
**
** DRFGHOST.I - SET THE FLAG
** CHECK DR.ASM & DRB.ASM TO MAKE SURE THE GHOSTMAP PLANE WILL COME UP
** SET A BREAK POINT ON THE AREA TO CHECK FOR STRAY PIXELS IN MAKEGHOSTMAP
** SET A FINAL BREAK POINT ON THE END OF THE MAKEGHOSTMAP ROUTINE
** RESOLVE ANY STRAY PIXELS WITH ARTIST, AND WHEN THE FINAL BREAKPOINT
** IS REACHED, NOTE <A0> <A1>, CTRL-C TV, 
** SETSPOT, GSPOT -X, H, SAVEMEMW E <A0> <A1>
** CUT OUT THE TOP 16 LINES AS THESE ARE THE COLOR BAR, PASTE THE
** REST INTO DRARENAX.ASM AND FLIP DRFGHOST.I
**
** JFL 28 OCT 92
**

**
** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
** !! SEE DRXY.I FOR DEFINES FOR USING THE GHOSTMAP !!
** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
**

**
** GXRESPIX, GYRESPIX, GXRES, GYRES
** THESE ALL CORRESPOND TO PIXELS RESOLTION TO SCAN GHOST MAP WITH
** 
** GHOSTROWBYTES
** THE NUMBER OF ENTRIES ACROSS IS (SCREEN IS 512 PIXELS / GXRESPIX)
** AND EACH ENTRY IS A BYTE
**
** GHOSTROWS
** THE NUMBER OF ROWS FROM TOP TO BOTTOM IS
**
** ZTABLEMINZ, ZTABLEMAXZ
** THE GHOST MAP SHOULD BE WITHIN OR AT THE BOUNDRY OF THESE
** 
** JFL 28 OCT 92
**
GSCRNWIDTH	EQU	512
GSCRNHEIGHT	EQU	256

	.IF 0 ;8X8 GHOSTMAP
GXRESPIX	EQU	8	;8 PIXELS
GYRESPIX	EQU	8	;8 PIXELS
GXRES		EQU	3   	;8 PIXEL RES -- POWER OF 2
GYRES		EQU	3	;8 PIXEL RES -- POWER OF 2
B_GHOSTROWBYTES	EQU	6	;LOG(GHOSTROWBYTES)
	.ENDIF ;8X8 GHOSTMAP

	.IF 1 ;2X2 GHOSTMAP
GXRESPIX	EQU	2	;2 PIXELS
GYRESPIX	EQU	2	;2 PIXELS
GXRES		EQU	1   	;2 PIXEL RES -- POWER OF 2
GYRES		EQU	1	;2 PIXEL RES -- POWER OF 2
B_GHOSTROWBYTES	EQU	8	;LOG(GHOSTROWBYTES)
	.ENDIF ;2X2 GHOSTMAP

GHOSTROWBYTES	EQU	GSCRNWIDTH/GXRESPIX
GHOSTROWBITS	EQU	GHOSTROWBYTES*8
GHOSTROWS	EQU	GSCRNHEIGHT/GYRESPIX
GHOSTMAX	EQU	GHOSTROWBYTES*GHOSTROWS

M_GHOSTROWBYTES	EQU	GHOSTROWBYTES-1


**
** MAKEGHOSTMAP
**
** JFL 21 SEP 92
**
MAKEGHOSTMAP
	MMTM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	PUSHST
	DINT
	CLR	A0
	MOVW	A0,@DMACTRL
	MOVW	A0,@DMACTRL
	
	;
	;1ST PASS -- GRAB THE SCREEN
	;
	CLR	A0		;A0 INDEX
	CLR	A3		;A3 DEBUG LINE
	MOVI	GHOSTMAP,A13
MGMLOOP
	;CONVERT INDEX INTO Y & X
	MOVE	A0,A1
	ANDI	M_GHOSTROWBYTES,A1	;X
	MOVE	A0,A2
	SRL	B_GHOSTROWBYTES,A2	;Y

	;DEBUG LINE
	CMP	A2,A3
	JREQ	MGMDLINE
	MOVE	A2,A3
MGMDLINE

	;CONVERT TO SCREEN COORDS
	SLL	GXRES,A1	;X RESOLUTION
	ADDI	56,A1		;SHAWN FIX
	ADDI	ARENAX,A1	;ARENA START

	SLL	GYRES,A2   	;Y RESOLUTION
	ADDI	ARENAY,A2	;ARENA START

	;TURN INTO LINEAR ADDR
	SLL	12,A2		;* 512 SCREENROWBYTES * 8 BITS PER BYTE
	SLL	3,A1		;* 8 BITS PER PIXEL
	ADD	A1,A2
	
	MOVB	*A2,*A13
	ADDK	8,A13		;BUMP UP GHOST PTR
	
	INC	A0		;NEXT INDEX
	CMPI	GHOSTMAX,A0
	JRLT	MGMLOOP

	;FOR DEBUGGERS SAKE
	MOVI	GHOSTMAP,A0
	MOVI	GHOSTMAP+(GHOSTMAX*8),A1

	;
	;2ND PASS -- ADJUST COLORS
	;GHOSTMAP WILL CONTAIN COLORS IN ORDER ARTIST PLACED THEM
	;AN 0FFH INDICATES A TRANSPARENCY
	;
	MOVI	GHOSTMAP,A13		;START OF GHOSTMAP
	CLR	A0			;COUNT

	;SET UP PTR TO COLOR ADJUSTMENT TBL
	MOVE	A13,A12
	
	;SKIP 1ST ROW -- FOR COLORBARS
	ADDI	1*GHOSTROWBITS,A13
	ADDI	1*GHOSTROWBYTES,A0

MGMACLOOP
	;GET COLOR DATA
	MOVB	*A13,A3			;GET COLOR
	JRNZ	MGMACNZ

MGMACZ
	;COLOR ZERO IS NOT ONE ARTIST PUT IN, IT IS TRANSPARNCY & NOT PART

	;CONVERT INDEX INTO Y & X
	MOVE	A0,A3
	MOVE	A0,A14
	SRL	B_GHOSTROWBYTES,A14	;Y
	ANDI	M_GHOSTROWBYTES,A3	;X
	CMPI	(400-GXRESPIX)/GXRESPIX,A3
	JRGT	MGMACINRANGE
	CMPI	(255-GYRESPIX)/GYRESPIX,A14
	JRGT	MGMACINRANGE
	SLL	1,A14
	SLL	17,A3
	MOVY	A3,A14
	TLOCKUP
	NOP ;A14 [Y,X] SET BREAKPOINT HERE TO CHECK FOR STRAY PIXELS
MGMACINRANGE
	;SET
	CLR	A3
	DEC	A3			;TURN INTO 0FFH
	JRUC	MGMACNEXT

MGMACNZ
	;MATCH OUR COLOR WITH COLORADJTBL
	CLR	A1			;A1 COLORADJTBL INDEX
	MOVE	A12,A2			;A2 COLORADJTBL PTR
	JRUC	MGMACMATCH

MGMACMLOOP
	ADDK	8,A2			;NEXT COLOR IN COLORADJTBL	
	INC	A1			;COLORADJTBL INDEX
	
MGMACMATCH
	MOVB	*A2,A14			;GET COLOR FROM TBL
	JRZ	MGMACZ			;END OF OUR TBL
	CMP	A14,A3
	JRNE	MGMACMLOOP

	;ADJUST THE COLOR ALREADY
	MOVE	A1,A3

MGMACNEXT
	MOVB	A3,*A13			;SAVE ADJUSTED COLOR
	ADDK	8,A13			;NEXT COLOR
	INC	A0
	CMPI	GHOSTMAX,A0
	JRLT	MGMACLOOP

	;FOR DEBUGGERS SAKE
	MOVI	GHOSTMAP,A0
	MOVI	GHOSTMAP+(GHOSTMAX*8),A1
	TLOCKUP
	NOP	;SET FINAL BREAKPOINT HERE
	POPST
	MMFM	SP,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14
	RETS

	.BSS	GHOSTMAP,8*GHOSTMAX

	.ENDIF ;MAKEGHOST

	
* EOF
