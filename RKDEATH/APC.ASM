***
*** FILE: APC.ASM
*** JFL 13 JUL 92; STARTED MODS
*** JFL 14 JUL 92
*** JFL 17 JUL 92
*** JFL 20 JUL 92
*** JFL 22 JUL 92; BG OBJS OFFSCREEN FIX
*** JFL 29 JUL 92
*** JFL 31 JUL 92; MULTI-OBJ
*** JFL 03 AUG 92
*** JFL 05 AUG 92; DIVU ON HEAD OF MULTI ONLY
*** JFL 18 AUG 92; CALLA DMAWAIT
*** JFL 13 SEP 92; SCALE FIX
*** JFL 16 SEP 92; SCREEN BASED Z
*** JFL 02 OCT 92; MAKEFOREGROUND/BACKGROUND/SHADOWS
*** JFL 04 OCT 92; IMPROVED SHADOW
*** JFL 05 OCT 92; NEW DMAQ
*** JFL 30 OCT 92; NEW SCALING
*** JFL 14 JAN 93
*** JFL 15 JAN 93; ASSERT
***

 	.MLIB	"APMACS.LIB"
	.FILE	"APC.ASM"
	.TITLE	"<<< AMUSEMENT PARK -- CACHE ALIGNED >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST
**
** COMPILE FLAGS
**

**************************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************


*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"
	.INCLUDE	"DR.I"
	.INCLUDE	"DRPAL.I"

** OTHERS USE
	.REF	ANIFUNCSX 	;IN APD.ASM
	.DEF	MAKEFOREGROUND	;APC.ASM
	.DEF	MAKEBACKGROUND	;APC.ASM
	.DEF	MAKESHADOWS	;APC.ASM
	.DEF	DISPLAYPLANE	;APC.ASM
	.DEF	ANIMP		;APC.ASM
	.DEF	IN_ANIM		;APC.ASM

** WE USE
	.REF	DMAVCOUNT	;APD.ASM
	.REF	GETSCALE	;DRH.ASM
	.IF DEBUG
	.REF	DMAQSTARTS	;DR.ASM
	.REF	DEBUGOBJ	;DR.ASM
	.ENDIF ;DEBUG
**
** .BSS
**
	.BSS	IN_ANIM,16	;UHW '1' when processing anim funcs


**
** DEFINES
**
SCALEZ1TO1	EQU	[500,0]		;Z WHERE SCL IS 1TO1 (BIG IS SMALLER)
SCALECLEAN	EQU	2		;DONT SCALE EVERY PIX 
SCALESHRINK	EQU	0		;1 NORM, 2 SHRINKS MORE

	.TEXT
	.EVEN

**
** DISPLAYPLANE
**
** IN
**   A0 PLANE
**   B5 OFFSET
**
** TRASHES ALL A REGISTERS, AND B0-B3
**
** JFL 13 JUL 92; ORIGINAL FROM DREDD
** JFL 14 JUL 92
** JFL 20 JUL 92
** JFL 05 AUG 92
** JFL 18 AUG 92; USE DMAWAIT CALL
** JFL 02 OCT 92; REWRITTEN
** JFL 09 OCT 92; REWRITTEN
** JFL 24 JAN 93
**
DISPLAYPLANE
	MOVE	A0,A1			;COPY OF PLANE START
	MOVE	B5,A3			;PAGE OFFSET
	MOVI	[SCRBOT,SCRRGT],A2	;VISIBLE AREA
	MOVI	DMACTRL,B0
	CLR	B3			;DEBUG DMAQSTARTS

	.IF ASSERT
	MOVL	*A0,A14
	TLOCKON	Z
	JRZ	DPX
	.ENDIF ;ASSERT

DPLOOP
	MOVL	*A0(OBLINK),A0	 	;GET NEXT LINK
	CMP	A0,A1
	JREQ	DPX

CLPULL
	;PULL OBJECT INFO
	;PULL CTRL:OFSET,SAG,DAG,USIZ,CONST:PAL,SCALE,SIZ
	;NOTE: DO OFFSCREEN TEST & SIZE TEST WHEN OBJ IS SCALED: NO A7 PULL
	MOVE	A0,A14
	ADDI	ODMAPULL,A14
	MMFM	A14,A13,A12,A11,A10,A9,A8,A7

	;REG USE
	; A0 OBJ
	; A1 PLANE
	; A2 [SCRBOT,SCRRGT]
	; A3 SCREEN OFFSET
	; A4
	; A5
	; A6
	; A13-A7 CTRL:OFSET,SAG,DAG,USIZ,CONST:PAL,SCALE,SIZ
	; A14 SCRATCH
	; B0 DMACTRL
	; B1
	; B2 TEMP Q COMPARE
	; B3 DMASTART COUNT
	; B4 SCRATCH
	; B11-B13 DMAQ

	BTST	B_INUSE+16,A13
	JRZ	DPLOOP

	;HAS THE  OBJECT LEFT THE SCREEN
	CMPXY	A2,A11
	JRXGT	DPLOOP
	JRYGT	DPLOOP
	MOVE	A11,A14
	ADDXY	A7,A14
	JRXN	DPLOOP
	JRYN	DPLOOP

	;CHECK FOR BAD OBJECTS
	MOVI	[40H,40H],A14		;SCALE MIN VALUES
	CMPXY	A14,A8
	JRXLT	DPBADSCALE
	JRYLT	DPBADSCALE
	MOVI	[800H,800H],A14		;SCALE MAX VALUES
	CMPXY	A14,A8
	JRXGE	DPBADSCALE
	JRYGE	DPBADSCALE
	MOVI	[0,2],A14		;MIN SIZE
	CMPXY	A14,A7
	JRXLE	DPBADSIZE
	JRYLE	DPBADSIZE
	MOVI	[SCRBOT,SCRRGT],A14	;MAX SIZE
	CMPXY	A14,A7
	JRXGE	DPBADSIZE
	JRYGE	DPBADSIZE
	
	;EXTRA SCALE VS SIZE CHECK
	MOVI	[240H,240H],A14		;SCALE MAX VALUES
	CMPXY	A14,A8
	JRXLT	NOCLIP
	MOVK	4,A14
	CMPXY	A14,A7
	JRXLE	DPBADSIZE
	

NOCLIP
	;ADJUST FOR FLIPPING
	CLR	A14	
	BTST	B_FLIPH+16,A13
	JREQ	NOH
	MOVX	A7,A14			;ADJUST FOR H FLIP
      	DEC	A14
NOH 
	BTST	B_FLIPV+16,A13
	JREQ	NOV
 	MOVY	A7,A14			;ADJUST FOR V FLIP
	SUBI	[1,0],A14		
NOV
	ADDXY	A14,A11			;ADJUST DAG

	;ADD PAGE OFFSET
	ADDXY	A3,A11
	
	;
	;HANDLE DISPLAYING THE OBJECT
	;

	;ADD ENTRY TO MEMORY
	MOVE	B12,A14
	MMTM	A14,A13,A12,A11,A10,A9,A8

	DINT				;----------------------------------

	MOVE	A14,B12	      		;SET THE Q ENTRY

	;CHECK IF THE DMA IS WORKING
	MOVE	B11,B11
	JRNZ	DPENABLE		;DMA IS ENABLED AND 

	;ALLOW DMA INT
	SETF	1,0,0			;FIELD 0 IS 1 BIT
	MOVK	1,A14
	MOVE	A14,@(INTENB+B_X1E),0
	MOVE	SP,@(INTPEND+B_X1E),0
	SETF	16,1,0			;RESTORE FIELD 0

	MOVI	DMAREGS,B11		;MUST LOAD THIS BEFORE KICKING DMA

	;CHECK IF DMA IS FINISHING UP LAST ITEM
	MOVW	*B0,B4
	JRN	DPENABLE		;DMA WILL TRIGGER ITSELF WHEN DONE

	TRAP	1			;KICK DMA
	INC	B3			;DEBUG DMAQSTARTS
DPENABLE
	EINT				;----------------------------------
	JRUC	DPLOOP

DPX
	.IF DEBUG
	;KEEP STATS ON Q STARTS
	MOVW	@DMAQSTARTS,B0
	CMP	B0,B3
	JRLE	DPXX
	MOVW	B3,@DMAQSTARTS	
DPXX
	.ENDIF ;DEBUG

	RETS

DPBADSCALE
	;TLOCKUP
	JRUC	DPLOOP
DPBADSIZE
	;TLOCKUP
	JRUC	DPLOOP

***************************** END OF OBJECT BLASTER  *************************

**
** MAKEFOREGROUND
**
** IN
**   A0 PLANE
**   A1 PLANE OFFSET Y:X
**
** NOTE: IF AN OBJ OR PART CHANGES SIZE, OR ANIM POINT 
** THEN CLEAR THE OSCALEDMA WORD
** AND THIS ROUTINE WILL FIGURE PROPER SCALE STUFF OUT
**
** JFL 20 JUL 92; REWORKED FROM DREDD
** JFL 31 JUL 92; MULTI-PART
** JFL 05 AUG 92; DIV ON HEAD MULTI ONLY
** JFL 07 AUG 92
** JFL 24 SEP 92; IF HEAD OF MULTI HAS SCALE OF ZERO...
** JFL 28 SEP 92; NEW SCRATCH
** JFL 02 OCT 92
** JFL 12 OCT 92; OPARTSXY
** JFL 13 JAN 93; OPARTSXY FIXED FOR FLIPPING
** JFL 03 FEB 93
** JFL 16 FEB 93; PRECISION FIX IN SIZE SCALING
**
MAKEFOREGROUND
	MOVE	A0,A4
	MOVE	A1,B4

	.IF ASSERT
	MOVL	*A0,A14
	TLOCKON	Z
	JRZ	MFGX
	.ENDIF ;ASSERT
MFGLOOP
	CLR	B0		;USE OZOFF FLAG

	;NEXT OBJ
	MOVL	*A0,A0
	CMP	A0,A4
	JRZ	MFGX

	.IF DEBUG
	MOVL	@DEBUGOBJ,A14
	CMP	A14,A0
	JRNE	FGSNOBREAK
	NOP
FGSNOBREAK
	.ENDIF ;DEBUG
	
	;IS THIS A HEAD OR 
	MOVL	*A0(OPART1),A10
	JRZ	FSHEAD
	CMP	A0,A10
	JREQ	FSHEAD

	;SETUP FOR MULTI
	MOVE	A10,A1		;PULL FROM HEAD
	ADDI	OXVAL,A1   	;SKIP TO XYZ POSITIONS
	MMFM	A1,A7,A5,A3	;LOAD A7:OXVAL, A5:OYVAL, A3:OZVAL
	
	;IF SHADOW, ZERO Y
	MOVL	*A0(OSHADIMG),A6
	JRZ	FGSNOSHAD
	CLR	A5		;ZERO Y
	
FGSNOSHAD
	;MULTIPART, USE SCALE STUFF FROM HEAD
	MOVL	*A10(OSCALEDMA),A6		;HEAD SCALE
	MOVW	*A10(OSCALEMUL),A13
	JRNZ	FSHEADHASSCALE

	;IF HEAD SCALE IS ZERO, THEN IT WAS JUST ADDED, AND SCALE
	;NEEDS TO BE FIGURED OUT

	;HOW DO WE HANDLE THE SCALE
	MOVW	*A10(OSCALETYPE),A14
	JRNZ	FGSGETSCALE

	;NO SCALE
	MOVI	SCALE1TO1,A2
	JRUC	FGSGOTSCALE

FGSGETSCALE
	MOVE	A3,A1			;SAVE
	MOVE	A10,A2
	CALLA	GETSCALE ;IN: A2,A3,A14 OBJ,OZVAL,OSCALETYPE 
			 ;OUT:A2 OSCALEDMA:OSCALEMUL
	MOVE	A1,A3			;RESTORE

FGSGOTSCALE
	MOVX	A2,A13
	MOVE	A2,A6
	ZEXT	A13,W			;A13 SCALE
	SRL	16,A6
	MOVY	A2,A6			;A6 DMASCALE

	;BE NICE, AND SET SCALE FOR HEAD
	MOVL	A6,*A10(OSCALEDMA)
	MOVW	A13,*A10(OSCALEMUL)

FSHEADHASSCALE
	;EACH PART MUST KEEP TRACK OF ITS OWN SCALE SO WHEN A PART
	;IS ADDED IT ALONE GOES THROUGH THE MULTIPLIES
	MOVW	*A0(OSCALEMUL),A1		;OBJ SCALEMUL
	CMP	A13,A1
	JREQ	CLSCLD
	JRUC	FSSCALE

FSHEAD
	MOVE	A0,A1		;get obj base in A1 for pull of vals
FSHEAD2
	ADDI	OXVAL,A1   	;SKIP TO XYZ POSITIONS
	MMFM	A1,A7,A5,A3	;LOAD A7:OXVAL, A5:OYVAL, A3:OZVAL

	;HOW DO WE HANDLE THE SCALE
	MOVW	*A0(OSCALETYPE),A14
	JRNZ	FSGETSCALE

	;NO SCALE
	MOVI	SCALE1TO1,A2
	JRUC	FSGOTSCALE

FSGETSCALE
	MOVE	A3,A1		;SAVE
	MOVE	A0,A2
	CALLA	GETSCALE ;IN: A2,A3,A14 OBJ,OZVAL,OSCALETYPE 
			 ;OUT:A2 OSCALEDMA:OSCALEMUL
	MOVE	A1,A3		;RESTORE

FSGOTSCALE
	;ISOLATE SCALE & DMASCALE
	MOVX	A2,A13
	MOVE	A2,A6
	ZEXT	A13,W			;A13 SCALE
	SRL	16,A6
	MOVY	A2,A6			;A6 DMASCALE

	;SETUP FOR SCALE SIZ & ANI
	MOVW	*A0(OSCALEMUL),A1	;previous X scale in a1
	CMP	A13,A1			;new X scale in a6
	JREQ	CLSCLD			;

FSSCALE
	MOVL	A6,*A0(OSCALEDMA)	;SAVE SCALE
	MOVW	A13,*A0(OSCALEMUL) 	;SAVE INVSCALE (NECESSARY?)
	MOVL	*A0(OUSIZE),A1		;unscaled Y:X SIZ in a1
	MOVL	*A0(OUANIOFF),A9	;UNSCALED Y:X ANIM OFFSET IN A9
	MOVL	*A0(OPARTSXY),A11	;ADDITIONAL Y:X OFFSET

	;
	;HANDLE OPARTSXY
	;

	;ADD OR SUBTRACT OPARTSXY INTO ANIMXY BASED ON FLIP BITS
	MOVW	*A0(OCTRL),A10	    
	CLR	A14
	SUBXY	A11,A14			;NEGXY OPARTSXY
	BTST	B_FLIPH,A10
	JRZ	FSSNOH
	MOVX	A14,A11
FSSNOH
	BTST	B_FLIPV,A10
	JRZ	FSSNOV
	MOVY	A14,A11
FSSNOV
	SUBXY	A11,A9

	;
	;SCALE SIZE & ANIMXY
	;

	SETF	12,1,1			;FS1 Rs MAX BIT SIZE FOR MULTIPLIES

	; SCALE SIZ
	MOVE	A1,A11		    	;UNSCALED Y:X SIZE
	ZEXT	A11,W 			;ISOLATE X SIZE
	MPYU	A13,A11		  	;A11 = X SIZ * SCALE 
	SRL	MPYSCALE,A11		;SCALE IS 100H BASE
	SRL	16,A1			;ISOLATE Y SIZE
	MPYU	A13,A1			;A1 = Y SIZ * SCALE
	SLL	16-MPYSCALE,A1		;SCALE IS 100H BASE
	MOVX	A11,A1			;A1 = SCALED Y:X SIZ 

	; SCALE ANI
	MOVE	A9,A11			;GET UNSCALED Y:X ANI
	SEXT	A11,W			;READY FOR 32 BIT SIGNED MULT OF X
	MPYS	A13,A11		  	;A11 = X ANI * SCALE
	SRA	MPYSCALE,A11		;SCALE IS 100H BASE
	SRA	16,A9			;SHIFT DOWN Y ANIM -- MAINTAIN SIGN
	MPYS	A13,A9			;A9 = Y ANIM * SCALE
	SLL	16-MPYSCALE,A9		;SCALE IS 100H BASE
	MOVX	A11,A9			;A9 = SCALED Y:X ANIM

	; SAVE RESULTS
	SETF	32,0,1			;RESTORE FS1
	MOVE	A1,*A0(OSIZE),L		;SAVE SCALED Y:X SIZ
	MOVE	A9,*A0(OANIOFF),L	;SAVE SCALED Y:X ANI

CLSCLD

	;
	;GET DSTXY
	;HANDLE OZOFF
	;

	;HANDLE THE Y COORD
	MOVE	A3,A9		  	;GET Y
	ADD	A5,A9			;ADD Z
	MOVL	@WORLDY,A6	 	;SUBTRACT OUT THE START OF THE WORLD
	SUB	A6,A9			;ADJUSTED Y

	;ADD OZOFF TO THE SCREEN Y
	MOVW	*A0(OZOFF),A14			       
	SLL	16,A14
	ADD	A14,A9

	;HANDLE THE X COORD
	;HERE WOULD BE THE PLACE TO DO X CONVERGENCE -- ITS NOT DONE NOW
	MOVL	@WORLDX,A6		;SUBTRACT OUT THE START OF THE WORLD
	SUB	A6,A7
	SRL	16,A7
	MOVX	A7,A9			;COMBINE WITH Y

	;
	;FORM DAG
	;

	;HANDLE ANI POINT
	MOVL	*A0(OANIOFF),A1		;REWORK FOR BETTER REGISTER USE
	MOVE	A1,A14
	MOVL	*A0(OSIZE),A2
	MOVW	*A0(OCTRL),A3	    
	BTST	B_FLIPH,A3
	JRZ	CLTRYV

	;FLIP H
	SUBXY	A2,A1			;ANI-SIZE
	SEXT	A1,W			;ANIX-SIZEX
	NEG	A1	  		;SIZEX-ANIX
	DEC	A1			;SIZEX-ANIX-1
CLTRYV	
	BTST	B_FLIPV,A3
	JRZ	CLANI

	;FLIP V
	NEG	A14			;     -ANIY
	ADDXY	A2,A14			;SIZEY-ANIY
	SUBI	[1,0],A14		;SIZEY-ANIY-1
CLANI	
	MOVY	A14,A1
	SUBXY	A1,A9		     	;ADJUST FOR ANI
	MOVE	B4,A1			;SUBTRACT OUT PLANE OFFSET
	SUBXY	A1,A9
	MOVL	A9,*A0(ODAG)		;SAVE DAG FOR CLIPPING COMPUTATION

	JRUC	MFGLOOP
MFGX
	RETS

**
** MAKEBACKGROUND
**
** IN
**   A0 PLANE
**   A1 PLANE OFFSET Y:X
**
** JFL 20 JUL 92; FROM DREDD
** JFL 22 JUL 92
** JFL 31 JAN 93; USE OZOFF
**
MAKEBACKGROUND
	MOVE	A0,A4

	.IF ASSERT
	MOVL	*A0,A14
	TLOCKON	Z
	JRZ	MBGX
	.ENDIF ;ASSERT

	JRUC	MBGNEXT
MBGLOOP

	;FORM DAG FOR THIS OBJECT
	MOVW	*A0(OXPOS),A3
	MOVW	*A0(OZPOS),A2
	MOVW	*A0(OZOFF),A14
	ADD	A14,A2
	SLL	16,A2
	MOVY	A2,A3
	SUBXY	A1,A3	   		;SUBTRACT OUT THE PLANE OFFSET
	MOVL	A3,*A0(ODAG)

MBGNEXT
	;NEXT OBJ
	MOVL	*A0,A0
	CMP	A0,A4
	JRNE	MBGLOOP

MBGX
	RETS

**
** MAKESHADOWS
**
** IN
**   A0 PLANE
**   A1 PLANE OFFSET Y:X
**
** JFL 02 OCT 92
** JFL 04 OCT 92
** JFL 05 OCT 92
** JFL 08 JAN 93; OZOFF USED
**
MAKESHADOWS
	MOVE	A0,A4
	MOVE	A1,B4

	.IF ASSERT
	MOVL	*A0,A14
	TLOCKON	Z
	JRZ	MSX
	.ENDIF ;ASSERT
MSLOOP
	;REG USE
	; A0 SHADOW OBJ
	; A1 PARENT OBJ

	;NEXT SHADOW OBJ
	MOVL	*A0,A0
	CMP	A0,A4
	JRZ	MSX
   	
	;GET PARENT OBJ	-- WHO SHADOW BELONGS TO
	MOVL	*A0(OSHAD),A1
	JRZ	MSLOOP

	;PULL DMA STUFF	FROM PARENT
	;AFTER PULL
	;A11,A10,A9,A8,A7,A6,A5 CTRL:OFSET,SAG,DAG,USIZ,CONST:PAL,SCALE,SIZ
	;
	MOVE	A1,A3
	ADDI	ODMAPULL,A3
	MMFM	A3,A11,A10,A9,A8,A7,A6,A5	;PULL

	;HANDLE OBJS ON GROUND SIMPLY
	MOVW	*A1(OYPOS),A14
	JRNZ	MSINAIR

	;CHECK IF THIS IS A CAR
	MOVW	*A1(OID),A14
	SLL	SL_SUPL,A14
	SRL	SR_SUPL,A14
	CMPI	SUPLIST_CAR,A14
	JREQ	MSCARONGROUND

	;FIGURE SCALE OF SHADOW
	MOVE	A6,A2			;GET SCALE
	ADDXY	A2,A2			;CHANGE SCALE
	MOVY	A2,A6			;UDPATE Y SCALE

	;GET BASE OF SHADOW IN LINE W/BASE OF IMAGE
	MOVE	A5,A2		;GET SCALED SIZ
	SRL	16+1,A2		;ISOLATE Y & MAKE SMALLER
	SLL	16,A2
	ADDXY	A2,A9		;MOVE DAG DOWN

	;ADJUST SIZ
	MOVE	A5,A2
	SRL	1,A2
	MOVY	A2,A5

	;SET CTRL BITS
	ANDI	M_SHADCTRLAND,A11
	ORI	M_SHADCTRLOR,A11

	;SET SYSTEM PAL & CONST
	MOVI	SHADPALCONST,A7

	;ORI	DMAGO<<16,A11

	;PUSH INTO SHADOW OBJ
	MOVE	A0,A2
	ADDI	ODMAPULLX,A2		
	MMTM	A2,A11,A10,A9,A8,A7,A6,A5	;PUSH
	JRUC	MSLOOP

MSCARONGROUND

	;MOVE SHADOW DOWN
	MOVE	A5,A2		;GET SCALED SIZ
	SRL	16+5,A2		;ISOLATE Y SIZE & MAKE SMALLER
	SLL	16,A2		;SHIFT BACK INTO POS
	ADDXY	A2,A9		;MOVE DAG DOWN

	;MOVE SHADOW LEFT
	MOVE	A5,A2		;GET SCALED SIZ
	SLL	16,A2		;ISOLATE X SIZE
	SRL	16+3,A2		;SHIFT BACK INTO POS & MAKE SMALLER
	SUBXY	A2,A9		;MOVE DAG LEFT

	;SET CTRL BITS
	ANDI	M_SHADCTRLAND,A11
	ORI	M_SHADCTRLOR,A11

	;SET SYSTEM PAL & CONST
	MOVI	SHADPALCONST,A7

	;ORI	DMAGO<<16,A11

	;PUSH INTO SHADOW OBJ
	MOVE	A0,A2
	ADDI	ODMAPULLX,A2		
	MMTM	A2,A11,A10,A9,A8,A7,A6,A5	;PUSH
	JRUC	MSLOOP

MSUSEMULTISHAD
	ANDNI	DMAGO<<16,A11

	;PUSH INTO SHADOW OBJ
	MOVE	A0,A2
	ADDI	ODMAPULLX,A2		
	MMTM	A2,A11,A10,A9,A8,A7,A6,A5	;PUSH
	JRUC	MSLOOP

MSINAIR
	;
	;RE-FORM DAG
	;

	;HANDLE Y AND Z COORDS
	MOVL	*A1(OZVAL),A9 		;GET Z -- TREAT AS Y
	MOVL	@WORLDY,A14		;START OF WORLD
	SUB	A14,A9

	;HANDLE THE X COORD
	MOVL	*A1(OXVAL),A2		;GET X -- TREAT AS X
	MOVL	@WORLDX,A14		;START OF WORLD
	SUB	A14,A2
	SRL	16,A2
	MOVX	A2,A9			;COMBINE WITH Y

	;HANDLE ANI POINT
	MOVL	*A1(OANIOFF),A3		;REWORK FOR BETTER REGISTER USE
	MOVL	*A1(OSIZE),A2
	SUBXY	A3,A2		   	;FIND SIZ - ANI FOR FLIPPING
	BTST	B_FLIPH+16,A11
	JREQ	MSIATRYV
	MOVX	A2,A3
MSIATRYV	
	BTST	B_FLIPV+16,A11
	JREQ	MSIAANI
	MOVY	A2,A3
MSIAANI	
	SUBXY	A3,A9		     	;ADJUST FOR ANI
	MOVE	B4,A3			;SUBTRACT OUT PLANE OFFSET
	SUBXY	A3,A9

	;FIGURE SCALE OF SHADOW
	MOVE	A6,A2			;GET SCALE
	ADDXY	A2,A2			;MAKE SCALE TWICE AS SMALL
	MOVY	A2,A6			;UDPATE Y SCALE

	;GET BASE OF SHADOW IN LINE W/BASE OF IMAGE
	MOVE	A5,A2		;GET SCALED SIZ
	SRL	16+1,A2		;ISOLATE Y & CUT IN HALF
	SLL	16,A2
	ADDXY	A2,A9		;MOVE DAG DOWN

	;ADJUST SIZ
	MOVE	A5,A2
	SRL	1,A2
	MOVY	A2,A5
	
	;SET CTRL BITS
	ANDI	M_SHADCTRLAND,A11
	ORI	M_SHADCTRLOR,A11

	;SET SYSTEM PAL & CONST
	MOVI	SHADPALCONST,A7

	;ORI	DMAGO<<16,A11

	;PUSH INTO SHADOW OBJ
	MOVE	A0,A2
	ADDI	ODMAPULLX,A2		
	MMTM	A2,A11,A10,A9,A8,A7,A6,A5	;PUSH
	JRUC	MSLOOP

MSOFF
	ANDNI	DMAGO<<16,A11

	;NECESSARY?
	;PUSH INTO SHADOW OBJ
	MOVE	A0,A2
	ADDI	ODMAPULLX,A2		
	MMTM	A2,A11,A10,A9,A8,A7,A6,A5	;PUSH
	JRUC	MSLOOP
	
MSX
	RETS

**
** DMAINT
**
** NOTE: PENDING BITS ON EXTERNAL INTERRUPTS ARE READ ONLY -- I.E. DONT CLEAR
**
**  B11 DMAREGS ON ENTRY, CLEARED IF LAST Q ITEM WAS SENT
**  B12 NEXT DMA PUSH
**  B13 NEXT DMA PULL
**
** JFL 05 OCT 92; NEW DMAQ
** JFL 04 FEB 93; LOAD DMAREGS AFTER
**
	.ALIGN	;ENSURE CACHE BOUNDRY
DMAINT
	;CMPI	DMAREGS,B11
	;JRNE	$
	
	MOVL	-*B13,-*B11		;CACHE BOUNDRY
	MOVL	-*B13,-*B11
	MOVL	-*B13,-*B11
	MOVL	-*B13,-*B11
	MOVL	-*B13,-*B11		;CACHE BOUNDRY
	MOVL	-*B13,-*B11

	CMP	B12,B13
	JRLS	DMAINT1
	ADDI	6*20H,B11   		;CACHE BOUNDRY
	RETI

DMAINT1
	SETF	1,0,0
	MOVE	B11,@(INTENB+B_X1E),0	;NEEDS ONLY 1 BIT -- CACHE BOUNDRY
	CLR	B11		
	RETI				;CACHE BOUNDRY

**************************************************************************
*********************** END OF CACHE SEGMENT 1 ***************************
**************************************************************************

**
** NXTANI
** PROCESS TO ANIMATE, EXECUTE FUNCTIONS for OBJECTS/MULTIPARTERS on ANIOBJS
**
** JFL 29 JUL 92; FROM DREDD
** JFL 22 NOV 92; SLEEP WHEN ANIMFRM IS ZERO
** JFL 14 JAN 93
** JFL 25 JAN 93
**
	.ALIGN	;ENSURE CACHE BOUNDRY
NXTANI
	;DOES THIS ANIM NEED TO BE WOKEN UP?
	MOVW	*A8(ANIMSLPB),A6
	DEC	A6
	JRP	SLEEPING

	.IF DEBUG
	MOVL	@DEBUGOBJ,A14
	CMP	A8,A14
	JRNE	NAXXX
	NOP
NAXXX
	.ENDIF ;DEBUG

	;PROCESS AN ANIMATION SCRIPT ENTRY
	MOVL	*A8(ANIMFRM),A0
	JRZ	SLEEPING
	MOVL	*A0+,A1			;GRAB FRAME PTR
	JRNZ	SKLPFRM
	MOVL	*A8(ANIMSCR),A0		;RESET TO TOP OF SCRIPT
	MOVL	*A0+,A1
SKLPFRM
 	MOVW	*A8(OFLAGS),A4

	;GET SLEEP TIME & CHECK IF THERE IS A FUNC TO Q UP
	MOVW	*A0+,A6			;GET FLAGS.1:SLEEP.15
	JRNN	SKAFUNC

	;GET FUNC AND NUM OF WORD ARGS
	MOVL	*A0+,A14	;GET FUNC AND NUM ARGS
	MOVE	A14,A2
	SRL	4,A2		;DROP ARG COUNT BITS
	SLL	4,A2
	MOVL	A2,*A10+	;QUEUE UP FUNCTION CALL
	MOVL	A8,*A10+	;QUEUE UP OBJ PTR FOR FUNCTION CALL
	SLL	28,A14		;JUST WANT ARG COUNT BITS
	SRL	24,A14		;ARG COUNT IS IN WORDS
	JRZ	SKAFUNC
	MOVL	A0,*A8(ANIMARG)
	ADD	A14,A0		;SKIP SCRIPT PTR PAST ARGS
SKAFUNC

	;CHECK IF WE ARE GOING TO UPDATE THE IMAGE
	BTST	0,A1
	JRNZ	SKANI0		;DONT UPDATE THE IMAGE

	; ANIMATION SUBROUTINE
	; A1=NEW IMAGE POINTER
	; A4=NEW OFLAGS
	; A8=OBJECT STRUCTURE POINTER TO BE UPDATED

	;GET AND STUFF NEW SIZE,SAG,OFFSET
	MOVL	*A1,A2
	ZEXT	A4,W		;ZERO OFFSET IN A4
	MOVL	*A1(ISAG),A3

	;COMBINE NEW & OLD IMAGE CTRL BITS
	MOVB	*A1(ICTRL+7),*A8(OCTRL+7)

	MOVL	*A1(IANIOFF),A5	;A5 = X COMPONENT OF IANIOFF
	MOVE	A5,A14		;A14 = Y COMPONENT OF IANIOFF

	MOVL	A1,*A8(OIMG)
	MOVL	A2,*A8(OUSIZE)
	MOVL	A2,*A8(OSIZE)
	MOVL	A3,*A8(OSAG)
	MOVW	A4,*A8(OFLAGS)
	MOVL	A5,*A8(OUANIOFF)
	MOVL	A5,*A8(OANIOFF)

	BTST	B_NOTFG,A4
	JRNZ	SKNOTFG1

	CLR	A14	       		
	MOVW	A14,*A8(OSCALEMUL)		;FORCE UPDATE

	;CHECK IF WE SHOULD CHANGE THE SHADOW IMG
	BTST	B_ANIMSHAD,A4
	JRZ	SKNOTFG1

	MOVL	*A8(OSHADIMG),A7
	TLOCKON	Z ;SHOULD HAVE SHAD IMG
	MOVW	A14,*A7(OSCALEMUL)		;FORCE UPDATE
	MOVL	A1,*A7(OIMG)
	MOVL	A2,*A7(OUSIZE)
	MOVL	A3,*A7(OSAG)
	MOVL	A5,*A7(OUANIOFF)
	SETF	2,0,0
	MOVE	*A8(OCTRL+B_FLIPH),*A7(OCTRL+B_FLIPH),0
	SETF	16,1,0

SKNOTFG1
SKANI0
	MOVL	A0,*A8(ANIMFRM)

	;ISOLATE TIME TO NEXT ANIM
	SLL	32-15,A6
	SRL	32-15,A6		
	JRNZ	GOTSLP		

	;SCRIPT DIDNT SET SLEEP TIME, USE SLEEP TIME FROM OBJ
	MOVW	*A8(ANIMSLPA),A6	
GOTSLP				
SLEEPING
	MOVW	A6,*A8(ANIMSLPB)	
	MOVL	*A8(ANIMNXT),A8
	JRNZ	NXTANI

	;MARK END OF FUNC Q WITH A ZERO
	MOVL	A8,*A10+

	;
	;PROCESS QUEUED UP ANIM FUNCS
	;
	MOVK	1,A0
	MOVW	A0,@IN_ANIM

	MOVL	A12,*A13(PDATA)
	MOVI	ANIFUNCS,A12	;RESET TO TOP OF LIST TO PULL FUNCS

	;PULL OUT NEXT ANIM FUNCTION
ANIFNCLP				;MAKE SURE THIS LOOP DOESN'T
	MOVL	*A12+,A0		;SPAN CACHE BLOCK BOUNDARY
	JRZ	ANIFNCX			;
	MOVL	*A12+,A8		;
	CALL	A0			;
	JRUC	ANIFNCLP		;
ANIFNCX
	MOVW	A0,@IN_ANIM
	MOVL	*A13(PDATA),A12
ANILPX
	;
	;GO TO SLEEP
	;
	MOVK	1,A0
	CALLA	PRCSLP

ANIMP
	MOVI	M_FLIPH|M_FLIPV,A11	;USED TO MASK OUT M_FLIPH|M_FLIPV
	MOVI	ANIFUNCS,A10		;GET READY TO QUEUE UP ANIM FUNCS
	MOVL	@ANIOBJS,A8
	JRNZ	NXTANI
	JRUC	ANILPX

**************************************************************************
*GET SAG FOR OBJECT - ADJUSTS SAG FOR FLIP
*CALLING PARAMETERS:
*A1=PTR TO IMAGE HEADER (OIMG)
*A4=OBJECT FLAGS
*RETURNS:
*A2=RETURNED WITH NEW OSIZE
*A3=RETURNED WITH NEW SAG
*A4=RETURNED WITH NEW OFFSET:OFLAGS
*
* JFL 15 OCT 92
*
BKGSAGOF:
	PUSH	A5
	MOVL	*A1(ISAG-020H),A3	;GET TOP LEFT SAG (-20 -> no ani off)
	JRUC	GSAGOF_E
GSAGOF:
	PUSH	A5
	MOVL	*A1(ISAG),A3	;GET TOP LEFT SAG
GSAGOF_E
	ZEXT	A4,W		;ZERO OFFSET IN A4
	MOVL	*A1,A2		;ISIZE (offset 0)
GSAGX:	    
	MOVW	*A1(040H),A14	;WFD
	OR	A14,A4
	PULLQ	A5
	RETS
**************************************************************************


	.END

* EOF
