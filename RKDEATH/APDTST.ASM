 	.MLIB	"APMACS.LIB"
	.FILE	"APDTST.ASM"
	.TITLE	"<<< AMUSEMENT PARK - DIAGNOSTIC TEST ROUTINES >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**************************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

	.INCLUDE	"AP.H"
	.INCLUDE	"STRING.H"
	.INCLUDE	"DRDISP.I"

**************************************************************************
*								         *
* 	DEFS AND REFS							 *
*								         *
**************************************************************************

	.DEF	POWERTST, DIAGCPUTEST, POWERCMOS, BURNIN, CHECKDIPFREE
	.DEF	READ_DIP, FORCEDIP

	.DEF	SWITCHTEST, CONV_PLOT, DIPTEST, COLORBAR

	.ref	CPU_RET
	.REF	SYSCOPY
	.REF	GAME_STATE

*SYMBOLS IN APDUTL.ASM
	.REF	CIRCLE, HVLINE, STRING, RECTANGLE, POINT, DSCRCLR
	.REF	STRINGCENTER, INITCOLR
*SYMBOLS IN AP.ASM
	.REF	POWERRET, PCMOSRET, EXEC_LP, CLSCRACH, WDOGDIS, WDISTAB
	.REF	MAIN_INIT, INITDATA, IDATALEN
*SYMBOLS IN APMENU.ASM
	.REF	ROM_NAME, CKTEST, BLASTMESS
*SYMBOLS IN APCMOS.ASM
	.REF	CMOS_VAL, FAC_SET, CLR_AUD, STORE_AUDIT, KILL_AUD, GET_AUD
	.REF	PUT_ADJ, CMOSLOCK, CMOSUNLOCK, F_ADC_S
*SYMBOLS IN APMISC.ASM
	.REF	COLOR_START
*SYMBOLS IN APADJ.ASM
	.REF	USA_1, USA_2, USA_3, USA_4, USA_ELECTITLE
	.REF	GERMAN_1, GERMAN_2, GERMAN_3, GERMAN_4, GERMAN_ELECTITLE
	.REF	FRENCH_1, FRENCH_2, FRENCH_3, FRENCH_4, FRENCH_ELECTITLE
	.REF	SET_COIN_ADJ, GET_CSPT, DIPCOINTAB, DIPCREDTAB


**************************************************************************
*								         *
* 			SOME RAM FOR YOU				 *
*								         *
**************************************************************************
	.BSS	SWSET1,32		; FOR SWITCH TEST
	.BSS	SWSET2,32
	.BSS	SWPREV1,32
	.BSS	SWPREV2,32

	.BSS	DIPVAL,16
	.BSS	DIP1ST,16

	.BSS	FORCEDIP,16		; FOR FORCING THE USE OF THE DIP
	.BSS	CERRORS,32
	.BSS	CPASSES,32

**************************************************************************
*								         *
* 	USEFUL MACROS							 *
*								         *
**************************************************************************

BUT_MAC	.MACRO  X,Y,RADIUS,COLOR,MASK,SHIFT,EXTEND
	.WORD	:X:	
	.WORD	:Y:
	.WORD	:RADIUS:
	.LONG	:COLOR:
	.LONG	:MASK:
	.WORD	:SHIFT:
	.WORD	:EXTEND:
        .ENDM

STR_MAC	.MACRO  X,Y,STRING,COLOR,DIR
	.WORD	:X:	
	.WORD	:Y:
	.LONG	:STRING:
	.WORD	:COLOR:
	.WORD	:DIR:
        .ENDM

SW_MAC	.MACRO  X,Y,STRING,COLOR,DIR,MASK
	.WORD	:X:	
	.WORD	:Y:
	.LONG	:STRING:
	.WORD	:COLOR:
	.WORD	:DIR:
	.LONG	:MASK:
        .ENDM

VECMAC	.MACRO	COLOR,X1,Y1,X2,Y2
	.WORD	:COLOR:
	.WORD	:X1:
	.WORD	:Y1:
	.WORD	:X2:
	.WORD	:Y2:
	.ENDM

DOTMAC	.MACRO	COLOR,X,Y
	.WORD	:COLOR:
	.WORD	:X:
	.WORD	:Y:
	.ENDM

RECTMAC	.MACRO	COLOR,X,Y,W,H
	.WORD	:W:
	.WORD	:H:
	.WORD	:X:
	.WORD	:Y:
	.WORD	:COLOR:
	.ENDM

CHIPMAC	.MACRO	NUM,X1,Y1,X2,Y2,X3,Y3,STRING,DIR,X4,Y4,STUFFED
	.WORD	:NUM:
	.WORD	:X1:
	.WORD	:Y1:
	.WORD	:X2:
	.WORD	:Y2:
	.WORD	:X3:
	.WORD	:Y3:
	.LONG	:STRING:
	.WORD	:DIR:
	.WORD	:X4:
	.WORD	:Y4:
	.WORD	:STUFFED:
	.ENDM

CMNUM		EQU	0
CMLOC		EQU	CMNUM+16
CMXLOC		EQU	CMLOC
CMYLOC		EQU	CMLOC+16
CMSIZE		EQU	CMLOC+32
CMXSIZE		EQU	CMSIZE
CMYSIZE		EQU	CMSIZE+16
CMOFFSET	EQU	CMSIZE+32
CMSTRING	EQU	CMOFFSET+32
CMDIR		EQU	CMSTRING+32
CMPINLOC	EQU	CMDIR+16
CMSTUFFED	EQU	CMPINLOC+32
CMEND		EQU	CMSTUFFED+16
	

**************************************************************************
*								         *
* RAM_CHIP: MACRO DEFINES A RAM CHIP RECORD.				 *
* 									 *
*       CHIP_NO    -- CHIP NUMBER					 *
*       WIDTH      -- CHIP CELL SIZE IN BITS (MUST BE > 0)		 *
*       INTERLEAVE -- DISTANCE BETWEEN ADJACENT CELLS ON CHIP (IN BITS)	 *
*       START_ADDR -- ADDRESS OF FIRST CELL ON CHIP			 *
*       END_ADDR   -- ADDRESS OF LAST CELL ON CHIP			 *
*								         *
**************************************************************************

RAM_CHIP .MACRO TAB_LINK,CHIP_NO, WIDTH, INTERLEAVE, START_ADDR, END_ADDR           

         .WORD  :WIDTH:
         .WORD  :INTERLEAVE:
         .WORD  :CHIP_NO:
         .LONG  :START_ADDR:
         .LONG  :END_ADDR:
	.LONG	:TAB_LINK:
         .ENDM

RAM_WDTH EQU 	000H                ; OFFSETS INTO RAM CHIP RECORD
RAM_ITLV EQU	010H
RAM_NMBR EQU 	020H
RAM_SADR EQU 	030H
RAM_EADR EQU 	050H
RAM_LINK	EQU	070H
RAM_SIZE EQU 	090H

ROM_CKSM	EQU	000H
ROM_WDTH	EQU	010H                ; OFFSETS INTO ROM CHIP RECORD
ROM_ITLV 	EQU	020H
ROM_NMBR 	EQU	030H
ROM_SADR 	EQU	040H
ROM_EADR 	EQU	060H
ROM_LINK	EQU	080H
ROM_SIZE 	EQU	0A0H

;****************************************************************************
;* ROM_CHIP: MACRO DEFINES A ROM CHIP RECORD.                               *
;*                                                                          *
;*       CHIP_NO    -- CHIP NUMBER                                          *
;*       WIDTH      -- CHIP CELL SIZE IN BITS (MUST BE > 0)                 *
;*       INTERLEAVE -- DISTANCE BETWEEN ADJACENT CELLS ON CHIP (IN BITS)    *
;*       START_ADDR -- ADDRESS OF FIRST CELL ON CHIP                        *
;*       END_ADDR   -- ADDRESS OF LAST CELL ON CHIP                         *
;*       CHECK_SUM  -- DATAIO CHECK SUM FOR CHIP                            *
;****************************************************************************

ROM_CHIP .MACRO TAB_LINK,CHIP_NO, WIDTH, INTERLEAVE, START_ADDR, END_ADDR, CHECK_SUM

	.WORD	:CHECK_SUM:
        .WORD  :WIDTH:
        .WORD  :INTERLEAVE:
        .WORD  :CHIP_NO:
        .LONG  :START_ADDR:
        .LONG  :END_ADDR:
	.LONG	:TAB_LINK:

         .ENDM


RANDOM_SEED EQU 5A5A5A5Ah              ; RAM TESTS: PSEUDO-RANDOM SEQUENCE
ZERO_EXTEND EQU 1Fh                    ; PARAMETERS
SIGN_EXTEND EQU 20h
PAL_SELECT  EQU 0FFDCH                 ; ENABLE VIDEO PALETTE MAP ACCESS

	.TEXT
        .EVEN

**************************************************************************
*								         *
* 	POWERCMOS							 *
* 									 *
* 	CHECK THE CMOS AND DO A LOT OF OTHER STUFF -- SHOW THE		 *
* 	POWER UP MESSAGES						 *
* 									 *
* 	ENTRY								 *
* 		NOTHING							 *
* 									 *
* 	EXIT								 *
* 		NOTHING							 *
*								         *
**************************************************************************

POWERCMOS:	
	DINT
	MOVI	SYSCINIT,A1
	MOVE	A1,@SYSCOPY,W
	MOVE	A1,@SYSCTRL,W

	CALLA	WDOGDIS			; GET RID OF WATCH DOG

*INITIALIZE IO REGISTERS
	MOVI	HESYNC,B2,L
	MOVI	INITDATA,B0,L
	MOVI	IDATALEN,B10
PC_INITIOS
	MOVE	*B0+,*B2+
	DSJS	B10,PC_INITIOS

	CLR	A13			; USED TO DECIDE WHETHER PAUSE OR NOT
	FCALL	INITCOLR,B5		; FIX UP THE COLORS
	FCALL	DSCRCLR,B6		; MAKE SURE OF SCREEN
	MOVI	ROM_NAME,A0
	FCALL	STRINGCENTER,B6		; GET WIDTH OF STRING
	ADDI	[30,0],A1
	CLR	A2
	MOVI	COLOR_YELLOW,A3
	FCALL	STRING,B6

	CALLA	CMOS_VAL		; CHECKSUM AUDITS/ADJUSTMENTS
	JREQ	CMOSOK

	CALLA	FAC_SET			; BUMMER, BABY!  RESET TO FACTORY
	CALLA	BLASTMESS
	CALLA	CLR_AUD

	MOVK	1,A13			; FLAG ERROR
	CALLA	CMOS_VAL		; TRY AGAIN
	JREQ	CMOSB1
	MOVI	CMOS_BAD,A0
	FCALL	STRINGCENTER,B6
	ADDI	[50,0],A1
	CLR	A2
	MOVI	COLOR_RED,A3
	FCALL	STRING,B6
	MOVI	CMOS_UNFAC,A0
	FCALL	STRINGCENTER,B6
	ADDI	[65,0],A1
	CLR	A2
	MOVI	COLOR_RED,A3
	FCALL	STRING,B6
	JRUC	CMOS1
CMOSB1
	MOVI	CMOS_FACRES,A0
	FCALL	STRINGCENTER,B6
	ADDI	[50,0],A1
	CLR	A2
	MOVI	COLOR_RED,A3
	FCALL	STRING,B6
	JRUC	CMOS1
CMOSOK
	MOVI	CMOS_OK,A0
	FCALL	STRINGCENTER,B6
	ADDI	[50,0],A1
	CLR	A2
	MOVI	COLOR_GREEN,A3
	FCALL	STRING,B6

CMOS1
	MOVI	AUDONTIME,A0
	CLR	A1
	CALLA	STORE_AUDIT
CTAGO
CTA1
;
;	BY HERE, THE CMOS SHOULD BE FIXED UP AS GOOD AS POSSIBLE -- NOTE
;	THAT IF CMOS IS BUSTED, THE GUY IS FUCKED FOR COINAGE
;
;	WITH SOME THOUGHT THAT MIGHT BE FIXABLE
;
CMOS2
	CALLR	READ_DIP
	ANDI	DPUSECMOS,A0
	JRNZ	CMOS3		 	; BR = USING CMOS COINAGE

*LOAD COINAGE FROM DIPSWITCH
	MOVI	CMOS_DIP,A0
	FCALL	STRINGCENTER,B6
	ADDI	[110,0],A1
	CLR	A2
	MOVI	COLOR_WHITE,A3
	FCALL	STRING,B6
	
	CALLR	READ_DIP
	MOVE	A0,A2
	ANDI	DPCOUNTRY,A0
	SRL	3,A0
	ADDI	DIPCOINTAB,A0
	MOVE	*A0,A1,L		; POINTER TO RIGHT COIN TABLE
	ANDI	DPCOINAGE,A2
	CMPI	DPCOINAGE,A2		; CHECK FOR FREEPLAY
	JRZ	CMOS21
	SLL	2,A2
	ADD	A2,A1
	MOVE	*A1,A1,W		; WHICH COIN TABLE TO USE
	MOVI	ADJPRICE,A0		; MASTER PRICING
	CALLA	PUT_ADJ			; STUFF IT IN CMOS
	MOVI	ADJFREPL,A0
	CLR	A1			; MAKE SURE NO FREEPLAY
	CALLA	PUT_ADJ
CMOS20
	MOVI	ADJ1ST6,A0		;MAKE THEM UNTOUCHED PLEASE
	MOVK	1,A1
	CALLA	PUT_ADJ

	CALLA	GET_CSPT
	CALLA	SET_COIN_ADJ		; SET THE ADJUSTMENTS UP IN CMOS

	CALLR	READ_DIP		;SET UP CREDITS TO START/CONTINUE
	MOVE	A0,A2
	ANDI	DPCREDITS,A2
	SRL	1,A2
	ADDI	DIPCREDTAB,A2
	MOVB	*A2,A1
	ADDK	8,A2
	MOVI	ADJCSTRT,A0
	CALLA	PUT_ADJ
	MOVB	*A2,A1
	MOVI	ADJCCONT,A0
	CALLA	PUT_ADJ
	CALLA	CMOSUNLOCK
	CALLA   F_ADC_S			;CHECKSUM THE ADJUSTMENTS
	CALLA	CMOSLOCK

	JRUC	CMOS4

CMOS21
	MOVI	ADJFREPL,A0
	MOVK	1,A1			; FREEPLAY, DUDE!
	CALLA	PUT_ADJ
	JRUC	CMOS20
CMOS3
;
;	USING CMOS HERE
;
	MOVI	CMOS_CMOS,A0
	FCALL	STRINGCENTER,B6
	ADDI	[110,0],A1
	CLR	A2
	MOVI	COLOR_WHITE,A3
	FCALL	STRING,B6
CMOS4	
;	CALLR	PLOTCOINAGE		; PLOT SOME COINAGE 
	MOVE	@SWITCH0,A0,L		; CHECK SLAM SWITCH
	NOT	A0
	ANDI	00080000H,A0
	JRZ	CMOSRET
	MOVI	CMOS_TILT,A0
	FCALL	STRINGCENTER,B6
	ADDI	[205,0],A1
	CLR	A2
	MOVI	COLOR_RED,A3
	FCALL	STRING,B6
	MOVK	1,A13			; FLAG ERROR
CMOSRET
	MOVE	A13,A13
	JRZ	CTMP0

	MOVI	0FD5EH,A0
	MOVE	A0,@SOUND,W
	MOVI	0FF5EH,A0
	MOVE	A0,@SOUND,W		; LET HIM HEAR IT

	MOVI	CMOS_WAIT,A0
	FCALL	STRINGCENTER,B6
	ADDI	[230,0],A1
	CLR	A2
	MOVI	COLOR_RED,A3
	FCALL	STRING,B6
	CALLA	WDOGDIS			; DISABLE WOOF WOOF
	CALLR	PRESSANYBUTTON		;A0,A1 SCRATCH,SCRATCH
	JRUC	CTMP2
CTMP0
	PAUSE	200000H,B6
CTMP2
	JAUC	PCMOSRET


**
** PRESSANYBUTTON
**
** SCRATCHES: A0,A1
**
** JFL 30 NOV 92
**
PRESSANYBUTTON
	MOVL	@SWITCH0,A0
	ANDI	M_SW0BUTTONS,A0
	MOVL	A0,@SWSET1

	MOVL	@SWITCH2,A0
	ANDI	M_SW2BUTTONS,A0
	MOVL	A0,@SWSET2
	
PABLOOP	
	MOVL	@SWITCH0,A0
	ANDI	M_SW0BUTTONS,A0
	MOVL	@SWSET1,A1
	CMP	A0,A1
	JRNE	PABX

	MOVL	@SWITCH2,A0
	ANDI	M_SW2BUTTONS,A0
	MOVL	@SWSET2,A1
	CMP	A0,A1
	JREQ	PABLOOP
PABX
	RETS
	
**
** PRESSANYBUTTONSETUP
**
** SCRATCHES: A0,A1
**
** JFL 30 NOV 92
**
PRESSANYBUTTONSETUP
	MOVL	@SWITCH0,A0
	ANDI	M_SW0BUTTONS,A0
	MOVL	A0,@SWSET1

	MOVL	@SWITCH2,A0
	ANDI	M_SW2BUTTONS,A0
	MOVL	A0,@SWSET2
	
	RETS

**
** PRESSANYBUTTONCHECK
**
** SCRATCHES: A0,A1
**
** JFL 30 NOV 92
**
PRESSANYBUTTONCHECK

	MOVL	@SWITCH0,A0
	ANDI	M_SW0BUTTONS,A0
	MOVL	@SWSET1,A1
	CMP	A0,A1
	JRNE	PABCX

	MOVL	@SWITCH2,A0
	ANDI	M_SW2BUTTONS,A0
	MOVL	@SWSET2,A1
	CMP	A0,A1
PABCX
	RETS


	.IF GERMAN
CMOS_FACRES
	.STRING	"CMOS FEHLER -- FABRIKDATENEINSTELLUNG",0
	.EVEN
CMOS_WAIT
	.STRING	"SPIELFORTSETZUNG MIT BELIEBIGEM KNOPF",0
	.EVEN
CMOS_BAD
	.STRING	"CMOS RAM U49 FEHLER",0
	.EVEN


	.ELSE
CMOS_FACRES
	.STRING	"CMOS INVALID -- FACTORY SETTINGS RESTORED",0
	.EVEN
CMOS_WAIT
	.STRING	"ERRORS DETECTED -- ANY BUTTON TO CONTINUE",0
	.EVEN
CMOS_BAD
	.STRING	"CMOS CHIP U49 BAD",0
	.EVEN


	.ENDIF

CMOS_TILT
	.STRING	"WARNING -- SLAM SWITCH CLOSED",0
	.EVEN
	     
CMOS_DIP
	.STRING	"USING DIPSWITCH COINAGE",0
	.EVEN

CMOS_CMOS
	.STRING	"USING CMOS COINAGE",0
	.EVEN

CMOS_UNFAC
	.STRING	"UNABLE TO RESTORE FACTORY SETTINGS",0
	.EVEN

CMOS_OK
	.STRING	"CMOS OK",0
	.EVEN

CMOS_ALL
	.STRING	"ALL TIME HIGH SCORES RESET",0
	.EVEN

CMOS_ABAD
	.STRING	"UNABLE TO RESET ALLTIME HIGHSCORE TABLE",0
	.EVEN
CMOS_TBAD
	.STRING	"UNABLE TO RESET DAILY HIGHSCORE TABLE",0
	.EVEN


**************************************************************************
*								         *
* 									 *
* 	CPU TESTING ROUTINES						 *
* 									 *
*								         *
**************************************************************************

**************************************************************************
*								         *
* 	BURNIN								 *
* 									 *
* 	FACTORY BURNIN TEST -- EXITS BY RESETING THE GAME		 *
* 									 *
* 	ENTRY								 *
* 		NOTHING							 *
* 									 *
* 	EXIT								 *
* 		NOTHING 						 *
* 									 *
* 	CALL								 *
* 		JAUC							 *
*								         *
**************************************************************************

BURNIN:
	DINT
	MOVI	AUDAUTO,A0		;ZERO OUT BURNIN AUDIT
	CALLA	KILL_AUD
BURNLOOP
	CALLA	WDOGDIS			;MAKE SURE THE DOG IS ASLEEP
	FCALL	CPUTEST,SP
BURNSP:
	SETF	16,1,0
	SETF	32,1,1
	MOVI	STCKST,SP,L		;RESTORE THE STACK PTR
	MOVI	SYSCINIT,A0		;RE-INITIALIZE SYSTEM CONTROL
	MOVE	A0,@SYSCTRL,W
	MOVE	A0,@SYSCOPY,W		;KEEP A COPY IN RAM
	MOVI	AUDAUTO,A0
	CALLA	AUD1			;ANOTHER ONE WORKED
	JRUC	BURNLOOP

**************************************************************************
*								         *
* 	DIAGCPUTEST							 *
* 									 *
* 	DIAGNOSTIC CALL FOR THE CPU TEST				 *
* 									 *
* 	ENTRY								 *
* 		NOTHING							 *
* 									 *
* 	EXIT								 *
* 		JUMPS TO *EXEC_LP* AFTER SETTING EVERYTHING UP		 *
* 									 *
* 	CALL								 *
* 		JAUC							 *
*								         *
**************************************************************************

DIAGCPUTEST:
	CALLA	WDOGDIS
	DINT
	FCALL	CPUTEST,SP
DIAGSP:
	SETF	16,1,0			; WORD NO SIGN EXTEND
	SETF	32,1,1			; LONG WORD
	MOVI	STCKST,SP,L
	CALLA	CLSCRACH
	MOVI	SYSCINIT,A0
	MOVE	A0,@SYSCOPY,W
	MOVE	A0,@SYSCTRL,W		; GET EVERYBODY HAPPY

	CALLA	MAIN_INIT

	CALLA	COLOR_START		;FIRE UP THE COLORS

	EINT				; ENABLE INTERRUPTS AND WE'RE OFF
	DISPON				; ENABLE THE DISPLAY SYSTEM
	CREATE	DIAG_PID,CPU_RET
	MOVI	INDIAG,A0
	MOVE	A0,@GAME_STATE,W
	JAUC	EXEC_LP

**************************************************************************
*								         *
* 	POWERCPUTEST							 *
* 									 *
* 	CHECK OUT THE CPU ON POWER ON					 *
* 									 *
* 	ENTRY								 *
* 		NOTHING							 *
* 									 *
* 	EXIT								 *
* 		JUMPS TO *PONTEST*					 *
* 									 *
* 	CALL								 *
* 		JAUC							 *
*								         *
**************************************************************************

POWERCPUTEST:
	DINT
	.IF	YUNIT
	MOVE	@DIPSWITCH,A0,L		; CHECK FOR POWER ON BYPASS
	NOT	A0
	ANDI	2000H,A0
	JANZ	PONTEST
	.ELSE
	JAUC	PONTEST
	.ENDIF
	FCALL	CPUTEST,SP
	JAUC	PONTEST


**************************************************************************
*								         *
* 	CPUTEST								 *
* 									 *
* 	THE ACTUAL CPU TEST STUFF					 *
* 									 *
* 	ENTRY								 *
* 		SP	RETURN ADDRESS					 *
* 									 *
* 	EXIT								 *
* 		WHO KNOWS						 *
* 									 *
* 	CALL								 *
* 		FCALL	CPUTEST,SP					 *
*								         *
**************************************************************************

CPUTEST:	
	FCALL	INITCOLR,B5		;HEY! IT LOOKS BETTER THIS WAY

	CLR	B0
	MOVI	0FFFCH,A13
	MOVE	A13,@SYSCTRL,W		;MAKE SURE WE'RE WRITING TO BIT MAP
	MOVI	VRAMCHIPS,A14		;VERIFY BIT MAP
	FCALL	RAMCHECK,B5

;	ENABLE VIDEO PALETTE MAP ACCESS

	MOVI	PAL_SELECT,A13
	MOVE	A13,@SYSCTRL,W
	MOVI	PALCHIPS,A14		;VERIFY OBJECT PALETTE RAM
	FCALL	RAMCHECK,B5
	MOVE	B0,A12
	
;	DISABLE VIDEO PALETTE MAP ACCESS

	MOVI	0FFFCH,A13
	MOVE	A13,@SYSCTRL,W
	FCALL	INITCOLR,B5		;RELOAD THE COLORS
	FCALL	DSCRCLR,B6

	FCALL	CPUDRAW,B5		;SHOW THE CPU
	MOVI	CPU,A10			;WE GOT THIS FAR, CPU MUST BE OK
	MOVI	1,A11
	FCALL	CHIPOUT,B5

	MOVI	VRAMTAB,A9
	FCALL	CHIPTABLE,B5		;PLOT OUT THE CHIP TABLE

	MOVE	A12,A12
	JRZ	PDMACK
PBADRAM
	MOVI	RAMBADMESS,A0
	MOVI	[128,130],A1
	CLR	A2
	MOVI	COLOR_RED,A3
	FCALL	STRING,B6
	JRUC	PCPUBAD

PDMACK
	MOVI	DMACMESS,A0
	MOVI	[128,130],A1
	CLR	A2
	MOVI	COLOR_YELLOW,A3
	FCALL	STRING,B6

	FCALL	DMACHECK,B5		;CHECK THE DMA
	MOVI	DMA,A10
	MOVE	A0,A11
	MOVE	A0,A12
	INC	A11			;GREEN/RED
	FCALL	CHIPOUT,B5

	MOVI	[128,130],A0
	MOVI	[10,260],A1
	MOVI	COLOR_BLACK,A2
	FCALL	RECTANGLE,B6

	MOVE	A12,A12
	JRZ	PSRAMCK
	MOVI	DMABADMESS,A0
	MOVI	[128,130],A1
	CLR	A2
	MOVI	COLOR_RED,A3
	FCALL	STRING,B6
	JRUC	PCPUBAD

PSRAMCK
	MOVI	SRAMCHECK,A0
	MOVI	[128,130],A1
	CLR	A2
	MOVI	COLOR_YELLOW,A3
	FCALL	STRING,B6

	CLR	B0
	MOVI	SRAMCHIPS,A14			;VERIFY SCRATCH RAMS
	FCALL	RAMCHECK,B5
	MOVE	B0,A12
	
	MOVI	[128,130],A0
	MOVI	[10,260],A1
	MOVI	COLOR_BLACK,A2
	FCALL	RECTANGLE,B6

	MOVE	A12,A12
	JRNZ	PBADRAM

PROMCK
	MOVI	ROMCMESS,A0
	MOVI	[128,130],A1
	CLR	A2
	MOVI	COLOR_YELLOW,A3
	FCALL	STRING,B6

	MOVI	CPUEXIT_MESS,A0
	MOVI	[143,130],A1
	CLR	A2
	MOVI	COLOR_YELLOW,A3
	FCALL	STRING,B6

	CLR	B0			;KEEP THE STATS HERE

	MOVI	PROMCHIPS,A14
	FCALL	ROMCHECK,B5
	JRNZ	PROMABORT

	MOVI	IROMCHIPS,A14
	FCALL	ROMCHECK,B5
PROMABORT
	MOVE	B0,A12
	MOVI	[128,130],A0
	MOVI	[25,260],A1
	MOVI	COLOR_BLACK,A2
	FCALL	RECTANGLE,B6

	MOVE	A12,A12
	JRZ	PCPUGOOD

PBADROM
	MOVI	[128,130],A0
	MOVI	[25,260],A1
	MOVI	COLOR_BLACK,A2
	FCALL	RECTANGLE,B6
	MOVI	ROMBADMESS,A0
	MOVI	[128,130],A1
	CLR	A2
	MOVI	COLOR_RED,A3
	FCALL	STRING,B6

PCPUBAD
	MOVI	CPUPAUSE,A0
	MOVI	[143,130],A1
	CLR	A2
	MOVI	COLOR_RED,A3
	FCALL	STRING,B6

PCPUWAIT

	MOVI	0FD5EH,A0
	MOVE	A0,@SOUND,W
	MOVI	0FF5EH,A0
	MOVE	A0,@SOUND,W		; LET HIM HEAR IT

	MOVE	A13,B5
	PAUSE	10000,B6

	CALLR	PRESSANYBUTTONSETUP	;A0,A1 SCRATCH

	MOVI	-1,B0			; ASSUME DON'T TIMEOUT
	CMPI	DIAGSP,SP
	JRZ	PCPUTMP1
	CMPI	BURNSP,SP
	JRZ	PCPUTMP1
	MOVI	200000H,B0
PCPUTMP1
	MOVE	B0,B0
	JRN	PCPUNOTIMEOUT
	DEC	B0
	JRZ	PCPURET			; TIMEOUT HERE
PCPUNOTIMEOUT
	CALLR	PRESSANYBUTTONCHECK	;A0,A1 SCRATCH OUT:Z IF SAME
	JRNZ	PCPURET
	JRUC	PCPUTMP1
PCPUGOOD
	CLR	A0
	JRUC	PCPUREALRET
PCPURET
	MOVK	1,A0
PCPUREALRET
	MOVE	A0,A0
	FRET	SP

	.IF GERMAN

DMACMESS
	.STRING	"U99 PRUEFEN",0
	.EVEN
DMABADMESS
	.STRING	"U99 DEFEKT",0
	.EVEN

ROMCMESS
	.STRING	"ROMS PRUEFEN",0
	.EVEN
ROMBADMESS
	.STRING	"ROM DEFEKT",0
	.EVEN

RAMBADMESS
	.STRING	"RAM DEFEKT",0
	.EVEN

CPUGOOD
	.STRING	"CPU-PLATINE OK",0
	.EVEN

CPUWAIT1
CPUPAUSE
	.STRING	"BELIEBIGEN KNOPF DRUECKEN",0
	.EVEN

CPUEXIT_MESS
	.STRING "HALTE START ZUM VERLASSEN.",0
	.EVEN

	.ELSE

DMACMESS
	.STRING	"CHECKING CUSTOM",0
	.EVEN
DMABADMESS
	.STRING	"CUSTOM CHIP U99 BAD",0
	.EVEN

ROMCMESS
	.STRING	"CHECKING ROMS",0
	.EVEN
ROMBADMESS
	.STRING	"ROM CHIPS BAD",0
	.EVEN

RAMBADMESS
	.STRING	"RAM CHIPS BAD",0
	.EVEN

CPUGOOD
	.STRING	"CPU BOARD OK",0
	.EVEN

CPUWAIT1
CPUPAUSE
	.STRING	"PRESS ANY BUTTON",0
	.EVEN

CPUEXIT_MESS
	.STRING "HOLD START BUTTON TO EXIT.",0
	.EVEN

	.ENDIF

**************************************************************************
*								         *
* 	CPUDRAW								 *
* 									 *
* 	PLOT THE CPU BOARD AND DRAW ALL THE CHIPS			 *
* 									 *
* 	ENTRY								 *
* 		B5	RETURN ADDRESS					 *
* 									 *
* 	EXIT								 *
* 		NOTHING							 *
*								         *
**************************************************************************

CPUDRAW:
	MOVI	CPU_VECS,A9		; POINT AT VECTOR TABLE
CPUDLP1
	MOVE	*A9+,A2,W		; GET COLOR
	JRZ	CPUD1
	MOVE	*A9+,A0,L		; START POINT
	MOVE	*A9+,A1,L		; END POINT
	FCALL	HVLINE,B6
	JRUC	CPUDLP1
CPUD1
	MOVE	B5,A13
	FCALL	CHIPPLOT,B5		; PLOT ALL THE CHIPS
	MOVI	BOARDSTRING,A0
	MOVI	[25,11],A1
	CLR	A2
	MOVI	COLOR_WHITE,A3
	FCALL	STRING,B6
	MOVI	BOARDSTRING2,A0
	MOVI	[37,13],A1
	FCALL	STRING,B6
	MOVE	A13,B5
	FRET	B5

BOARDSTRING	
	.STRING	"A-14818-40009",0
	.EVEN

BOARDSTRING2
	.STRING	"TERMINATOR 2",0
	.EVEN

**************************************************************************
*								         *
* 	CHIPTABLE							 *
* 									 *
* 	UPDATE A LIST OF CHIPS, BASED ON THEIR VALUES IN A12		 *
* 									 *
* 	ENTRY								 *
* 		A9	POINTER TO TABLE				 *
* 		A12	LIST OF ON/OFF BITS				 *
* 		B5	RETURN ADDRESS					 *
* 									 *
* 	EXIT								 *
* 		NOTHING							 *
*								         *
**************************************************************************

CHIPTABLE:
	MOVE	B5,A14
CTABLOOP
	MOVE	*A9+,A10,L		; GET POINTER TO CHIP RECORD
	JRZ	CTABDONE
	MOVK	1,A11
	MOVE	*A10(CMNUM),A0,W	; GET THE BIT NUMBER
	BTST	A0,A12			; CHECK BIT NUMBER
	JRZ	CTABL2
	MOVK	2,A11
CTABL2
	FCALL	CHIPOUT,B5
	JRUC	CTABLOOP

CTABDONE
	MOVE	A14,B5
	FRET	B5
	
**************************************************************************
*								         *
* 	CHIPPLOT							 *
* 									 *
* 	PLOT OUT THE CHIP LIST						 *
* 									 *
* 	ENTRY								 *
* 		B5	RET VALUE					 *
* 									 *
* 	EXIT								 *
* 		NOTHING							 *
**************************************************************************

CHIPPLOT:
	MOVE	B5,A14
	MOVI	CPU_CHIPS,A10
CPPLOTLOOP
	CLR	A11
	MOVE	*A10,A0,L
	JRZ	CPPLOTDONE
	FCALL	CHIPOUT,B5
	ADDI	CMEND,A10
	JRUC	CPPLOTLOOP

CPPLOTDONE
	MOVE	A14,B5
	FRET	B5
	
**************************************************************************
*								         *
* 	CHIPOUT								 *
* 									 *
* 	ACTUALLY PLOT THE CHIP						 *
* 									 *
* 	ENTRY								 *
* 		A10	POINTS TO CHIP TO PLOT				 *
* 		A11	COLOR OF CHIP					 *
* 				00 = OUTLINE				 *
* 				01 = GREEN				 *
* 				02 = RED				 *
* 				03 = GREY				 *
* 									 *
* 	EXIT								 *
* 		A10	IS INTACT					 *
*								         *
**************************************************************************
		
CHIPOUT:
	MOVE	*A10(CMLOC),A5,L	; CHIP OUTLINE
	MOVE	A5,A6
	MOVE	A5,A7
	MOVE	A5,A8
	MOVE	*A10(CMXSIZE),A0,W
	ADD	A0,A6
	ADD	A0,A7
	MOVE	*A10(CMYSIZE),A0,W
	SLL	16,A0
	ADD	A0,A7
	ADD	A0,A8
	MOVE	A5,A0
	MOVE	A6,A1
	MOVI	COLOR_WHITE,A2
	FCALL	HVLINE,B6
	MOVE	A6,A0
	MOVE	A7,A1
	MOVI	COLOR_WHITE,A2
	FCALL	HVLINE,B6
	MOVE	A8,A0
	MOVE	A7,A1
	MOVI	COLOR_WHITE,A2
	FCALL	HVLINE,B6
	MOVE	A5,A0
	MOVE	A8,A1
	MOVI	COLOR_WHITE,A2
	FCALL	HVLINE,B6
;
	MOVE	*A10(CMSTUFFED),A0,W	; CHECK FOR STUFFED
	JRNZ	CONOSTUF
	MOVK	3,A11			; WANT IT GREY, DUDE

CONOSTUF
	MOVE	A11,A11			; CHECK FOR FILLING THE CHIP
	JRZ	CONOFILL
	MOVE	*A10(CMLOC),A0,L
	ADDI	00010001H,A0
	MOVE	*A10(CMSIZE),A1,L
	SUBI	00010001H,A1		; GET INTERNAL AREA
	MOVE	A11,A2
	SLL	4,A2
	ADDI	CHIPCOLORS,A2
	MOVE	*A2,A2,W		; GET ME A COLOR
	FCALL	RECTANGLE,B6
CONOFILL
	MOVE	*A10(CMPINLOC),A1,L	; PIN LOCATION
	MOVE	A5,A0
	ADD	A1,A0
	MOVI	COLOR_WHITE,A1
	FCALL	POINT,B6

	MOVE	*A10(CMSTRING),A0,L	; CHIP TEXT
	MOVE	A5,A1
	MOVE	*A10(CMOFFSET),A2,L
	ADD	A2,A1
	MOVE	*A10(CMDIR),A2,W
	MOVI	COLOR_BLACK,A3
	MOVE	A11,A11			; CHECK FOR COLOR
	JRNZ	COBLACK
	MOVI	COLOR_WHITE,A3
COBLACK
	FCALL	STRING,B6
	FRET	B5

CHIPCOLORS:
	.WORD	COLOR_BLACK
	.WORD	COLOR_GREEN
	.WORD	COLOR_RED
	.WORD	COLOR_GREY

**************************************************************************
*								         *
* 	DMACHECK							 *
* 									 *
* 	CHECK THE DMA OUT						 *
* 									 *
* 	ENTRY								 *
* 		B5	RETURN ADDRESS					 *
* 									 *
* 	EXIT								 *
* 		A0	DMA STATUS					 *
* 				0 = GOOD				 *
* 				1 = BAD					 *
*								         *
**************************************************************************
DMACHECK
	MOVI	[1,448],A14		;BLOW OUT TRADEMARK
	MOVE	A14,@DMAHSIZE,L

	CLR	A14
	MOVE	A14,@DMAOFFST,W		;OFFSET
	MOVE	A14,@DMACONST,W		;CONSTANT
	MOVE	A14,@DMAHORIZ,L		;CLEAR DESTINATION ADDRESS

	MOVI	2000000H,A14		;DMA LOGO LOCATION
	MOVE	A14,@DMASAGL,L

	MOVI	257,A14
	MOVE	A14,@DMAVERT,W		;OFFSCREEN PLOT

	MOVI	0505H,A14
	MOVE	A14,@DMACMAP,W

	MOVI	8003H,A14		;USE IMAGE ROM - WRITE ALWAYS
	MOVE	A14,@DMACTRL,W		;KICK OFF THE DMA

	MOVI	7FFFH,A14		;LOAD TIMEOUT COUNTER
DMACWAIT
	MOVE	@DMACTRL,A0,W		;DMA BUSY?
	JRNN	DMADONE			;BR = NO, TIME TO CHECK
	DSJS	A14,DMACWAIT
	JRUC	DMACBAD			;DMA TIMED OUT

DMADONE
	CLR	A0			;GET BACK TO A REAL PALETTE
	MOVE	A0,@DMACMAP,W
	MOVI	0101000H,A0		;LINEAR SCREEN LOCATION OF DATA
	MOVI	2000000H,A1		;DMA LOGO LOCATION
	MOVI	448,A2			;NUMBER OF BYTES TO COMPARE
DMACLOOP	     
	MOVB	*A0,A3			;DESTINATION BYTE
	SLL	28,A3
	SRL	28,A3
	MOVB	*A1,A4			;SOURCE BYTE
	SLL	28,A4
	SRL	28,A4
	ADDK	8,A0
	ADDK	8,A1
	CMP	A3,A4
	JRNZ	DMACBAD			;BR = DATA ERROR
	DSJS	A2,DMACLOOP
*
*CHECK DATA IN OBJECT PALETTE
*
	MOVI	PAL_SELECT,A13
	MOVE	A13,@SYSCTRL,W		;ENABLE PALETTE

	MOVI	0101000H,A0		;LOCATION
	MOVI	224,A2			;NUMBER OF WORDS TO COMPARE
DMACLOOP2
	MOVE	*A0+,A3,W
	ANDI	0F0FH,A3
	CMPI	0505H,A3
	JRNZ	DMACBAD
	DSJS	A2,DMACLOOP2
	CLR	A0
	JRUC	DMACRET
DMACBAD
	CLR	A0			;GET BACK TO A REAL PALETTE
	MOVE	A0,@DMACTRL,W
	MOVE	A0,@DMACMAP,W
	MOVK	1,A0
DMACRET
	MOVI	0FFFCH,A13
	MOVE	A13,@SYSCTRL,W
	MOVE	A0,A0
	FRET	B5

**************************************************************************
*								         *
* 	POWERTST							 *
* 									 *
* 	POWERUP SELF TEST ROUTINES					 *
* 									 *
* 	ENTRY								 *
* 		NOTHING							 *
* 									 *
* 	EXIT								 *
* 		NOTHING							 *
*								         *
**************************************************************************

POWERTST
        DINT
        SETF 16, 0, 0
        SETF 32, 0, 1
	MOVI	STCKST,SP,L

;	HALT DMA AND ENABLE CACHE

        CLR  A14
        MOVE A14, @DMACTRL
        MOVE A14, @CONTROL

;	DISABLE VIDEO PALETTE RAMS, AUTOERASE AND ERROR LED

****	MOVI 0FFFCH,A13
****	MOVE A13,@SYSCTRL,W
	MOVI	SYSCINIT,A13
	MOVE	A13,@SYSCTRL,W

;	DISABLE WATCH DOG

        SETF 16,1,0			;SIGN EXTENSION ON FOR THIS
	MOVI	WDISTAB,A1	
	MOVK	1,A3
	MOVI	0FFFCH,A2
	MOVE	*A1+,A0,W		
WDOGSL
	OR	A2,A0	
        MOVE	A0,@SYSCTRL,W
	XOR	A3,A0
        MOVE	A0,@SYSCTRL,W
	MOVE	*A1+,A0,W
	JRNN	WDOGSL

        SETF 16,0,0			;BACK OFF FOR BEGLEMAN SHIT

;	INITIALIZE IO REGISTERS

	MOVI	HESYNC,B2,L
	MOVI	INITDATA,B0,L
	MOVI	IDATALEN,B10
INITIOS:
	MOVE	*B0+,*B2+
	DSJS	B10,INITIOS

	JRUC	POWERCPUTEST
PONTEST
	MOVI	SYSCINIT,A0
	MOVE	A0,@SYSCOPY,W
        MOVE	A0,@SYSCTRL,W
	JAUC	POWERRET

**************************************************************************
*								         *
* 	RAMCHECK							 *
* 									 *
* 	CHECK A BANK OF RAM, GIVEN A STARTING TABLE ADDRESS		 *
* 									 *
* 	ENTRY								 *
* 		A14	POINTER TO RAM TABLE				 *
* 		B5	RETURN ADDRESS					 *
* 									 *
* 	EXIT								 *
* 		B0	LIST OF ERRORS					 *
*								         *
**************************************************************************

RAMCHECK:
        SETF 16, 0, 0
        SETF 32, 0, 1

;	SNAG NEXT CHIP RECORD

RAMLOOP:
	CLR	B2
	MOVE	*A14(RAM_SADR),A12,L	; STARTING ADDRESS
	MOVE	*A14(RAM_EADR),A13,L	; ENDING ADDRESS
	MOVE	*A14(RAM_ITLV),A11,W	; INTERLEAVE
	MOVE	*A14(RAM_WDTH),A10,W	; WIDTH

;	CELL COUNT

        SUB  A12, A13                   ; (END-START)/INTERLEAVE+1
        DIVU A11, A13
        INC  A13

;	SET FIELD SIZES

        MOVE A11, A9                    ; FS1 = INTERLEAVE
        ANDI ZERO_EXTEND, A9
        EXGF A9, 1

        MOVE A10, A9                    ; FS0 = WIDTH
        ANDI ZERO_EXTEND, A9
        EXGF A9, 0

;	FILL IN ASCENDING ORDER

        MOVE A13, A9                    ; XEROX COUNT
        MOVE A12, A8                    ; XEROX START

        MOVI RANDOM_SEED, A7, L
        CLR  A5

RAC1:   SLA  1, A7                      ; GENERATE A PSEUDO
        JRV  RAC2                       ; RANDOM NUMBER
        ORI  2, A7
RAC2:   MOVE A7, A6
        ADDC A5, A6

        MOVE A6, *A8+, 1                ; WRITE

        DSJS A9, RAC1

;	READBACK IN ASCENDING ORDER

        MOVE A13, A9                    ; XEROX COUNT
        MOVE A12, A8                    ; XEROX START

        MOVI RANDOM_SEED, A7, L

RAC3:   SLA  1, A7                      ; GENERATE A PSEUDO
        JRV  RAC4                       ; RANDOM NUMBER
        ORI  2, A7
RAC4:   MOVE A7, A6
        ADDC A5, A6

        MOVE *A8+, A4, 1                ; READ

        ZEXT  A6
        ZEXT  A4

        CMP A6, A4
        JRZ RAC5
;
;	GOT AN ERROR HERE
;
	SETF 16, 0, 0                   ; RESET FIELDS
        SETF 32, 0, 1
	MOVE	*A14(RAM_NMBR),A4,W	; GET BIT NUMBER TO SET
	MOVE	A4,B1
	MOVK	1,B2
	SLL	B1,B2
	OR	B2,B0			; SET THAT BIT
        JRUC RAC6                       ; BREAK !!

RAC5:   DSJS A9, RAC3

RAC6:   SETF 16, 0, 0                   ; RESET FIELDS
        SETF 32, 0, 1
;
;	B1 SHOULD BE ZERO IF THE CHIP IS COOL HERE
;
	MOVE	*A14(RAM_LINK),A10,L
	JRZ	RAMNOPLOT
	MOVK	1,A11
	MOVE	B2,B2
	JRZ	RAMPLOT
	MOVK	2,A11
RAMPLOT
	MOVE	B5,A9			; I HOPE THIS ONE IS SAFE!
	MOVE	B0,A13
	FCALL	CHIPOUT,B5
	MOVE	A13,B0
	MOVE	A9,B5

RAMNOPLOT
	ADDI	RAM_SIZE,A14		; ADVANCE TO NEXT GUY
	MOVE	*A14,A7,W
	JRNZ	RAMLOOP			; HERE WE GO AGAIN
	FRET	B5

**************************************************************************
*								         *
* 		   START OF DIAG CACHE SEGMENT				 *
*								         *
**************************************************************************

	.SECT	"SECTDIAG"		;LET'S CACHE THIS BITCH
**************************************************************************
*								         *
* ROMCHECK - ROUTINE TO CHECKSUM THE PROGRAM AND IMAGE ROMS.		 *
* RETURNS								 *
* 	B0  = BITS SET FOR BAD ROMS.					 *
* 	 Z = TEST FINISHED.						 *
* 	NZ = TEST ABORTED BY USER.					 *
*								         *
**************************************************************************
ROMCHECK:
ROMLOOP	
	CLR	B2
	MOVE	*A14(ROM_CKSM),A13,L	; CHECK TO SEE IF ROM SOCKET THERE
	JRZ	ROMEMPTY
	CLR	A8			; CHECKSUM

	MOVE	*A14(ROM_SADR),A12,L	; STARTING ADDRESS
	MOVE	*A14(ROM_EADR),A13,L	; ENDING ADDRESS
	MOVE	*A14(ROM_ITLV),A11,W	; INTERLEAVE
	MOVE	*A14(ROM_WDTH),A10,W	; WIDTH
	JRZ	PROG_ROM
;
;	SUM UP A GIVEN IMAGE ROM -- THIS IS ONLY FOR YUNITS W/DMA 1
;
	SUB	A12,A13			; ( EADDR - SADDR ) / 32 + 1
	MOVK	32,A0
	DIVU	A0,A13
	INC	A13

*DETERMINE WHICH ROM WE ARE CHECKSUMMING, SHIFTING IS DIFFERENT FOR EACH
	SLL	1,A11
	NEG	A11

RC_ROM0
	MOVE	*A12+,A7,L
	SRL	A11,A7

	CLR	A0			; WORK AREA
	CLR	A1			; CONSTRUCTED BYTE

	MOVE	A7,A0
	SLL	30,A0
	SRL	30,A0

	MOVE	A0,A1			; FIRST TWO BITS
	MOVE	A7,A0
	SRL	8,A0
	SLL	30,A0
	SRL	28,A0

	OR	A0,A1			; BITS 3-2
	MOVE	A7,A0
	SRL	16,A0
	SLL	30,A0
	SRL	26,A0

	OR	A0,A1			; BITS 5-4
	SRL	24,A7
	SLL	30,A7
	SRL	24,A7

	OR	A7,A1			; BITS 7-6

	ADD	A1,A8
	ZEXT	A8
	DSJ	A13,RC_ROM0
	JRUC	ROMCKCK

PROG_ROM
	SUB	A12,A13			; ( EADDR - SADDR ) / 32 + 1
	SRL	4,A13
	INC	A13
RCPLP
	MOVB	*A12,A7
	SLL	24,A7
	SRL	24,A7
	ADDK	16,A12
	ADD	A7,A8
	DSJS	A13,RCPLP

	MOVE	*A14(ROM_NMBR),A4,W	;WHICH PROGRAM ROM ARE WE CHECKING?
	JRNZ	PROGRAM_1		;BR = HIGH BYTE ROM
	MOVE	@CHECKSUM0,A7,W		;LOAD HARD CODED CHECKSUM
	JRUC	ROM_COMPARE
PROGRAM_1
	MOVE	@CHECKSUM1,A7,W
	JRUC	ROM_COMPARE

*LAND HERE FROM IMAGE CHECKSUM TO DETERMINE IF WE HIT IT
ROMCKCK
	MOVE	*A14(ROM_CKSM),A7,W
ROM_COMPARE
	ZEXT	A7
	ZEXT	A8
	CMP	A7,A8
	JRZ	ROMRELOOP
	MOVE	*A14(ROM_NMBR),A4,W	; GET BIT NUMBER TO SET
	MOVE	A4,B1
	MOVK	1,B2
	SLL	B1,B2
	OR	B2,B0			; SET THAT BIT
ROMRELOOP
	MOVE	*A14(ROM_LINK),A10,L
	JRZ	ROMNOPLOT
	MOVK	1,A11
	MOVE	B2,B2
	JRZ	ROMPLOT
	MOVK	2,A11
ROMPLOT
	MOVE	B5,A9			; I HOPE THIS ONE IS SAFE!
	MOVE	B0,A13
	FCALL	CHIPOUT,B5
	MOVE	A13,B0
	MOVE	A9,B5

ROMNOPLOT
	ADDI	ROM_SIZE,A14
*CHECKING FOR EARLY EXIT BY OPERATOR
	MOVE	@SWITCH0+16,A13,W	
	MOVE	A13,A8
	ANDI	00000004H,A13		;CHECK PLAYER 1 START
	JRZ	ROMABORT		;BR = IT'S PRESSED
	ANDI	00000020H,A8		;CHECK PLAYER 2 START
	JRZ	ROMABORT		;BR = IT'S PRESSED
	JRUC	ROMLOOP			;BACK FOR THE NEXT
*HERE ON OPERATOR ABORT
ROMABORT
	CLRZ
ROMEMPTY
	FRET	B5


**************************************************************************
*								         *
* 		   END OF DIAG CACHE SEGMENT				 *
*								         *
**************************************************************************

	.TEXT				;BACK TO LIFE, BACK TO SLOWALITY

**************************************************************************
*								         *
* 	MONITOR STUFF							 *
*								         *
**************************************************************************

CONV_PLOT:
	MOVI	MON_RECS,A9
CPRLP1
	MOVE	*A9+,A2,W		; GET COLOR
	JRZ	CPRDONE
	MOVE	*A9+,A0,L		; START POINT
	MOVE	*A9+,A1,L		; DIMENSIONS
	FCALL	RECTANGLE,B6
	JRUC	CPRLP1
CPRDONE
	MOVI	MON_VECS,A9		; POINT AT VECTOR TABLE
CPVLP1
	MOVE	*A9+,A2,W		; GET COLOR
	JRZ	CPVDONE
	MOVE	*A9+,A0,L		; START POINT
	MOVE	*A9+,A1,L		; END POINT
	FCALL	HVLINE,B6
	JRUC	CPVLP1
CPVDONE
	MOVI	MON_DOTS,A9		; POINT AT DOT TABLE
CPDLP1
	MOVE	*A9+,A1,W		; GET COLOR
	JRZ	CPDDONE
	MOVE	*A9+,A0,L		; GET THE POINT
	FCALL	POINT,B6
	JRUC	CPDLP1
CPDDONE
	RETS


**************************************************************************
*								         *
* 	COLORBAR							 *
*								         *
**************************************************************************
COLORBAR:
;       =========================
;       | SET PALETTE 0 FOR     |
;       | COLOR BARS.           |
;       =========================

	MOVI	INTENSITIES_START,A0,L
	MOVI	COLRAM+(5*PALSIZE),A1,L	;START UP A LITTLE BIT

	MOVK	16,A2		;5 BITS/COLOR
        MOVK  	2,A6		;2 PALETTES TO COVER 8 BARS
CB2
	MOVK	4,A7		;4 BARS/PALETTE
CB3
	MOVE	*A0+,A3		;STARTING COLOR
	MOVE	*A0+,A4		;COLOR DECREMENT
	MOVE	A2,A5
CB4
	MOVE	A3,*A1+
	SUB	A4,A3
	DSJS	A5,CB4
	DSJS	A7,CB3

	ADDI	PALSIZE-(4*16)*10H,A1
        DSJS 	A6,CB2

;       =========================
;       | DISPLAY COLOR BARS    |
;       =========================

	CLR	A14
	MOVE	A14,@DMAGO		;HALT THE DMA
	MOVI	0101H,A14		;PALETTE INCREMENT
	MOVI	0505H,A8		;START AT THIS PALETTE

	MOVI	COLOR_BARS,A3,L		;COLOR BAR TABLE
	MOVI	[16,0],A13,L		;POSITION INCRMENT
	MOVI	101H,A12
	MOVK	16,A11			;# INTENSITIES / BAR
	MOVK	2,A6			;THIS MANY GROUPS OF 4 BARS
	CLR	A2			;STARTING COLOR
CB5
	MOVK	4,A7			;THIS MANY BARS PER PALETTE
CB6
	MOVE	*A3+,A1,L
	JRZ	CB8
	MOVE	A8,@DMACMAP,W		;STUFF PALETTE
	MOVE	*A3+,A0,L
	ADDK	16,A3
	MOVE	A11,A10
CB7
	FCALL	RECTANGLE,B6
	ADD	A13,A0
	ADD	A12,A2
	DSJS	A10,CB7
	DSJ	A7,CB6			;NEXT BAR PLEASE
	ADD	A14,A8			;NEXT BAR & PALETTE PLEASE
	DSJ	A6,CB5
CB8
	CLR	A14
	MOVE	A14,@DMACMAP,W
	RETS


INTENSITIES_START:

        .WORD 03E0H                ; GREEN
        .WORD 0040H                ; BUMP GREEN

        .WORD 7C00H                ; RED
        .WORD 0800H                ; BUMP RED

        .WORD 001FH                ; BLUE
        .WORD 0002H                ; BUMP BLUE

        .WORD 0000H                ; BLACK
        .WORD 0000H                ; BUMP BLACK

        .WORD 7FFFH                ; WHITE
        .WORD 0842H                ; BUMP WHITE

        .WORD 7FE0H                ; YELLOW
        .WORD 0840H                ; BUMP YELLOW

        .WORD 7C1FH                ; PURPLE
        .WORD 0802H                ; BUMP PURPLE

        .WORD 03FFH                ; CYAN
        .WORD 0042H                ; BUMP CYAN

	.LONG	0

**************************************************************************
*								         *
* 	DIPTEST								 *
* 									 *
* 	DIP SWITCH TESTING						 *
*								         *
**************************************************************************

DIPTEST:
	PUSHST
	DINT
	CALLA	WDOGDIS
	MOVKM	1,@DIP1ST,W		;YES THIS IS THE FIRST TIME THROUGH
	MOVI	DIP_VECS,A9		; POINT AT VECTOR TABLE
DTVLP1
	MOVE	*A9+,A2,W		; GET COLOR
	JRZ	DTVDONE
	MOVE	*A9+,A0,L		; START POINT
	MOVE	*A9+,A1,L		; END POINT
	FCALL	HVLINE,B6
	JRUC	DTVLP1
DTVDONE
	MOVI	DIP_STRS,A9
	CALLR	STR_PLOT
	CALLR	DIPPLOT
	CALLR	DIPSTATE
	PAUSE	10000,B6

	CALLR	PRESSANYBUTTONSETUP	;A0,A1 SCRATCH
DTLOOP
	CALLA	CKTEST			; EMERGENCY EXIT

	CALLR	PRESSANYBUTTONCHECK	;A0,A1 SCRATCH OUT:Z IF SAME
	JRZ	DTLGO
DT_X
	POPST
	RETS

DTLGO
	CALLR	READ_DIP
	MOVE	@DIPVAL,A1,W
	ANDI	0FFFFH,A1		;FUCKING SIGN EXTEND
	CMP	A0,A1
	JRZ	DTLOOP			;BR = NO CHANGE

	MOVE	A0,@DIPVAL,W
	CALLR	DIPPLOT
	CALLR	DIPSTATE

	MOVE	@DIP1ST,A14,W
	JRNZ	DTL_SKIP_SND
	MOVI	0FD83H,A0
	MOVE	A0,@SOUND,W
	MOVI	0FF83H,A0
	MOVE	A0,@SOUND,W		; LET HIM HEAR IT
DTL_SKIP_SND
	CLRM	@DIP1ST,W

	JRUC	DTLOOP

**************************************************************************
*								         *
* 	DIPSTATE							 *
* 									 *
* 	PLOT OUT THE STATES OF ALL THE DIP SWITCHES			 *
* 									 *
* 	ENTRY								 *
* 		NOTHING							 *
* 									 *
* 	EXIT								 *
* 		NOTHING							 *
*								         *
**************************************************************************
DIPSTATE
	MOVI	[32,74],A0
	MOVI	[104,140],A1
	MOVI	COLOR_BLACK,A2
	FCALL	RECTANGLE,B6
	MOVI	[32,284],A0
	MOVI	[104,111],A1
	MOVI	COLOR_BLACK,A2
	FCALL	RECTANGLE,B6
	CALLR	READ_DIP

	CLR	A2
	MOVI	COLOR_WHITE,A3

	MOVI	DMIRROR_0,A1
	CALLR	READ_DIP
	ANDI	DPMIRROR,A0		;MIRROR?
	JRZ	SD1
	MOVI	DMIRROR_1,A1
SD1
	MOVE	A1,A0
	MOVI	[39,75],A1
	FCALL	STRING,B6

	MOVI	DUSECMOS_0,A1
	CALLR	READ_DIP
	ANDI	DPUSECMOS,A0
	JRZ	DS1
	MOVI	DUSECMOS_1,A1
DS1
	MOVE	A1,A0
	MOVI	[51,75],A1
	FCALL	STRING,B6

*PLOT CURRENT COINAGE
	MOVI	COLOR_WHITE,A3
	MOVI	[69,75],A1
	MOVI	DCOINAGE,A0
	FCALL	STRING,B6
	CALLR	READ_DIP
	MOVE	A0,A2
	ANDI	DPCOUNTRY,A0
	SRL	3,A0
	ADDI	DCOINTAB,A0
	MOVE	*A0,A1,L		; POINTER TO RIGHT COIN TABLE
	ANDI	DPCOINAGE,A2
	SLL	3,A2
	ADD	A2,A1
	MOVE	*A1,A0,L		; NOW POINTING AT MESSAGE
	CLR	A2
	MOVI	[81,75],A1
	FCALL	STRING,B6

*PLOT CREDITS TO START, CREDITS TO CONTINUE
	MOVI	DCREDITS,A0
	MOVI	[101,75],A1
	FCALL	STRING,B6

	MOVI	DTOSTART,A0
	MOVI	[112,88],A1
	FCALL	STRING,B6

	MOVI	DTOCONTINUE,A0
	MOVI	[123,88],A1
	FCALL	STRING,B6

	CALLR	READ_DIP
	MOVE	A0,A7
	ANDI	DPCREDITS,A7
	SLL	1,A7
	ADDI	DCREDTAB,A7
	MOVE	*A7+,A0,L
	MOVI	[112,75],A1
	FCALL	STRING,B6
	MOVE	*A7+,A0,L
	MOVI	[123,75],A1
	FCALL	STRING,B6

*PLOT COUNTRY SELECTION
	CALLR	READ_DIP
	ANDI	DPCOUNTRY,A0
	SRL	3,A0
	ADDI	DCOUNTRY_TAB,A0
	MOVE	*A0,A0,L
	MOVI	[45,285],A1
	FCALL	STRING,B6
****	CALLR	SHOWCOUNTRY		; UPDATE THE 543 COINAGE SETTINGS

	MOVI	DUNUSED,A0
	MOVI	[63,285],A1
	FCALL	STRING,B6

	MOVI	DCOUNTER_0,A1
	CALLR	READ_DIP
	ANDI	DPCOUNTER,A0		; COUNTER
	JRZ	SD2
	MOVI	DCOUNTER_1,A1
SD2
	MOVE	A1,A0
	MOVI	[75,285],A1
	FCALL	STRING,B6

	CALLR	READ_DIP
	ANDI	DPPLAYERS,A0
	SRL	7,A0
	ADDI	DPLAYER_TAB,A0
	MOVE	*A0,A0,L
	MOVI	[87,285],A1
	FCALL	STRING,B6

	MOVI	DUNUSED,A0
	MOVI	[99,285],A1
	FCALL	STRING,B6

	MOVI	DFREEZE_0,A0
	MOVI	[111,285],A1
	FCALL	STRING,B6

	MOVI	DTEST_0,A0
	MOVI	[123,285],A1
	FCALL	STRING,B6

	RETS				


****SHOWCOUNTRY
****	MOVI	[161,7],A0
****	MOVI	[93,162],A1
****	MOVI	COLOR_BLACK,A2
****	FCALL	RECTANGLE,B6
****	CALLR	READ_DIP
****	MOVE	A0,A7
****	ANDI	DPCOUNTRY,A7
****	SRL	3,A7
****	ADDI	COINTAB,A7
****	MOVE	*A7,A7,L
****	MOVI	SHOWYLOC,A8
****	CLR	A2
****	MOVI	COLOR_WHITE,A3
****SCL1
****	MOVE	*A7+,A0,L		; NEXT STRING
****	JRZ	SCDONE
****	MOVE	*A8+,A1,W		; NEXT Y LOCATION
****	SLL	16,A1
****	ADDK	7,A1
****	FCALL	STRING,B6
****	JRUC	SCL1
****SCDONE
****	RETS

****SHOWYLOC	.WORD	161, 173, 185, 197, 209, 221, 233, 245, 0, 0

**************************************************************************
*								         *
* 	CHECKDIPFREE							 *
* 									 *
* 	CHECK TO SEE IF EITHER OF THE COIN SLOTS IS ON FREE PLAY,	 *
* 	AND IF SO RETURN Z, OTHERWISE DON'T				 *
* 									 *
* 	ENTRY								 *
* 		NOTHING							 *
* 									 *
* 	EXIT								 *
* 		.EQ.	YES, FREEPLAY					 *
*								         *
**************************************************************************

CHECKDIPFREE:
	PUSH	A0
	CALLR	READ_DIP
	ANDI	DPCOINAGE,A0
	CMPI	DPCOINAGE,A0
CDFRET
	PULL	A0
	RETS


**************************************************************************
*								         *
* 	DIPPLOT								 *
* 									 *
* 	PLOT OUT THE DIP SWITCHES					 *
* 									 *
* 	ENTRY								 *
* 		NOTHING							 *
* 									 *
* 	EXIT								 *
* 		NOTHING							 *
*								         *
**************************************************************************

DIPPLOT:
	MOVI	[33,21],A0
	MOVI	[104,38],A1
	MOVI	COLOR_BLACK,A2
	FCALL	RECTANGLE,B6
	MOVI	[33,231],A0
	MOVI	[104,38],A1
	MOVI	COLOR_BLACK,A2
	FCALL	RECTANGLE,B6
	CALLR	READ_DIP
	CLR	A2
DIPLOOP
	MOVE	A2,A3
	SLL	5,A3
	ADDI	DIPYTAB,A3
	MOVE	*A3,A3,L
	SLL	16,A3			; GOT THE Y LOC

	CLR	A5
	CMPI	8,A2
	JRLO	DIPL2
	MOVI	210,A5
DIPL2
	MOVX	A5,A3

	BTST	A2,A0			; CHECK IF BIT IS SET
	JRNZ	DIPON
	MOVI	DP_OFF,A1
	ADDI	29,A3
	MOVI	COLOR_GREY,A4
	JRUC	DIPSTR

DIPON
	MOVI	DP_ON,A1
	ADDI	32,A3
	MOVI	COLOR_WHITE,A4

DIPSTR
	MMTM	SP,A0,A2
	MOVE	A1,A0			; SET STRING
	MOVE	A3,A1			; SET LOCATION
	MOVE	A4,A3
	CLR	A2			; HORIZONTAL
	FCALL	STRING,B6
	MMFM	SP,A0,A2
	INC	A2
	CMPI	16,A2
	JRLO	DIPLOOP
	RETS


DIPYTAB
	.LONG	39,51,63,75,87,99,111,123
	.LONG	39,51,63,75,87,99,111,123

**************************************************************************
*								         *
* 	READ_DIP							 *
* 									 *
* 	READ IN BOTH DIP SWITCHES					 *
* 									 *
* 	ENTRY								 *
* 		NOTHING							 *
* 									 *
* 	EXIT								 *
* 		A0	DIP SWITCH					 *
*								         *
**************************************************************************

READ_DIP:
	MMTM	SP,A1,A2,A3
	MOVE	@DIPSWITCH,A0,W		; READ IT IN
	NOT	A0			; INVERT IT FOR TRUE BITS
	CLR	A1
	MOVI	7,A2
RDLOOP
	BTST	A2,A0
	JRZ	RD1
	MOVK	7,A3
	SUB	A2,A3
	BSET	A3,A1
RD1
	PUSH	A2
	ADDI	8,A2
	BTST	A2,A0
	JRZ	RD2
	MOVK	15,A3
	SUB	A2,A3
	ADDI	8,A3
	BSET	A3,A1
RD2
	PULL	A2
	DEC	A2
	JRNN	RDLOOP
	MOVE	A1,A0

	.IF	YUNIT
	.ELSE
	MOVI	DPUSECMOS,A0
	.ENDIF
	MMFM	SP,A1,A2,A3
	RETS


**************************************************************************
*								         *
* 	SWITCHTEST							 *
* 									 *
* 	DRAW OUT THE TROG SWITCHES -- A PRETTY PICTURE			 *
* 									 *
* 	ENTRY								 *
* 		NOTHING							 *
* 									 *
* 	EXIT								 *
* 		NOTHING							 *
*								         *
**************************************************************************


SWITCHTEST:
	PUSHST
	DINT
	CALLA	WDOGDIS
	CLR	A13			; THE HOLD ME REGISTER
	MOVE	A13,@SWSET1,L
	MOVE	A13,@SWSET2,L
	MOVE	A13,@SWPREV1,L
	MOVE	A13,@SWPREV2,L
	MOVI	BUT_TABLE,A9
	CLR	A10
	CALLR	BUT_PLOT		; PLOT SOME BUTTONS
	MOVI	STR_TABLE,A9
	CALLR	STR_PLOT		; PLOT THE STRINGS
	MOVI	00B90005H,A0
	MOVI	00B9018BH,A1
	MOVI	COLOR_WHITE,A2
	FCALL	HVLINE,B6		; DRAW LITTLE WHITE LINE
SDLOOP
	MOVE	@SWITCH0,A10,L		; GRAB ME A SWITCH REGISTER
	NOT	A10
	MOVE	A10,A0
	ANDI	DONEMASK,A0
	CMPI	DONEMASK,A0,L		; CHECK FOR DONE
	JRNZ	SDGO
	POPST
	RETS
SDGO
	MOVE	@SWSET1,A11,L
	CMP	A11,A10			; CHECK FOR CHANGES
	JRZ	SDCK2
	MOVE	A10,@SWSET1,L
	MOVE	@SWITCH0+32,A10,L
	NOT	A10
	ANDI	0FFH,A10
	MOVE	A10,@SWSET2,L
	JRUC	SDPROC
SDCK2
	MOVE	@SWITCH0+32,A10,L
	NOT	A10
	ANDI	0FFH,A10
	MOVE	@SWSET2,A11,L
	CMP	A11,A10
	JRZ	SDLOOP
	MOVE	A10,@SWSET2,L
SDPROC

	MOVI	BUT_TABLE,A9
	CALLR	BUT_PLOT
	MOVI	SWITCHSTR_TAB,A9
	CALLR	SWITCHSTR_PLOT

	MOVE	@SWPREV1,A1,L
	NOT	A1
	MOVE	@SWSET1,A2,L
	NOT	A2
	OR	A2,A1
	CMP	A1,A2
	JRNZ	SDSOUND
	MOVE	@SWPREV2,A1,L
	NOT	A1
	MOVE	@SWSET2,A2,L
	NOT	A2
	OR	A2,A1
	CMP	A1,A2
	JRZ	SDNOSOUND

SDSOUND
	MOVI	0FD82H,A0
	MOVE	A0,@SOUND,W
	MOVI	0FF82H,A0
	MOVE	A0,@SOUND,W

SDNOSOUND
	MOVE	@SWSET1,@SWPREV1,L
	MOVE	@SWSET2,@SWPREV2,L
	JRUC	SDLOOP

**************************************************************************
*								         *
* 	BUT_PLOT							 *
* 									 *
* 	PLOT A BUTTON TABLE ON THE SCREEN				 *
* 									 *
* 	ENTRY								 *
* 		A9	POINTS TO BUTTON TABLE LIST			 *
* 		A10	SETTINGS OF THE SWITCH REGISTER			 *
* 									 *
* 	EXIT								 *
* 		NOTHING							 *
*								         *
**************************************************************************
BUT_PLOT:
	MOVE	*A9+,A1,L		; XY LOC
	JRZ	BPDONE
	MOVE	*A9+,A0,W		; RADIUS
	MOVE	*A9+,A6,L		; COLOR
	MOVE	*A9+,A11,L		; GET MASK
	ADDK	16,A9			; SHIFT COUNT
	MOVE	*A9+,A8,W		; JAMMA EXTEND-O-BIT
	JRZ	BPLOW
	MOVE	@SWSET2,A10,L
	JRUC	BPAND
BPLOW
	MOVE	@SWSET1,A10,L
BPAND
	AND	A10,A11			; MASK OFF SOMETHING USEFUL
	JRZ	BPHOLLOW
	SUBK	2,A0
	ADDI	CFILL,A6		; MASK IN THE FILL BITS
	JRUC	BPCIRC
BPHOLLOW
	MMTM	SP,A0,A1,A6
	SUBK	2,A0
	MOVI	COLOR_BLACK,A6
	ADDI	CFILL,A6
	FCALL	CIRCLE,B6
	MMFM	SP,A0,A1,A6
BPCIRC
	FCALL	CIRCLE,B6
	JRUC	BUT_PLOT
BPDONE
	RETS

**************************************************************************
*								         *
* SWITCHSTR_PLOT - CHECK SWITCHES AND PLOT CORRESPONDING STRING.	 *
* A9 = POINTS TO SWITCH STRING TABLE LIST				 *
* A10 = SETTINGS OF THE SWITCH REGISTER					 *
*								         *
**************************************************************************
SWITCHSTR_PLOT:
	MOVE	*A9+,A1,L		;XY LOC
	JRZ	SSTR_DONE
	MOVE	*A9+,A0,L		;STRING PTR
	MOVE	*A9+,A3,W		;COLOR
	MOVE	*A9+,A2,W		;DIRECTION
	MOVE	*A9+,A11,L		;GET MASK
	MOVE	@SWSET1,A10,L
	AND	A10,A11			;CHECK JUST OUR SWITCH
	JRNZ	SSTR_PLOT
	MOVI	COLOR_BLACK,A3
SSTR_PLOT
	FCALL	STRING,B6
	JRUC	SWITCHSTR_PLOT
SSTR_DONE
	RETS

**************************************************************************
*								         *
* 	STR_PLOT							 *
* 									 *
* 	PLOT A STRING TABLE ON THE SCREEN				 *
* 									 *
* 	ENTRY								 *
* 		A9	POINTS TO STRING TABLE LIST			 *
*								         *
**************************************************************************

STR_PLOT:
	MOVE	*A9+,A1,L		; XY LOC
	JRZ	STDONE
	MOVE	*A9+,A0,L		; STRING PTR
	MOVE	*A9+,A3,W		; COLOR
	MOVE	*A9+,A2,W		; DIRECTION
	FCALL	STRING,B6
	JRUC	STR_PLOT
STDONE
	RETS

CFILL	EQU	0FFFF0000H

;
;	FORMAT
;
;	X,Y,RADIUS,COLOR,MASK,SHIFT COUNT ( FOR JOYSTICK STUFF ), EXTENDBIT
;

COLOR_P1	EQU	COLOR_BLUE
COLOR_P2	EQU	COLOR_RED

**************************************************************************
*								         *
* 	Y-UNIT DEFS							 *
*								         *
**************************************************************************


BUT_TABLE:
	BUT_MAC	260,199,10,COLOR_GREEN,00080000H,0,0	; SLAM
	BUT_MAC	260,222,10,COLOR_GREEN,00100000H,0,0	; TEST
	BUT_MAC	260,245,10,COLOR_GREEN,01000000H,0,0	; VIDEO FREEZE
	BUT_MAC 30,207,10,COLOR_GREEN,00010000H,0,0	; COIN LEFT
	BUT_MAC	75,207,10,COLOR_GREEN,00020000H,0,0	; COIN RIGHT
	BUT_MAC	120,207,10,COLOR_GREEN,00800000H,0,0	; COIN CENTER
	BUT_MAC	165,207,10,COLOR_GREEN,02000000H,0,0	; FOURTH COIN
	BUT_MAC	214,207,10,COLOR_GREEN,00400000H,0,0	; SERVICE CREDIT
	.LONG	0

DONEMASK	EQU	00040010H			; P1 START + P1 TRIGGER

SWITCHSTR_TAB
	SW_MAC	10,30,P1START,COLOR_P1,0,00040000H		;P1 START
	SW_MAC	240,30,P2START,COLOR_P2,0,00200000H	;P2 START
	SW_MAC	10,40,P1_TRIGGER,COLOR_P1,0,00000010H	;P1 TRIGGER
	SW_MAC	10,50,P1_BOMB,COLOR_P1,0,00000020H		;P1 BOMB
	SW_MAC	240,40,P2_TRIGGER,COLOR_P2,0,00001000H	;P2 TRIGGER
	SW_MAC	240,50,P2_BOMB,COLOR_P2,0,00002000H	;P2 BOMB
	.LONG	0

STR_TABLE:
	STR_MAC	88,5,SWITCH_TITLE,COLOR_WHITE,0		;TITLE
	STR_MAC	275,196,SLAM,COLOR_GREEN,0			;SLAM
	STR_MAC	275,219,TEST,COLOR_GREEN,0			;TEST SWITCH
	STR_MAC	275,242,VIDEO,COLOR_GREEN,0		;VIDEO FREEZE
	STR_MAC	12,233,LEFTSLOT,COLOR_GREEN,0		;LEFT COIN
	STR_MAC	56,233,RIGHTSLOT,COLOR_GREEN,0		;RIGHT COIN
	STR_MAC	103,222,CENTER,COLOR_GREEN,0		;CENTER COIN
	STR_MAC	147,222,FOURTH,COLOR_GREEN,0		;COIN MIDDLE
	STR_MAC	10,222,COINMESS1,COLOR_GREEN,0		;BOTTOM MESSAGE
	STR_MAC	55,222,COINMESS2,COLOR_GREEN,0
	STR_MAC	193,222,SERVICE1,COLOR_GREEN,0		;SERVICE CREDIT
	STR_MAC	197,233,SERVICE2,COLOR_GREEN,0		;SERVICE CREDIT
	.IF GERMAN
	STR_MAC	100,150,EXITMESS1,COLOR_WHITE,0		;EXIT MESSAGE 1
	STR_MAC	153,160,EXITMESS2,COLOR_WHITE,0		;EXIT MESSAGE 2
	.ELSE
	STR_MAC	90,150,EXITMESS1,COLOR_WHITE,0		;EXIT MESSAGE 1
	STR_MAC	157,160,EXITMESS2,COLOR_WHITE,0		;EXIT MESSAGE 2
	.ENDIF
	.LONG	0

	.IF GERMAN

SWITCH_TITLE
	.STRING	"TERMINATOR 2  - KONTAKT-TEST",0
EXITMESS1
	.STRING	"SPIELER 1 START UND TRIGGER",0
	.EVEN
EXITMESS2
	.STRING "ZUM VERLASSEN",0	
	.EVEN
LEFTSLOT
	.STRING "LINK.",0
	.EVEN
RIGHTSLOT
	.STRING	"RECHT.",0
	.EVEN
SERVICE1
	.STRING	"SERVICE",0
	.EVEN
SERVICE2
	.STRING	"KREDIT",0
	.EVEN

	.ELSE

SWITCH_TITLE
	.STRING	"TERMINATOR 2  - SWITCH TEST",0
EXITMESS1
	.STRING	"PLAYER 1 START AND TRIGGER",0
	.EVEN
EXITMESS2
	.STRING "TO EXIT",0	
	.EVEN
LEFTSLOT
	.STRING "LEFT",0
	.EVEN
RIGHTSLOT
	.STRING	"RIGHT",0
	.EVEN
SERVICE1
	.STRING	"SERVICE",0
	.EVEN
SERVICE2
	.STRING	"CREDIT",0
	.EVEN

	.ENDIF

STSTART
	.STRING	"STARTS",0
	.EVEN

P1START
	.STRING	"TERMINATOR 1 START",0
	.EVEN
P2START
	.STRING	"TERMINATOR 2 START",0
	.EVEN
P1_TRIGGER
	.STRING	"TERMINATOR 1 TRIGGER",0
	.EVEN
P2_TRIGGER
	.STRING	"TERMINATOR 2 TRIGGER",0
	.EVEN
P1_BOMB
	.STRING	"TERMINATOR 1 BOMB",0
	.EVEN
P2_BOMB
	.STRING	"TERMINATOR 2 BOMB",0
	.EVEN

COINMESS1
	.STRING	"COIN1",0
	.EVEN
COINMESS2
	.STRING	"COIN2",0	
	.EVEN

CENTER
	.STRING	"COIN3",0
	.EVEN
FOURTH
	.STRING	"COIN4",0
	.EVEN

SLAM
	.STRING	"SLAM - TILT",0
	.EVEN
TEST
	.STRING	"TEST",0
	.EVEN
VIDEO
	.STRING	"VIDEO FREEZE",0
	.EVEN


**************************************************************************
*								         *
* 	MONITOR TEST DATA AREA						 *
*								         *
**************************************************************************

MON_VECS:
	VECMAC	COLOR_WHITE,004,004,396,004
	VECMAC	COLOR_WHITE,004,004,004,250
	VECMAC	COLOR_WHITE,004,250,396,250
	VECMAC	COLOR_WHITE,396,250,396,004
	VECMAC	COLOR_WHITE,060,005,060,250
	VECMAC	COLOR_WHITE,115,005,115,250
	VECMAC	COLOR_WHITE,170,005,170,250
	VECMAC	COLOR_WHITE,225,005,225,250
	VECMAC	COLOR_WHITE,280,005,280,250
	VECMAC	COLOR_WHITE,335,005,335,250
	VECMAC	COLOR_WHITE,005,54,396,54
	VECMAC	COLOR_WHITE,005,103,396,103
	VECMAC	COLOR_WHITE,005,152,396,152
	VECMAC	COLOR_WHITE,005,201,396,201
	.LONG	0

MON_RECS:
	VECMAC	COLOR_RED,182,000,030,005	; TOP
	VECMAC	COLOR_GREEN,182,005,030,006
	VECMAC	COLOR_RED,182,250,030,005	; BOTTOM
	VECMAC	COLOR_GREEN,182,244,030,006
	VECMAC	COLOR_RED,000,117,005,020	; LEFT
	VECMAC	COLOR_GREEN,005,117,006,020
	VECMAC	COLOR_RED,396,117,005,020	; RIGHT
	VECMAC	COLOR_GREEN,390,117,006,020
	.LONG	0

MON_DOTS:
	DOTMAC	COLOR_WHITE,032,029
	DOTMAC	COLOR_WHITE,087,029
	DOTMAC	COLOR_WHITE,142,029
	DOTMAC	COLOR_WHITE,197,029
	DOTMAC	COLOR_WHITE,252,029
	DOTMAC	COLOR_WHITE,307,029
	DOTMAC	COLOR_WHITE,362,029

	DOTMAC	COLOR_WHITE,032,078
	DOTMAC	COLOR_WHITE,087,078
	DOTMAC	COLOR_WHITE,142,078
	DOTMAC	COLOR_WHITE,197,078
	DOTMAC	COLOR_WHITE,252,078
	DOTMAC	COLOR_WHITE,307,078
	DOTMAC	COLOR_WHITE,362,078

	DOTMAC	COLOR_WHITE,032,127
	DOTMAC	COLOR_WHITE,087,127
	DOTMAC	COLOR_WHITE,142,127
	DOTMAC	COLOR_WHITE,197,127
	DOTMAC	COLOR_WHITE,252,127
	DOTMAC	COLOR_WHITE,307,127
	DOTMAC	COLOR_WHITE,362,127

	DOTMAC	COLOR_WHITE,032,176
	DOTMAC	COLOR_WHITE,087,176
	DOTMAC	COLOR_WHITE,142,176
	DOTMAC	COLOR_WHITE,197,176
	DOTMAC	COLOR_WHITE,252,176
	DOTMAC	COLOR_WHITE,307,176
	DOTMAC	COLOR_WHITE,362,176

	DOTMAC	COLOR_WHITE,032,225
	DOTMAC	COLOR_WHITE,087,225
	DOTMAC	COLOR_WHITE,142,225
	DOTMAC	COLOR_WHITE,197,225
	DOTMAC	COLOR_WHITE,252,225
	DOTMAC	COLOR_WHITE,307,225
	DOTMAC	COLOR_WHITE,362,225
	.LONG	0

PRIMARY_COLORS:

	RECTMAC	COLOR_RED,0,0,395,255
	RECTMAC	COLOR_GREEN,0,0,395,255
	RECTMAC	COLOR_BLUE,0,0,395,255
	.LONG	0

COLOR_BARS:
				     
        RECTMAC	COLOR_BLACK,   0, 0, 49, 16
        RECTMAC	COLOR_BLACK,  49, 0, 49, 16
        RECTMAC	COLOR_BLACK,  98, 0, 49, 16
        RECTMAC	COLOR_BLACK, 147, 0, 49, 16
        RECTMAC	COLOR_BLACK, 196, 0, 49, 16        
        RECTMAC	COLOR_BLACK, 245, 0, 49, 16
        RECTMAC	COLOR_BLACK, 294, 0, 49, 16
        RECTMAC	COLOR_BLACK, 343, 0, 49, 16
	.LONG	0




**************************************************************************
*								         *
* 	DIP SWITCH DISPLAY STUFF					 *
*								         *
**************************************************************************

DIP_VECS:
	VECMAC	COLOR_RED,20,32,60,32		; DS1
	VECMAC	COLOR_RED,20,32,20,138
	VECMAC	COLOR_RED,20,138,60,138	
	VECMAC	COLOR_RED,60,32,60,138

	VECMAC	COLOR_RED,230,32,270,32	; DS2
	VECMAC	COLOR_RED,230,32,230,138
	VECMAC	COLOR_RED,230,138,270,138	
	VECMAC	COLOR_RED,270,32,270,138

	VECMAC	COLOR_WHITE,63,42,73,42

	VECMAC	COLOR_WHITE,63,54,73,54

	VECMAC	COLOR_WHITE,63,66,68,66
	VECMAC	COLOR_WHITE,63,90,68,90
	VECMAC	COLOR_WHITE,68,66,68,90
	VECMAC	COLOR_WHITE,68,78,73,78

	VECMAC	COLOR_WHITE,63,102,68,102
	VECMAC	COLOR_WHITE,63,126,68,126
	VECMAC	COLOR_WHITE,68,102,68,126
	VECMAC	COLOR_WHITE,68,114,73,114

	VECMAC	COLOR_WHITE,273,42,278,42	; COUNTRY
	VECMAC	COLOR_WHITE,273,54,278,54
	VECMAC	COLOR_WHITE,278,42,278,54
	VECMAC	COLOR_WHITE,278,48,283,48
	
	VECMAC	COLOR_WHITE,273,66,283,66
	VECMAC	COLOR_WHITE,273,78,283,78

	VECMAC	COLOR_WHITE,273,90,283,90
	VECMAC	COLOR_WHITE,273,102,283,102

	VECMAC	COLOR_WHITE,273,114,283,114
	VECMAC	COLOR_WHITE,273,126,283,126

	.LONG	0

DIP_STRS:
	STR_MAC	124,8,DP_TITLE,COLOR_GREEN,0
   	STR_MAC	30,20,DP_DS1,COLOR_WHITE,0
	STR_MAC	240,20,DP_DS2,COLOR_WHITE,0
	STR_MAC	7,39,DP_DSN1,COLOR_WHITE,0
	STR_MAC	7,51,DP_DSN2,COLOR_WHITE,0
	STR_MAC	7,63,DP_DSN3,COLOR_WHITE,0
	STR_MAC	7,75,DP_DSN4,COLOR_WHITE,0
	STR_MAC	7,87,DP_DSN5,COLOR_WHITE,0
	STR_MAC	7,99,DP_DSN6,COLOR_WHITE,0
	STR_MAC	7,111,DP_DSN7,COLOR_WHITE,0
	STR_MAC	7,123,DP_DSN8,COLOR_WHITE,0

	STR_MAC	217,39,DP_DSN1,COLOR_WHITE,0
	STR_MAC	217,51,DP_DSN2,COLOR_WHITE,0
	STR_MAC	217,63,DP_DSN3,COLOR_WHITE,0
	STR_MAC	217,75,DP_DSN4,COLOR_WHITE,0
	STR_MAC	217,87,DP_DSN5,COLOR_WHITE,0
	STR_MAC	217,99,DP_DSN6,COLOR_WHITE,0
	STR_MAC	217,111,DP_DSN7,COLOR_WHITE,0
	STR_MAC	217,123,DP_DSN8,COLOR_WHITE,0

	STR_MAC	100,150,DP_INS1,COLOR_WHITE,0

	.LONG	0


DP_DS1:
	.STRING	"DS1",0
	.EVEN
DP_DS2:
	.STRING	"DS2",0
	.EVEN

DP_DSN1
	.STRING	"1",0
	.EVEN
DP_DSN2
	.STRING	"2",0
	.EVEN
DP_DSN3
	.STRING	"3",0
	.EVEN
DP_DSN4
	.STRING	"4",0
	.EVEN
DP_DSN5
	.STRING	"5",0
	.EVEN
DP_DSN6
	.STRING	"6",0
	.EVEN	 
DP_DSN7
	.STRING	"7",0
	.EVEN
DP_DSN8
	.STRING	"8",0
	.EVEN

DUSECMOS_1:
	.STRING	"CMOS COINAGE",0
	.EVEN

DUSECMOS_0:
	.STRING	"DIPSWITCH COINAGE",0
	.EVEN

DMIRROR_0
	.STRING	"MIRROR DISPLAY",0
	.EVEN

DMIRROR_1
	.STRING	"NORMAL DISPLAY",0
	.EVEN

DCOUNTER_0
	.STRING	"ONE COUNTER",0
	.EVEN

DCOUNTER_1
	.STRING	"TWO COUNTERS",0
	.EVEN

DCOINAGE
	.STRING	"COINAGE",0
	.EVEN

DCOUNTRY_0
	.STRING	"USA",0
	.EVEN
DCOUNTRY_2
	.STRING	"FRENCH",0
	.EVEN


DFREEZE_0
	.STRING	"VIDEO FREEZE",0
	.EVEN

DPLAYER_TAB
	.LONG	DPLAYER_0, DPLAYER_1

	.IF GERMAN
DCOUNTRY_1
	.STRING	"DEUTSCH",0
	.EVEN

DCOUNTRY_TAB
	.LONG	DCOUNTRY_1, DCOUNTRY_0, DCOUNTRY_2, DCOUNTRY_3

DCREDITS
	.STRING	"KREDITE...",0
	.EVEN
DTOSTART
	.STRING	"BEI SPIELBEGINN",0
	.EVEN
DTOCONTINUE
	.STRING	"ZUR SPIELFORTSET.",0
	.EVEN

DTEST_0
	.STRING	"TEST",0
	.EVEN

DPLAYER_0
	.STRING	"2 SPIELER",0
	.EVEN
DPLAYER_1
	.STRING	"1 SPIELER",0
	.EVEN

DUCOIN7
	.STRING	"FREISPIEL",0
	.EVEN

DCOINTAB
	.LONG	DGCOINTAB, DUCOINTAB, DFCOINTAB, DUCOINTAB

DP_TITLE
	.STRING	"DIP-SCHALTER-TEST",0
	.EVEN

DP_INS1
	.STRING	"BELIEBIGEN KNOPF DRUECKEN",0
	.EVEN

DP_ON
	.STRING	"EIN",0
	.EVEN
DP_OFF
	.STRING	"AUS",0

	.ELSE
DCOUNTRY_1
	.STRING	"GERMAN",0
	.EVEN

DCOUNTRY_TAB
	.LONG	DCOUNTRY_0, DCOUNTRY_1, DCOUNTRY_2, DCOUNTRY_3

DCREDITS
	.STRING	"CREDITS...",0
	.EVEN
DTOSTART
	.STRING	"TO START",0
	.EVEN
DTOCONTINUE
	.STRING	"TO CONTINUE",0
	.EVEN

DTEST_0
	.STRING	"TEST SWITCH",0
	.EVEN

DPLAYER_0
	.STRING	"2 PLAYER",0
	.EVEN
DPLAYER_1
	.STRING	"1 PLAYER",0
	.EVEN

DUCOIN7
	.STRING	"FREEPLAY",0
	.EVEN

DCOINTAB
	.LONG	DUCOINTAB, DGCOINTAB, DFCOINTAB, DUCOINTAB

DP_TITLE
	.STRING	"DIPSWITCH SETTINGS",0
	.EVEN

DP_INS1
	.STRING	"PRESS ANY BUTTON TO EXIT",0
	.EVEN

DP_ON
	.STRING	"ON",0
	.EVEN
DP_OFF
	.STRING	"OFF",0

	.ENDIF


DUNUSED
DGCOIN4
DCOUNTRY_3 
	.STRING	"UNUSED",0
	.EVEN

DUCOINTAB
	.LONG	USA_1,USA_2,USA_3,USA_4,USA_ELECTITLE,DGCOIN4
	.LONG	DGCOIN4,DUCOIN7

DGCOINTAB
	.LONG	GERMAN_1,GERMAN_2,GERMAN_3,GERMAN_4,GERMAN_ELECTITLE
	.LONG	DGCOIN4,DGCOIN4,DUCOIN7

DFCOINTAB
	.LONG	FRENCH_1,FRENCH_2,FRENCH_3,FRENCH_4,FRENCH_ELECTITLE
	.LONG	DGCOIN4,DGCOIN4,DUCOIN7

DCREDTAB
	.LONG	DP_DSN2,DP_DSN1
	.LONG	DP_DSN1,DP_DSN1
	.LONG	DP_DSN2,DP_DSN2
	.LONG	DP_DSN3,DP_DSN1
	.LONG	DP_DSN4,DP_DSN1
	.LONG	DP_DSN3,DP_DSN2
	.LONG	DP_DSN4,DP_DSN2
	.LONG	DP_DSN3,DP_DSN3

**************************************************************************
*								         *
* 	CPU BOARD INFORMATION						 *
*								         *
**************************************************************************

CPU_VECS:		       
	VECMAC	COLOR_WHITE,5,15,390,15		; BOARD OUTLINE
	VECMAC	COLOR_WHITE,390,15,390,254
	VECMAC	COLOR_WHITE,5,253,390,253
	VECMAC	COLOR_WHITE,5,15,5,100
	VECMAC	COLOR_WHITE,5,100,15,100
	VECMAC	COLOR_WHITE,15,100,15,115
	VECMAC	COLOR_WHITE,5,115,15,115
	VECMAC	COLOR_WHITE,5,115,5,135
	VECMAC	COLOR_WHITE,5,135,15,135
	VECMAC	COLOR_WHITE,15,135,15,138
	VECMAC	COLOR_WHITE,5,138,15,138
	VECMAC	COLOR_WHITE,5,138,5,215
	VECMAC	COLOR_WHITE,5,215,15,215
	VECMAC	COLOR_WHITE,15,215,15,230
	VECMAC	COLOR_WHITE,5,230,15,230
	VECMAC	COLOR_WHITE,5,230,5,254
	.LONG	0

CPUXBASE	EQU	5
CPUYBASE	EQU	5


CPU_CHIPS:
CRAM1	CHIPMAC	0,120,25,20,40,7,12,CNAME5,1,2,2,1	; COLOR RAM
CRAM2	CHIPMAC	1,120,70,20,40,7,8,CNAME23,1,2,2,1	; COLOR RAM

VRAM1	CHIPMAC	2,200,25,15,35,5,5,CNAME10,1,2,2,1	; BANK 1 VIDEO RAM
VRAM2	CHIPMAC	3,217,25,15,35,5,5,CNAME11,1,2,2,1
VRAM3	CHIPMAC	4,234,25,15,35,5,5,CNAME12,1,2,2,1
VRAM4	CHIPMAC	5,251,25,15,35,5,5,CNAME13,1,2,2,1
VRAM5	CHIPMAC	6,268,25,15,35,5,5,CNAME14,1,2,2,1
VRAM6	CHIPMAC	7,285,25,15,35,5,5,CNAME15,1,2,2,1

VRAM7	CHIPMAC	8,200,70,15,35,5,5,CNAME28,1,2,2,1	; BANK 2 VIDEO RAM
VRAM8	CHIPMAC	9,217,70,15,35,5,5,CNAME29,1,2,2,1
VRAM9	CHIPMAC	10,234,70,15,35,5,5,CNAME30,1,2,2,1
VRAM10	CHIPMAC	11,251,70,15,35,5,5,CNAME31,1,2,2,1
VRAM11	CHIPMAC	12,268,70,15,35,5,5,CNAME32,1,2,2,1
VRAM12	CHIPMAC	13,285,70,15,35,5,5,CNAME33,1,2,2,1

CPU	CHIPMAC	0,330,80,35,35,8,14,CNAME36,0,3,3,1	; CPU
DMA	CHIPMAC	0,320,175,45,40,12,18,CNAME99,0,42,3,1	; DMA

PROM1	CHIPMAC	1,90,210,20,40,7,3,CNAME105,1,2,2,1	; PROGRAM ROM 1
PROM2	CHIPMAC	0,90,167,20,40,7,8,CNAME89,1,2,2,1	; PROGRAM ROM 2

IROM1	CHIPMAC	1,130,167,20,40,7,8,CNAME90,1,2,2,0	; IMAGE ROM
IROM2	CHIPMAC	2,152,167,20,40,7,8,CNAME91,1,2,2,0	; IMAGE ROM
IROM3	CHIPMAC	3,174,167,20,40,7,8,CNAME92,1,2,2,0	; IMAGE ROM
IROM4	CHIPMAC	4,196,167,20,40,7,8,CNAME93,1,2,2,0	; IMAGE ROM

IROM5	CHIPMAC	5,228,167,20,40,7,8,CNAME95,1,2,2,1	; IMAGE ROM
IROM6	CHIPMAC	6,250,167,20,40,7,8,CNAME96,1,2,2,1	; IMAGE ROM
IROM7	CHIPMAC	7,272,167,20,40,7,8,CNAME97,1,2,2,1	; IMAGE ROM
IROM8	CHIPMAC	8,294,167,20,40,7,8,CNAME98,1,2,2,1	; IMAGE ROM

IROM9	CHIPMAC	9,130,210,20,40,7,3,CNAME106,1,2,2,1	; IMAGE ROM
IROM10	CHIPMAC	10,152,210,20,40,7,3,CNAME107,1,2,2,1	; IMAGE ROM
IROM11	CHIPMAC	11,174,210,20,40,7,3,CNAME108,1,2,2,1	; IMAGE ROM
IROM12	CHIPMAC	12,196,210,20,40,7,3,CNAME109,1,2,2,1	; IMAGE ROM

IROM13	CHIPMAC	13,228,210,20,40,7,3,CNAME111,1,2,2,1	; IMAGE ROM
IROM14	CHIPMAC	14,250,210,20,40,7,3,CNAME112,1,2,2,1	; IMAGE ROM
IROM15	CHIPMAC	15,272,210,20,40,7,3,CNAME113,1,2,2,1	; IMAGE ROM
IROM16	CHIPMAC	16,294,210,20,40,7,3,CNAME114,1,2,2,1	; IMAGE ROM

SRAM1	CHIPMAC	0,30,115,15,35,5,5,CNAME66,1,2,2,1	; SCRATCH PAD
SRAM2	CHIPMAC	1,47,115,15,35,5,5,CNAME67,1,2,2,1	; SCRATCH PAD
SRAM3	CHIPMAC	2,64,115,15,35,5,5,CNAME68,1,2,2,1	; SCRATCH PAD
SRAM4	CHIPMAC	3,81,115,15,35,5,5,CNAME69,1,2,2,1	; SCRATCH PAD
	.LONG	0

VRAMTAB	.LONG	CRAM1,CRAM2
	.LONG	VRAM1,VRAM2,VRAM3,VRAM4,VRAM5,VRAM6
	.LONG	VRAM7,VRAM8,VRAM9,VRAM10,VRAM11,VRAM12
	.LONG	0
PROMTAB	.LONG	PROM1,PROM2
	.LONG	0
IROMTAB	.LONG	IROM1,IROM2,IROM3,IROM4
	.LONG	IROM5,IROM6,IROM7,IROM8
	.LONG	IROM9,IROM10,IROM11,IROM12
	.LONG	IROM13,IROM14,IROM15,IROM16
	.LONG	0
SRAMTAB	.LONG	SRAM1,SRAM2,SRAM3,SRAM4
	.LONG	0
	
CNAME5
	.STRING	"U5",0
	.EVEN
CNAME10	
	.STRING	"U10",0
	.EVEN
CNAME11	
	.STRING	"U11",0
	.EVEN
CNAME12	
	.STRING	"U12",0
	.EVEN
CNAME13	
	.STRING	"U13",0
	.EVEN
CNAME14	
	.STRING	"U14",0
	.EVEN
CNAME15	
	.STRING	"U15",0
	.EVEN
CNAME23
	.STRING	"U23",0
	.EVEN
CNAME28
	.STRING	"U28",0
	.EVEN
CNAME29
	.STRING	"U29",0
	.EVEN
CNAME30
	.STRING	"U30",0
	.EVEN
CNAME31
	.STRING	"U31",0
	.EVEN
CNAME32
	.STRING	"U32",0
	.EVEN
CNAME33
	.STRING	"U33",0
	.EVEN
CNAME36
	.STRING	"U36",0
	.EVEN
CNAME49
	.STRING	"U49",0
	.EVEN
CNAME66
	.STRING	"U66",0
	.EVEN
CNAME67
	.STRING	"U67",0
	.EVEN
CNAME68
	.STRING	"U68",0
	.EVEN
CNAME69
	.STRING	"U69",0
	.EVEN
CNAME89	
	.STRING	"U89",0
	.EVEN
CNAME90	
	.STRING	"U90",0
	.EVEN
CNAME91	
	.STRING	"U91",0
	.EVEN
CNAME92
	.STRING	"U92",0
	.EVEN
CNAME93	
	.STRING	"U93",0
	.EVEN
CNAME95	
	.STRING	"U95",0
	.EVEN
CNAME96	
	.STRING	"U96",0
	.EVEN
CNAME97	
	.STRING	"U97",0
	.EVEN
CNAME98	
	.STRING	"U98",0
	.EVEN
CNAME99
	.STRING	"U99",0
	.EVEN
CNAME105
	.STRING	"U105",0
	.EVEN
CNAME106
       	.STRING	"U106",0
	.EVEN
CNAME107
	.STRING	"U107",0
	.EVEN
CNAME108
	.STRING	"U108",0
	.EVEN
CNAME109
	.STRING	"U109",0
	.EVEN
CNAME111
	.STRING	"U111",0
	.EVEN
CNAME112
	.STRING	"U112",0
	.EVEN
CNAME113
	.STRING	"U113",0
	.EVEN
CNAME114
	.STRING	"U114",0
	.EVEN
CNAME115
	.STRING	"U115",0
	.EVEN


**************************************************************************
*								         *
* 	RAM CHIP DATA							 *
*								         *
**************************************************************************

;
;	MAKE SURE THESE TABLES CORRESPOND WITH THE STUFF ABOVE
;

VRAMCHIPS:
;	COLOR RAMS

	RAM_CHIP 0,0, 8, 16, 1800008H, 180FFF8H
	RAM_CHIP 0,1, 8, 16, 1800000H, 180FFF0H

;	VIDEO RAMS
;	RAM_CHIP $MACRO TAB_LINK,CHIP_NO, WIDTH, INTERLEAVE, START_ADDR, END_ADDR 		

	RAM_CHIP 0,10, 4, 32, 0000018H, 01FFFF8H	; U30 ( 24 - 27 )
	RAM_CHIP 0,11, 4, 32, 0000010H, 01FFFF0H	; U31 ( 16 - 19 )
	RAM_CHIP 0,12, 4, 32, 0000008H, 01FFFE8H	; U32 (  8 - 11 )
	RAM_CHIP 0,13, 4, 32, 0000000H, 01FFFE0H	; U33 (  0 - 3  )
	RAM_CHIP 0,2, 2, 32, 000001CH, 01FFFFCH		; U10 ( 28 - 29 )
	RAM_CHIP 0,3, 2, 32, 0000014H, 01FFFF4H		; U11 ( 20 - 21 )
	RAM_CHIP 0,8, 2, 32, 000000CH, 01FFFECH		; U28 ( 12 - 13 )
	RAM_CHIP 0,9, 2, 32, 0000004H, 01FFFE4H		; U29 (  4 - 5  )

	.LONG	0

PALCHIPS:
;	VIDEO PALETTE RAMS
;	RAM_CHIP $MACRO TAB_LINK,CHIP_NO, WIDTH, INTERLEAVE, START_ADDR, END_ADDR 		

	RAM_CHIP 0,4, 4, 32, 0000018H, 01FFFF8H		; U12 (  24 - 27 )
	RAM_CHIP 0,5, 4, 32, 0000010H, 01FFFF0H		; U13 (  16 - 19  )
	RAM_CHIP 0,6, 4, 32, 0000008H, 01FFFE8H		; U14 (  8 - 11 )
	RAM_CHIP 0,7, 4, 32, 0000000H, 01FFFE0H		; U15 (  0 - 3  )


	RAM_CHIP 0,2, 2, 32, 000001EH, 01FFFFEH		; U10 ( 30 - 31 )
	RAM_CHIP 0,3, 2, 32, 0000016H, 01FFFF6H		; U11 ( 22 - 23 )
	RAM_CHIP 0,8, 2, 32, 000000EH, 01FFFEEH		; U28 ( 14 - 15 )
	RAM_CHIP 0,9, 2, 32, 0000006H, 01FFFE6H		; U29 (  6 - 7  )

	.LONG	0

;	SCRATCH RAMS

SRAMCHECK
	.STRING	"CHECKING SCRATCH RAMS",0
	.EVEN

SRAMCHIPS
	RAM_CHIP SRAM4,3, 4, 16, 1000000H, 10FFFF0H	; U69 (  0 - 3  )
	RAM_CHIP SRAM3,2, 4, 16, 1000004H, 10FFFF4H	; U68 (  4 - 7  )
	RAM_CHIP SRAM2,1, 4, 16, 1000008H, 10FFFF8H	; U67 (  8 - 11 )
	RAM_CHIP SRAM1,0, 4, 16, 100000CH, 10FFFFCH	; U66 ( 12 - 15 )

	.LONG	0

PROMCHIPS
	ROM_CHIP PROM1,0,0,0, 0FF800000H, 0FFFFFFF0H, 0FFFFH	; U105
	ROM_CHIP PROM2,1,0,0, 0FF800008H, 0FFFFFFF8H, 0FFFFH	; U89
	.LONG	0

	.SECT	"CKSUMS"
CHECKSUM0
	.WORD	0AE8DH		;U105 CHECKSUM
CHECKSUM1
	.WORD	0108BH		;U89 CHECKSUM

	.LONG	0		;CHECKSUM PATCH SPACE

	.TEXT

**************************************************************************
*								         *
* 		     IMAGE ROM CHECKSUM TABLES				 *
* 									 *
* 		NOTE: COMMENT OUT ANY UNSTUFFED PARTS THAT		 *
* 			EXIST BEFORE THE .LONG 0 TERMINATOR!		 *
*								         *
**************************************************************************
;	ROM_CHIP $MACRO TAB_LINK,CHIP_NO, WIDTH, INTERLEAVE, START_ADDR, END_ADDR, CHECK_SUM
IROMCHIPS
	.EVEN
	ROM_CHIP IROM13,13, 8, 0,  2000000H, 2FFFFFFH, 04D0AH	; U111
	ROM_CHIP IROM5, 5, 8, 1,  2000000H, 2FFFFFFH, 0E61AH	; U95
	ROM_CHIP IROM9, 9, 8, 2,  2000000H, 2FFFFFFH, 051CAH	; U106 

	ROM_CHIP IROM14,14, 8, 0,  3000000H, 3FFFFFFH, 0EEFBH	; U112
	ROM_CHIP IROM6, 6, 8, 1,  3000000H, 3FFFFFFH, 033A2H	; U96
	ROM_CHIP IROM10,10, 8, 2,  3000000H, 3FFFFFFH, 0463FH	; U107

	ROM_CHIP IROM15,15, 8, 0,  4000000H, 4FFFFFFH, 0BE4DH	; U113
	ROM_CHIP IROM7, 7, 8, 1,  4000000H, 4FFFFFFH, 0F573H	; U97
	ROM_CHIP IROM11,11, 8, 2,  4000000H, 4FFFFFFH, 04D87H	; U108

	.IF GERMAN

	ROM_CHIP IROM16,16, 8, 0,  5000000H, 5FFFFFFH, 0B12AH	; U114
	ROM_CHIP IROM8, 8, 8, 1,  5000000H, 5FFFFFFH, 00791H	; U99
	ROM_CHIP IROM12,12, 8, 2,  5000000H, 5FFFFFFH, 078A7H	; U109

	.ELSE

	ROM_CHIP IROM16,16, 8, 0,  5000000H, 5FFFFFFH, 0B581H	; U114
	ROM_CHIP IROM8, 8, 8, 1,  5000000H, 5FFFFFFH, 09779H	; U99
	ROM_CHIP IROM12,12, 8, 2,  5000000H, 5FFFFFFH, 0328AH	; U109

	.ENDIF

	.LONG	0		; FORCE IT TO STOP HERE

	.END

