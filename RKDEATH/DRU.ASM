***
*** FILE: DRU.ASM
*** DERBY RACE -- UTILITIES
***
*** JFL 24 SEP 92
***
	.MLIB	"APMACS.LIB"
	.FILE	"DRU.ASM"
	.TITLE	" <<< DERBY RACE -- UTIL >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**
** COMPILE FLAGS
**

***********************************************************************
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.	      *
* 		       ALL RIGHTS RESERVED.			      *
*								      *
***********************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"

** OTHERS USE
	.DEF	SREGXXX		;DRU.ASM
	.DEF	CREGXXX		;DRU.ASM
	.DEF	JLOCKED		;DRU.ASM
	.DEF	SQROOT		;DRU.ASM
	.DEF	CHECKSUM16	;DRU.ASM

** WE USE
	.REF	PREREGSTORE1	;DR.ASM
	.REF	REGSTORE1	;DR.ASM
	.REF	PREREGSTORE2	;DR.ASM
	.REF	REGSTORE2	;DR.ASM
	.REF	REGSTORE1FLAGS	;DR.ASM
	 
	.TEXT
	.EVEN

**
** DEFINES
**

JLOCKED
	JRUC	$
	RETS


**
** SREGXXX
**
** SAVE REGISTERS FOR CREGXXX
**
** A14 SCRATCHED
**
** JFL 20 SEP 92
**
SREGXXX
	MMTM	SP,B0
	MMTM	SP,A0
	MOVI	REGSTORE1,A14
	MMTM	A14,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13
	MOVE	B0,A0		;TO A FILE TO SAVE
	MMTM	A14,A0		;PUSH 
	MOVE	A14,B0
	MMTM	B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14
	MMFM	SP,A0
	MMFM	SP,B0
	RETS

RSAREGCOUNT	EQU	14		;ALL BUT A14
RSCOUNT		EQU	RSAREGCOUNT+15	;ALL BUT A14

**
** CREGXXX
**
** COMPARE REGISTERS AS SET IN SREGXXX
**
** IN
**  A14 SREG BITS
** OUT
**  A14 & EQ/NE FLAGS
**
** A BIT SET INDICATES IT IS OK IF THIS REGISTER CHANGES, AND THESE
** CHANGES ARE MASKED OUT BEFORE RETURNING.
** A14 & EQ/NE FLAGS ARE SET ON EXIT TO RESULT OF CHANGED REGISTERS AND'ED
** WITH THE MASK A14 ON ENTRY
**			      
** XXXB BBBB BBBB BBBB BBAA AAAA AAAA AAAA
** XXX1 1111 0000 0000 0011 1100 0000 0000
** XXX4 3210 9876 5432 1032 1098 7654 3210
**
** JFL 20 SEP 92
**
CREGXXX
	;SAVE ALL REGS AGAIN
	MOVL	A14,@REGSTORE1FLAGS
	MOVI	REGSTORE2,A14
	MMTM	A14,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13
	MOVE	B0,A0			;SAVE B0
	MMTM	A14,A0			;PUSH B0
	MOVE	A14,B0			;USE B0 FOR PUSH
	MMTM	B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14
	MOVE	B0,A1			;A1 AFTER NEW PUSH
	MOVE	A0,B0			;RESORE B0

	MOVE	A1,A0
	;SUBI	REGSTORE2-REGSTORE1,A0 ;A0 AFTER OLD PUSH (I WANT THIS)
	SUBI	REGSTORE2,A0		;(BUT IT WONT LET ME...)
	ADDI	REGSTORE1,A0		;(TRY THIS)

	MOVK	RSCOUNT,A4
	CLR	A14
CRLOOP
	SLL	1,A14			;SHIFT RESULT

	;REG USE
	;  A0 ORG REGSTORE PTR
	;  A1 NEW REGSTORE PTR
	;  A2 ORG
	;  A3 NEW
	;  A4 COUNT
	; A14 RESULT BITS
	;
	MMFM	A0,A2
	MMFM	A1,A3
	CMP	A2,A3
	JREQ	CRSAME
	INC	A14			;SET LOW BIT
CRSAME
	DSJS	A4,CRLOOP

	;MASK OUT CHANGES WE DONT CARE ABOUT 
	MOVL	@REGSTORE1FLAGS,A0
	ANDN	A0,A14

	;RESORE REGS WE USED
	MMTM	SP,A14
	MOVI	REGSTORE2-(20H*RSAREGCOUNT),A14
	MMFM	A14,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13
	MMFM	SP,A14
	
	MOVE	A14,A14			;SET Z / NZ FLAG
	RETS

**************************************************************************
*												*
*  SQROOT											*
*												*
*  Eugene's BRILLIANT square root routine !!                             *
*												*
*  Input:   A3 = 32 bit number (unsigned)							*
*  Returns: A3 = 16 bit square root (integer)						*
*
* JFL 21 OCT 92; CHANGED TO USE A3
*												*
**************************************************************************
SQROOT	      
	MMTM	SP,A1,A4,A5
	LMO	A3,A2		;FIND # OF BITS
	SUBK	31,A2
	NEG	A2
	ADDK	2,A2
	SRL	1,A2		;GET RID OF GARBAGE
	MOVI	32,A1
	SUB	A2,A1
	NEG	A1
	MOVK	1,A4
	RL	31,A4		;SET MSB IN A5
	SRL	A1,A4
	MOVE	A4,A1
SQRL
	SRL	1,A1
	JREQ	SQRX		;FINISHED ITERATING
	MOVE	A4,A5
	MPYU	A4,A5
	CMP	A5,A3	
	JRLO	SQR1
	JREQ	SQRX
	ADD	A1,A4
	JRUC	SQRL
SQR1	
	SUB	A1,A4	
	JRUC	SQRL
SQRX	
	MOVE	A4,A3
	MMFM	SP,A1,A4,A5
	RETS

**
** CHECKSUM16
**
** IN
**   A2 START
**   A3 NUMBER OF WORDS
** OUT
**   A2 VALUE (32BITS)
**
CHECKSUM16
	MMTM	SP,A0,A1,A4
	CLR	A0	
	MOVI	0DEADBEEFH,A1
	MOVI	052236160H,A4
CS16LOOP
	MOVW	*A2+,A14
	ADD	A14,A0
	ADD	A14,A1
	XOR	A4,A1
	RL	1,A4
	DSJS	A3,CS16LOOP

	MOVE	A0,A2
	XOR	A1,A2
	MMFM	SP,A0,A1,A4
	RETS

* EOF
