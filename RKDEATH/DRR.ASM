***
*** FILE: DRR.ASM
*** RUNNER STUFF
***
*** JFL 24 MAR 93
*** JFL 15 APR 93; TOSS UP
***
	.MLIB	"APMACS.LIB"
	.FILE	"DRR.ASM"
	.TITLE	" <<< DERBY RACE -- RUNNER >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**
** COMPILE FLAGS
**

***********************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
*************************************************************************

*	GET THE SYSTEM STUFF
	.INCLUDE	"AP.H"
	.INCLUDE	"DR.I"
	.INCLUDE	"DRINP.I"
	.INCLUDE	"IMGTBLC2.GLO"

**
** CHECK SOME STUFF
**

** OTHERS USE
	.DEF	RUNNERPROC	;DRR.ASM
	.DEF	TOSSRUNNERUP	;DRR.ASM
	
** WE USE
	.REF	VECTORTOVELS	;DR.ASM
	.REF	FEELRUNNER	;DRI.ASM

** WE USE -- RAM

**
** DEFINES
**

**
** PROCESS DATA FOR THE RUNNER
**
** JFL 24 MAR 93
**
PRWHEELDIR	EQU	PDATA+000H	;SHW WHEEL DIR
PRVEL		EQU	PDATA+010H	;UHW VEL
PRIMG		EQU	PDATA+020H	;UHL
PRDELAY		EQU	PDATA+040H	;UHW
PRSIZE		EQU	PDATA+060H	; SIZE (KEEP LONG ALIGNED FOR CLR)

**
** RUNNERPROC -- PROCESS
**
** IN
**   A8 OBJ
**   A9 CD
**
** JFL 24 MAR 93
**
RUNNERPROC		    	

	;CLEAR OUT OUR STRUCT
	MOVE	A13,A0
	ADDI	PDATA,A0
	MOVI	PRSIZE/32,A1
	CLR	A14
RPCLR
	MOVL	A14,*A0+
	DSJ	A1,RPCLR

	;RPWAITLAND
	SLEEP	1
	;MOVL	*A8(OYACC),A14
	;JRNZ	RPWAITLAND

      	NOP
RPLOOP
	;
	;STEERING
	;

	;USE INPUT BLOCK FOR THIS PLAYER
	MOVL	*A9(CDINPDATA),A0 	;INPUT DATA

	;WHEEL RESPONSE
	;MOVL	*A9(CDFEEL),A1
	MOVI	FEELRUNNER,A1
	MOVW	*A1(FWHEELRESPONSE),A3

	;GET STEERING WHEEL -- PLAY WITH RESPONSE
	MOVW	*A0(INPWHEELMAG),A2		;MAGNITUDE
	JRZ	RPGOTMAG
	JRN	RPWRNEG

	;ADD IN STEERING RESPONSE
	ADD	A3,A2
	JRUC	RPGOTMAG

RPWRNEG
	;ADD IN STEERING RESPONSE
	SUB	A3,A2
	
RPGOTMAG
	;ACCUMULATE MAG TO GET DIR
	MOVW	*A13(PRWHEELDIR),A10		;CUMULATIVE DIRECTION
	ADD	A2,A10
	
	;TURN WHEEL CUMULATIVE VALUE INTO A DIR 0..FF
	MOVW	A10,*A13(PRWHEELDIR)
	SLL	SL_WHLRESPONSE,A10
	SRL	SR_WHLDIR,A10

	;CHECK FOR IN THE AIR
	MOVL	*A8(OYACC),A14
	JRZ	RPONGROUND

	;FLYING	SLOW DOWN
	MOVW	*A13(PRVEL),A11
	SUBK	3,A11
	JRP	RPFLYP
	CLR	A11
RPFLYP
	MOVW	A11,*A13(PRVEL)
	JRUC	RPLEAPING

RPONGROUND
	;
	;PEDAL
	;
	MOVW	*A0(INPPEDAL),A11
	CMPI	30,A11
	JRHS	RPNOTSTOP

	;STOP QUICKER
	MOVW	*A13(PRVEL),A14
	MOVE	A14,A2
	SRL	3,A14
	SUB	A14,A2
	MOVW	A2,*A13(PRVEL)
RPNOTSTOP
	
	;GEAR DATA
	;MOVL	*A9(CDFEEL),A0
	MOVI	FEELRUNNER,A0
	MOVE	A0,A3	     		;GEAR DATA
	MOVB	*A3(FGEARPEDMULSL),A14	;PED MULTIPLIER
	SLL	24,A14			;DROP SIGN BITS
	SRL	24,A14
	SETF	8,0,1			;NOT-SO-SLOW MUL
	MPYU	A14,A11			;PEDAL * PEDMUL
	SRA	PELMULFRACBITS,A11
	SETF	32,1,1			;RESTORE
	MOVW	*A13(PRVEL),A4		;V
	SUB	A4,A11			;(PEDAL * PEDMUL) - V
	MOVB	*A3(FGEARACCMULSL),A14	;ACC MULTIPLIER
	JRNN	RPAMNN
	SRA	A14,A11			;((PEDAL*PEDMUL)-V)/ACCMUL
	JRNZ	RPAMADD			;GUARD AGAINST FRACTIONS TURNING TO 0
	INC	A11			;NEG VALUES NEVER SRA TO 0
	JRUC	RPAMADD
RPAMNN
	SLL	A14,A11			;((PEDAL*PEDMUL)-V)*ACCMUL
RPAMADD
	ADD	A4,A11			;V+(((PEDAL*PEDMUL)-V)*ACCMUL)

	;MAKE SURE NEW SPEED IS IN RANGE
	JRN	RPCKMIN		;CHECK MIN & MAX SPEEDS
	MOVW	*A0(FVELMAXPOS),A14
	CMP	A14,A11
	JRLE	RPVUSE
	MOVE	A14,A11
	JRUC	RPVUSE
RPCKMIN
	MOVW	*A0(FVELMAXNEG),A14
	CMP	A14,A11
	JRGE	RPVUSE
	MOVE	A14,A11
RPVUSE
	MOVW	A11,*A13(PRVEL)

RPLEAPING
	;SAVE DIR & MAG FOR LATER
	MOVE	A10,A4
	MOVE	A11,A5

	;TURN DIR & MAG INTO X&Z VELS
	CALLR	VECTORTOVELS ;IN:A10,A11 DIR,MAG OUT:A10,A11 X,Z 
	SLL	VELSHIFT,A10
	SLL	VELSHIFT,A11
	MOVL	A10,*A8(OXVEL)
	MOVL	A11,*A8(OZVEL)

	;
	;CHANGE IMAGE BASED ON DIR & VEL
	;

	;CHECK FOR VEL
	MOVE	A5,A14
	SUBK	20,A14			;CUTOFF SPEED FOR STANDING VS RUNNING
	JRP	RPRUNNING

RPSTANDING
	;RESET STATE
	CLR	A2
	MOVW	A2,*A8(OSTATE)
	MOVW	A2,*A13(PRDELAY)

	;GET STANDING IMAGE FOR THIS DIR
	SRL	8-3,A4			;DIR TO 0..7
	SLL	RUNIMGSIZEOF,A4
	ADDI	RUNNERSTAND,A4

	.IF DEBUG
	CMPI	RUNNERSTANDX,A4
	TLOCKON	HS
	.ENDIF ;DEBUG

	JRUC	RPSETIMG

RPRUNNING

	;GET RUNNING IMAGE FOR THIS DIR
	SRL	8-3,A4			;DIR TO 0..7
	SLL	RUNIMGSIZEOF,A4
	
	;GET STATE
	MOVW	*A8(OSTATE),A2
	MOVE	A2,A3
	SLL	RUNIMGSTATESIZEOF,A2
	ADD	A2,A4
	ADDI	RUNNERRUN,A4

	;CHECK IF ITS TIME TO CHANGE FRMAE
	MOVW	*A13(PRDELAY),A1
	DEC	A1
	MOVW	A1,*A13(PRDELAY)
	JRP	RPRSOK			;NOT TIME TO CHANGE STATE
	
	;SET DELAY BASED ON VEL
RUNVELTODELAY	EQU	8
	SRL	RUNVELTODELAY,A5
	SUBK	6,A5
	NEG	A5
	MOVW	A5,*A13(PRDELAY)

	;SET UP FOR NEXT STATE
	INC	A3
	CMPI	RUNIMGSTATECOUNT,A3
	JRLO	RPRSOK
	CLR	A3
RPRSOK
	MOVW	A3,*A8(OSTATE)
	
	.IF DEBUG
	CMPI	RUNNERRUNX,A4
	TLOCKON	HS
	.ENDIF ;DEBUG
	
RPSETIMG
	;IS THIS THE SAME IMG WE ALREADY HAVE
	MOVL	*A13(PRIMG),A14
	CMP	A4,A14
	JREQ	RPSIDONE
	MOVL	A4,*A13(PRIMG)
	
	;CHANGE IMG
	MOVL	*A4+,A1			;GET IMG
	MOVL	A1,*A8(OIMG)
	MOVL	*A1(ISIZE),A14
	MOVL	A14,*A8(OSIZE)
	MOVL	A14,*A8(OUSIZE)
	MOVL	*A1(ISAG),*A8(OSAG)
	MOVW	*A4,A2			;GET CTRL & FLIP
	MOVW	*A1(ICTRL),A14		;GET BPP
	OR	A2,A14	
	MOVW	A14,*A8(OCTRL)

	MOVL	*A1(IANIOFF),A14
	MOVL	A14,*A8(OANIOFF)
	MOVL	A14,*A8(OUANIOFF)

	CLR	A14
	MOVW	A14,*A8(OSCALEMUL)
RPSIDONE

RPXXX
	SLEEP	1
	JRUC	RPLOOP

**
** TOSSRUNNERUP
**
** IN
**   A2 RUNOBJ
**   A3 VEL (1..255 4 BITS INT, 4 BITS FRAC)
**
** JFL 15 APR 93
**
TOSSRUNNERUP
	MMTM	SP,A1
    	
	;CHECK IF ALREADY UP
	MOVW	*A2(OYPOS),A14
	CMPI	-20,A14			;LOWER GETS TOSSED UP
	JRLT	TRUX			;HIGHER KEEPS OLD TOSS

	;MUL TO GET TOSS VEL
	MOVW	*A2(OSCALEMUL),A1
	SETF	8,0,1
	MPYU	A3,A1
	SETF	32,1,1
	
	;SHIFT TO MAKE A REAL VEL
	SLL	12-MPYSCALE,A1		;INT & FRAC SHIFT
	NEG	A1			;UP
	MOVL	A1,*A2(OYVEL)

	;MAKE YACC
	NEG	A1			;DOWN
	SRL	5,A1
	JRNZ	TRUNZ

	MOVK	1,A1
TRUNZ
	MOVL	A1,*A2(OYACC)
	

TRUX
	MMFM	SP,A1
	RETS

RUNIMGSIZEOF		EQU	6	; SIZEOF ONE IMG SHIFT
RUNIMGSTATESIZEOF	EQU	9	; SIZEOF A STATE SHIFT
RUNIMGSTATECOUNT	EQU	7	; NUMBER OF STATES

**
** RUNNER IMAGE TABLES
**
** JFL 25 MAR 93
**
RUNNERSTAND
	.LONG	standC
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	standB
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	standA
	.WORD	DMAWNZ
	.WORD	0
	.LONG	standB
	.WORD	DMAWNZ
	.WORD	0
	.LONG	standC
	.WORD	DMAWNZ
	.WORD	0
	.LONG	standD
	.WORD	DMAWNZ
	.WORD	0
	.LONG	standE
	.WORD	DMAWNZ
	.WORD	0
	.LONG	standD
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
RUNNERSTANDX

RUNNERRUN
	.LONG	runmanC1
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanB1
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanA1
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanB1
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanC1
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD1
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanE1
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD1
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0

	.LONG	runmanC2
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanB2
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanA2
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanB2
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanC2
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD2
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanE2
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD2
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0

	.LONG	runmanC3
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanB3
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanA3
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanB3
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanC3
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD3
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanE3
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD3
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0

	.LONG	runmanC4
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanB4
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanA4
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanB4
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanC4
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD4
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanE4
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD4
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0

	.LONG	runmanC5
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanB5
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanA5
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanB5
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanC5
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD5
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanE5
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD5
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0

	.LONG	runmanC6
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanB6
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanA6
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanB6
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanC6
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD6
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanE6
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD6
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0

	.LONG	runmanC7
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanB7
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
	.LONG	runmanA7
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanB7
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanC7
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD7
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanE7
	.WORD	DMAWNZ
	.WORD	0
	.LONG	runmanD7
	.WORD	M_FLIPH|DMAWNZ
	.WORD	0
RUNNERRUNX
		       

* EOF
