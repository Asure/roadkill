***
*** FILE: APSND.ASM
***
*** JFL 23 NOV 92; SETF FOR MPYUS
*** JFL 07 DEC 92
***

	.MLIB	"APMACS.LIB"
	.FILE	"APSND.ASM"
	.TITLE	"<<< AMUSEMENT PARK ---- SOUND PROCESSOR >>>"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

**************************************************************************
*								         *
* 	COPYRIGHT (C) 1992 MIDWAY MANUFACTURING COMPANY.		 *
* 		       ALL RIGHTS RESERVED.				 *
*								         *
**************************************************************************

	.INCLUDE	"AP.H"		;Game equates

** OTHERS USE
	.DEF	SNDPRC
	.DEF	SNDRES
	.DEF	ONESND

** WE USE
	.REF	SOUND_COPY
	.REF	SOUNDSUP

	.TEXT
*
*SOUND PROCESSOR MAKES SOUNDS FOR N-CHANNELS (CURRENTLY 6):
*
*		CHANNEL #0	OKI CHANNEL 3
*		CHANNEL #1	OKI CHANNEL 4
*		CHANNEL #2	YAMAHA SOUNDS
*		CHANNEL #3	MUSIC	      
*		CHANNEL #4	OKI CHANNEL 1 (PLAYER 1)
*		CHANNEL #5	OKI CHANNEL 2 (PLAYER 2)
*
*THE ROUTINE "SNDRES" MUST BE CALLED TO INITAILIZE SOUND BOARD
*ALSO SCRATCHPAD RAM MUST BE INITIALIZED TO ZERO
*THE ROUTINE "SNDPRC" MUST BE CALLED EVERY 16MSEC. IN THE MAIN PROGRAM LOOP
*(THE SAME PLACE WHERE "PRCDSP" IS NORMALLY CALLED)
*MAKING A SOUND:
*
*SOUND TABLE FORMAT
*
*SOUND DESCRIPTION:
*	.WORD PRIORITY, TIME, SOUND CODE, (PRIORITY), (TIME), (SOUND CODE), 0
*
*SOUND ENDS IN 0000.
*PRIORITY WORD = 1111ISNNNPPPPPPP
*I=1=NON-INTERRUPTABLE
*S=1=NON-INTERRUPTABLE BY SAME PRI, ELSE SND IS OVERRIDDEN BY SAME PRI
*N=CHANNEL #(0-7);
*P=PRIORITY (00-7F), 7F=HIGHEST.
*TIME WORD =TTTT (0000-7FFF X 16MS).
*SOUND WORD =8SSS SSS=SOUND CODE(000-FFF).
*SOUND WORD =4SSS SSS=SOUND CODE (ZERO TIME SOUND CODE)
*EXAMPLE 1:
*
*	MOVI	SND1,A0		;LOAD ABSOLUTE ADDRESS OF SND1 IN A0
*	CALLA	ONESND		;MAKE ONE SND1
*
*SND1:	.WORD	0F07FH,00100H,08088H,0	
*
*SND1 IS FOR CHANNEL=0, PRIORITY=7F (HIGHEST), TIME = 100H X 16MSEC.
*SOUND CODE = 88H
*SND1 WILL MAKE ONE SOUND 88H, AND NOT ALLOW IT TO BE INTERRUPTED 
*FOR 100H X 16MSEC., EXCEPT BY A SOUND OF EQUAL OR GREATER PRIORITY ON
*CHANNEL 0
*
*	MOVI	SND2,A0		;LOAD SND2 ADDRESS
*	MOVK	3,A1		;REPEAT IT 3 TIMES
*	CALLA	SNDLD		;GO DO IT
*SND2:	.WORD	0F311H,00020H,08044H,08044H,0
*
*SND2 IS ON CHANNEL 3, PRIORITY 11H. IT WILL MAKE ONE SOUND 44H, WAIT
*20H X 16 MSEC., THEN MAKE ANOTHER SOUND 44H, WHICH CANNOT BE INTERRUPTED
*FOR 20H X 16 MSEC., EXCEPT BY A SOUND OF EQUAL OR GREATER PRIORITY ON
*CHANNEL 3
*
*SINCE A1 IS LOADED WITH A REPEAT COUNT OF 3, THIS PROCESS WILL BE REPEATED
*THREE TIMES. THE END RESULT WILL BE 6 SOUND 44H SEPERATED BY 20H X 16MSEC.
*
*NOTE: THE CHANNEL SPECIFIED BY "MUSICHAN" WILL CAUSE THE MUSIC SECTION OF
*	THE SOUND BOARD TO BE STROBED.
*
SNDPRI	.SET	0  	;PRIORITY (00=LOWEST, FF=HIGHEST)
SNDTIM	.SET	010h	;TIMER 000-7FFF
SNDTMR	.SET	020h	;TIMER COUNTDOWN
SNDST	.SET	030h	;ADDRESS OF SOUND TABLE START
SNDPTR	.SET	050h	;POINTER TO SOUND TABLE DATA
SNDREP	.SET	070h	;REPEAT COUNT OF SOUND
*NOTE: IF YOU CHANGE SNDSIZ, MAKE SURE ANY CODE THAT USES IT AS A DIVISOR 
*	PERFORMS THE CORRECT OP. CURRENTLY IT IS A POWER OF 2 SO SRL IS USED.
SNDSIZ	.SET	080h
SNDSIZEOF	EQU	7	; SIZEOF SHIFT

SL_CHANNEL	.EQU	6+16	;SHIFTS REQUIRED TO ISOLATE CHANNEL NUMBER
SR_CHANNEL	.EQU	29
B_SNDINT	EQU	11	;SOUND ISNT INTERRUPTABLE
B_SNDINTEQ	EQU	10	;SND ISNT INTERRUPTABLE BY SAME PRI
SL_SNDPRI	EQU	25	;ISOLATE PRI
SR_SNDPRI	EQU	25	;ISOLATE PRI

NCHAN		EQU	6	;DECLARE NUMBER OF ALLOWED CHANNELS
MUSICHAN	EQU	3	;THIS CHANNEL IS FOR THE TUNES

*THESE STROBE EQUATES ARE FOR THE PINBALL SOUND CARD
RESETBIT	EQU	0100H	;THIS IS THE SOUND RESET BIT
SOUNDBIT	EQU	0200H	;THIS IS THE SOUND BOARD STROBE

EXTENDED_CODE	.EQU	7AH	;SEND THIS TO INDICATE EXTENDED SOUND CALL

	.BSS	SNDSTR,NCHAN*SNDSIZ	;RESERVE STORAGE AREA
	.BSS	SNDEND,0		;END OF SOUND PROCESSOR RAM

**************************************************************************
*								         *
* A_SOUND - ANIM FUNC TO MAKE A SOUND CALL				 *
* A8 = PTR TO OBJECT							 *
* *A8(AnimFrm),L = PTR TO SOUND SCRIPT					 *
* NOTE: ANIM FUNCS DO NOT PUSH REGISTERS!				 *
*								         *
**************************************************************************
A_SOUND
	CALLA	GETAFARG_LONG
	CALLR	ONESND
	RETS

**************************************************************************
*                                                                        *
* CLRSNDDB - CLEAR THE SOUND PROCESSOR DATA BASE			 *
*                                                                        *
**************************************************************************
CLRSNDDB
	MMTM	SP,A0,A1
	MOVI	SNDSTR,A1	
	CLR	A0
CLRSDBL
	MOVE	A0,*A1+,W
	CMPI	SNDEND,A1
	JRLO	CLRSDBL
	MMFM	SP,A0,A1
	RETS

**************************************************************************
*								         *
* ONESND - MAKE ONE SOUND						 *
* A0 = PTR TO SOUND SCRIPT (0 = NO SOUND, JUST RETURN)			 *
* RETURNS:								 *
* A0 = SAME								 *
* 	 Z = SOUND CALL WAS MADE SUCCESSFULLY				 *
* 	NZ = SOUND CALL WAS NOT MADE					 *
*								         *
* JFL 07 DEC 92
**************************************************************************
ONESND:
	PUSH	A1
	MOVE	A0,A0		;DID HE CALL WITH A NULL?
	JRZ	ONESND_FAIL	;BR = YES

	MOVK	1,A1
	CALLR	SNDLD

ONESND_X
	PULL	A1
	RETS

ONESND_FAIL
	CLRZ
	JRUC	ONESND_X

**************************************************************************
*								         *
* SNDLD - SOUND LOADER							 *
* A0=SOUND TABLE ADDRESS						 *
* A1=REPEAT COUNT							 *
* RETURNS								 *
* 	 Z = SOUND WAS MADE						 *
* 	NZ = SOUND CALL DID NOT MAKE IT					 *
*								         *
* JFL 07 DEC 92
**************************************************************************
*
*SOUND DESCRIPTION= PRIORITY,TIME,SOUND CODE,(PRIORITY),(TIME),(SOUND CODE),0
*SOUND ENDS IN ZERO
*PRIORITY WORD = 1111ISNNNPPPPPPP
*I=1=NON-INTERRUPTABLE
*S=1=NON-INTERRUPTABLE BY SAME PRI SND, ELSE IT IS
*N=CHANNEL #(0-7);
*P=PRIORITY (00-7F), 7F=HIGHEST.
*TIME WORD =TTTT (0000-7FFF X 16MS).
*SOUND WORD =8SSS SSS=SOUND CODE(000-FFF).
*SOUND WORD =4SSS SSS=SOUND CODE (ZERO TIME SOUND CODE)
*
SNDLD
	MMTM	SP,A0,A1,A2,A3,A4,A5
	MOVW	@SOUNDSUP,A4
	JRNZ	SNDLDX		;SOMEBODY SAYS NO!

	MOVW	*A0,A3		;GET PRIORITY
	MOVE	A3,A2
	SLL	SL_CHANNEL,A3
	SRL	SR_CHANNEL,A3	;EXTRACT CHANNEL BITS
	SLL	SNDSIZEOF,A3	;SIZEOF SND REC
	ADDI	SNDSTR,A3 	;CALC RAM CHANNEL ADDRESS
	MOVE	*A3(SNDPRI),A4 	;GET CURRENT PRIORITY
	BTST	B_SNDINT,A4	;CURRENT SOUND NON-INTERRUPTABLE ?
	JRNE	SNDLDX		;YES, CAN NEW SOUND
	MOVE	A2,A5		;EXTRACT PRIORITY
	SLL	SL_SNDPRI,A5
	SRL	SR_SNDPRI,A5
	SLL	SL_SNDPRI,A4
	SRL	SR_SNDPRI,A4
	CMP	A5,A4		;NEW ONE GREATER OR EQUAL?
	JRHI	SNDLDX		;OLD ONE IS GREATER, FORGET NEW SOUND
	JRLO	SNDLD1		;NEW ONE IS GREATER, DO IT
	MOVW	*A3(SNDPRI),A4	;INTERRUPTABLE BY EQUAL?
	BTST	B_SNDINTEQ,A4	
	JRNE	SNDLDX		;NON-INTERRUPTABLE BY EQUAL, CAN NEW GUY
SNDLD1
	MOVE	A0,A4
	MOVE	A3,A0			;CHANNEL RAM ADDRESS
	MOVL	A4,*A0(SNDPTR)		;SETUP SOUND DATA POINTER (ROM)
	MOVL	A4,*A0(SNDST)	 	;SETUP SOUND START POINTER
	MOVW	A1,*A0(SNDREP)		;REPEAT COUNT       
	CALLR	SNDUPD			;START SOUND GOING
	SETZ				;FLAG THE FACT THAT WE MADE IT
SNDLDX
 	MMFM	SP,A0,A1,A2,A3,A4,A5
	RETS

*
*SOUND PROCESSOR CALLED EVERY 16 MSEC.
*
SNDPRC:	
	MOVI	SNDSTR,A0
	MOVK	NCHAN,A1
SNDLP0:
	MOVE	*A0(SNDTMR),A2 	;CHECK TIMER
	JREQ	SNDPLP		;EQUAL, INACTIVE CHANNEL
	DEC	A2
	MOVE	A2,*A0(SNDTMR)	;DEC TIME
	JRNE	SNDPLP		;NO TIMEOUT
	CALLR	SNDUPD		;UPDATE SOUND
SNDPLP:
	ADDI	SNDSIZ,A0
	DSJ	A1,SNDLP0
	RETS

*
*UPDATE SOUND
*A0=POINTER TO SOUND CHANNEL RAM
*
SNDUPD:
SNDUP0:
        MOVE	*A0(SNDPTR),A2,L	;GET POINTER TO ROM TABLE
SNDUP1:	
	MOVE	*A2+,A3		;GET NEXT ROM TABLE ENTRY
	JREQ	SNDUP5		;END OF SOUND
*CHECK FOR PRIORITY
	CMPI	-01000H,A3
	JRLO	SNDUP2		;NOT PRIORITY CHANGE
	MOVE	A3,*A0(SNDPRI)	;UPDATE PRIORITY
	JRUC	SNDUP1		;GO GET NEXT ONE
*CHECK FOR SOUND CODE
SNDUP2:	
	CMPI	4000H,A3
	JRLO	SNDUP3
	CMPI	-08000H,A3
	JRHS	SNDUP2A

	MOVE	A0,A5
	SUBI	SNDSTR,A5
	SRL	SNDSIZEOF,A5	;DIVIDE BY 128
	CALLR	SNDSND		;SEND SOUND CODE
	JRUC	SNDUP1		;GET THE NEXT ONE BOYS
SNDUP2A:	
	MOVE	A0,A5
	SUBI	SNDSTR,A5

	SRL	SNDSIZEOF,A5	;DIVIDE BY 128
**************************************************************************
*                                                                        *
* 	MOVI	SNDSIZ,A6	;IF SNDSIZ IS NOT A POWER OF 2,	       	 *
* 	DIVU	A6,A5		;USE DIVIDE TO CALCULATE SOUND CHANNEL # *
*                                                                        *
**************************************************************************
	CALLR	SNDSND		;SEND SOUND CODE

	MOVE	*A0(SNDTIM),*A0(SNDTMR)
	MOVE	A2,*A0(SNDPTR),L	;STORE POINTER
	RETS
*TIMER VALUE X 16MSEC.
SNDUP3:
	MOVE	A3,*A0(SNDTIM)	
	MOVE	A3,*A0(SNDTMR)
	JRUC	SNDUP1		;SET TIMER VALUE, AND GO GET NEXT
*CHECK FOR REPEATERS
SNDUP5:
	MOVE	*A0(SNDREP),A3	;CHECK REPEAT COUNT
	DEC	A3
	MOVE	A3,*A0(SNDREP)
	JREQ	SNDUP6		;ALL OVER
	MOVE	*A0(SNDST),*A0(SNDPTR)
	JRUC	SNDUP0		;START SOUND OVER
*SOUND IS OVER CLEAR THE CHANNEL
SNDUP6:
	CLR	A2
	MOVE	A2,*A0(SNDPRI)	;CLEAR SOUND PRIORITY	
	MOVE	A2,*A0(SNDST),L	;CLEAR SOUND PTR 
SNDUPX:
	RETS

**************************************************************************
*								         *
* SNDSND - RAW HARDWARE SOUND CALL					 *
* A3=SOUND CODE B0-B7							 *
* A5=SOUND CHANNEL #							 *
* RETURNS:								 *
* 	NOTHING								 *
* NOTE: TRASHES A14							 *
*								         *
**************************************************************************
SNDSND:
	MMTM	SP,A0,A3

	SLL	20,A3
	SRL	20,A3		;STRIP OFF BITS
	CMPI	100H,A3		;IS THIS AN EXTENDED SOUND CALL?
	JRLO	SNDSND_BASE	;BR = NO
	MOVE	A3,A0
	MOVI	EXTENDED_CODE,A3	;SEND THE EXTENDED FEATURE
	CALLR	SNDSND
	MOVE	A0,A3
	SLL	24,A3
	SRL	24,A3
SNDSND_BASE
*DEBUG SOUND CATCHER
****	CMPI	0C3H,A3
****	LOCKON	EQ

	MOVE	@SOUND_COPY,A0,W
	SRL	8,A0
	SLL	8,A0
	ADD	A3,A0
	MOVE	A0,@SOUND,W	;PUT SOUND CALL ON THE LINE
	.IF TUNIT

	MOVE	A0,@SOUND_COPY,W

	.ELSE

	MOVI	(1*MICRO_SECOND)/2,A14
	DSJS	A14,$		;SETTLE THE LINES

	ANDNI	SOUNDBIT,A0
	MOVE	A0,@SOUND,W	;HIT STROBE

	MOVI	8,A14
	DSJS	A14,$		;SLOW IT DOWN A BIT

	ORI	SOUNDBIT|RESETBIT,A0
	MOVE	A0,@SOUND_COPY,W
	MOVE	A0,@SOUND,W	;BRING IT ALL BACK TO NORMAL

	.ENDIF

	MOVI	8,A14
	DSJS	A14,$		;LET SOUND BOARD REACT

	MOVB	@TALKPORT+B_SIRQ-7,A14		;ARE WE CONNECTED?
	JRN	SS_DEFAULT_WAIT			;BR = NO

****	MOVI	390,A0		;MAX FIRQ DELAY ON SOUND BOARD IS 180 micros
****	DSJS	A0,$

	MOVI	(180*MICRO_SECOND)/2,A0		;MAX IRQ DELAY FOR SOUND BOARD
SS_IRQ_WAIT
	MOVB	@TALKPORT+B_SIRQ-7,A14		;DID SOUND BOARD SERVICE?
	JRN	SS_X				;BR = YES
	DSJS	A0,SS_IRQ_WAIT
SS_X
	MMFM	SP,A0,A3
	RETS	

*COME HERE BECAUSE SOUND BOARD IRQ REQUEST WAS NOT DETECTED
SS_DEFAULT_WAIT
	MOVI	(180*MICRO_SECOND)/2,A0		;MAX IRQ DELAY FOR SOUND BOARD
	DSJS	A0,$
	MMFM	SP,A0,A3
	RETS	

**************************************************************************
*								         *
* SNDRES - FULL SOUND BOARD RESET, SOUND CHECKSUMS ARE REPORTED.	 *
* 									 *
* NOTE: TRASHES A14							 *
*								         *
**************************************************************************
	.DEF	SNDRES
SNDRES:
	PUSH	A0
	GETST	A14
	DINT
	MOVE	@SOUND_COPY,A0,W
	ANDNI	RESETBIT,A0
	MOVE	A0,@SOUND_COPY,W
	MOVE	A0,@SOUND,W
	PUTST	A14

****	MOVI	100,A0			;WAIT FOR IT TO CATCH
	MOVI	(30*MICRO_SECOND)/2,A0	;WAIT FOR SOUND BOARD TO CATCH
	DSJS	A0,$	

	GETST	A14
	DINT
	MOVE	@SOUND_COPY,A0,W
	ORI	RESETBIT|SOUNDBIT,A0
	MOVE	A0,@SOUND_COPY,W
	MOVE	A0,@SOUND,W
	PUTST	A14

	MOVI	(1*MICRO_SECOND)/2,A0	;SETTLE TIME
	DSJS	A0,$	

	PULLQ	A0
	RETS

**************************************************************************
*								         *
* IS_SOUND - CHECK SOUND DATA BASE TO SEE IF THE GIVEN SOUND SCRIPT	 *
* 		IS CURRENTLY BEING PROCESSED. (I.E. ANOTHER SOUND	 *
* 		HAS OR HAS NOT TAKEN OVER.)				 *
* A0 = PTR TO SOUND SCRIPT						 *
* RETURNS								 *
* 	 Z = SAME SCRIPT						 *
* 	NZ = SCRIPT NO LONGER ACTIVE					 *
*								         *
* JFL 07 DEC 92
**************************************************************************
IS_SOUND		
	PUSH	A3
	MOVW	*A0,A14		;GET CHANNEL/PRIORITY WORD
	SLL	SL_CHANNEL,A14
	SRL	SR_CHANNEL,A14	;EXTRACT CHANNEL BITS
	SLL	SNDSIZEOF,A14
	ADDI	SNDSTR,A14 	;GET THE CORRECT RAM CHANNEL ADDRESS
	MOVL	*A14(SNDST),A14
	CMP	A0,A14		;SAME SCRIPT ACTIVE?
	PULL	A3
	RETS

**************************************************************************
*                                                                        *
* CKSNDPRI - CHECK SOUND CHANNEL FOR EXISTANCE OF A GIVEN SOUND PRIORITY *
* A0 = CHANNEL #							 *
* A1 = SOUND PRIORITY							 *
* RETURNS:								 *
* CARRY CLEAR = PRIORITY NOT ACTIVE					 *
* CARRY SET = PRIORITY ACTIVE						 *
*                                                                        *
* JFL 07 DEC 92
**************************************************************************
CKSNDPRI
	MMTM	SP,A0,A2
	MOVI	SNDSTR,A2
	SLL	SNDSIZEOF,A0		;CHANNEL x 128
	ADD	A2,A0			;OFFSET TO CORRECT CHANNEL AREA
	MOVB	*A0,A0
	CMP	A0,A1
	JRNE	CKSPRI1			;BR = PRIORITY NOT ACTIVE
	SETC
	MMFM	SP,A0,A2
	RETS
CKSPRI1
	CLRC
	MMFM	SP,A0,A2
	RETS

**************************************************************************
*                                                                        *
* QSNDRST - QUIET SOUND RESET, NO DIAGNOSTIC DONGERS			 *
*                                                                        *
**************************************************************************
	.DEF QSNDRST
QSNDRST
	MMTM	SP,A3,A5
	CALLR	SNDRES		;RESET THE BOARD
	MOVI	(30*MICRO_SECOND)/2,A0	;NEED 30 micros TO SERVICE
	DSJS	A0,$	
	CLR	A3
	CLR	A5
	CALLR	SNDSND		;PEND ON DIG SIDE
	MOVK	MUSICHAN,A5
	CALLR	SNDSND		;PEND ON YAMAHA SIDE	
	MMFM	SP,A3,A5
	RETS

	.END

* EOF
